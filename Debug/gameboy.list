
gameboy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b728  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000084c4  0800b8c8  0800b8c8  0001b8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d8c  08013d8c  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  08013d8c  08013d8c  00023d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d94  08013d94  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d94  08013d94  00023d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d98  08013d98  00023d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08013d9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000070  08013e0c  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08013e0c  000300b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f88  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e4  00000000  00000000  00039028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  0003aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000568  00000000  00000000  0003b040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016688  00000000  00000000  0003b5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000975c  00000000  00000000  00051c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ef0  00000000  00000000  0005b38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e127c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d8  00000000  00000000  000e12d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8b0 	.word	0x0800b8b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800b8b0 	.word	0x0800b8b0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_d2uiz>:
 8000648:	004a      	lsls	r2, r1, #1
 800064a:	d211      	bcs.n	8000670 <__aeabi_d2uiz+0x28>
 800064c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000650:	d211      	bcs.n	8000676 <__aeabi_d2uiz+0x2e>
 8000652:	d50d      	bpl.n	8000670 <__aeabi_d2uiz+0x28>
 8000654:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000658:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800065c:	d40e      	bmi.n	800067c <__aeabi_d2uiz+0x34>
 800065e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000666:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800066a:	fa23 f002 	lsr.w	r0, r3, r2
 800066e:	4770      	bx	lr
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	4770      	bx	lr
 8000676:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800067a:	d102      	bne.n	8000682 <__aeabi_d2uiz+0x3a>
 800067c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000680:	4770      	bx	lr
 8000682:	f04f 0000 	mov.w	r0, #0
 8000686:	4770      	bx	lr

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000698:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800069c:	f000 b96e 	b.w	800097c <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f806 	bl	80006b8 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__udivmoddi4>:
 80006b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006bc:	9d08      	ldr	r5, [sp, #32]
 80006be:	4604      	mov	r4, r0
 80006c0:	468c      	mov	ip, r1
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	f040 8083 	bne.w	80007ce <__udivmoddi4+0x116>
 80006c8:	428a      	cmp	r2, r1
 80006ca:	4617      	mov	r7, r2
 80006cc:	d947      	bls.n	800075e <__udivmoddi4+0xa6>
 80006ce:	fab2 f282 	clz	r2, r2
 80006d2:	b142      	cbz	r2, 80006e6 <__udivmoddi4+0x2e>
 80006d4:	f1c2 0020 	rsb	r0, r2, #32
 80006d8:	fa24 f000 	lsr.w	r0, r4, r0
 80006dc:	4091      	lsls	r1, r2
 80006de:	4097      	lsls	r7, r2
 80006e0:	ea40 0c01 	orr.w	ip, r0, r1
 80006e4:	4094      	lsls	r4, r2
 80006e6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006ea:	0c23      	lsrs	r3, r4, #16
 80006ec:	fbbc f6f8 	udiv	r6, ip, r8
 80006f0:	fa1f fe87 	uxth.w	lr, r7
 80006f4:	fb08 c116 	mls	r1, r8, r6, ip
 80006f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006fc:	fb06 f10e 	mul.w	r1, r6, lr
 8000700:	4299      	cmp	r1, r3
 8000702:	d909      	bls.n	8000718 <__udivmoddi4+0x60>
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800070a:	f080 8119 	bcs.w	8000940 <__udivmoddi4+0x288>
 800070e:	4299      	cmp	r1, r3
 8000710:	f240 8116 	bls.w	8000940 <__udivmoddi4+0x288>
 8000714:	3e02      	subs	r6, #2
 8000716:	443b      	add	r3, r7
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	b2a4      	uxth	r4, r4
 800071c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000720:	fb08 3310 	mls	r3, r8, r0, r3
 8000724:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000728:	fb00 fe0e 	mul.w	lr, r0, lr
 800072c:	45a6      	cmp	lr, r4
 800072e:	d909      	bls.n	8000744 <__udivmoddi4+0x8c>
 8000730:	193c      	adds	r4, r7, r4
 8000732:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000736:	f080 8105 	bcs.w	8000944 <__udivmoddi4+0x28c>
 800073a:	45a6      	cmp	lr, r4
 800073c:	f240 8102 	bls.w	8000944 <__udivmoddi4+0x28c>
 8000740:	3802      	subs	r0, #2
 8000742:	443c      	add	r4, r7
 8000744:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000748:	eba4 040e 	sub.w	r4, r4, lr
 800074c:	2600      	movs	r6, #0
 800074e:	b11d      	cbz	r5, 8000758 <__udivmoddi4+0xa0>
 8000750:	40d4      	lsrs	r4, r2
 8000752:	2300      	movs	r3, #0
 8000754:	e9c5 4300 	strd	r4, r3, [r5]
 8000758:	4631      	mov	r1, r6
 800075a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075e:	b902      	cbnz	r2, 8000762 <__udivmoddi4+0xaa>
 8000760:	deff      	udf	#255	; 0xff
 8000762:	fab2 f282 	clz	r2, r2
 8000766:	2a00      	cmp	r2, #0
 8000768:	d150      	bne.n	800080c <__udivmoddi4+0x154>
 800076a:	1bcb      	subs	r3, r1, r7
 800076c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000770:	fa1f f887 	uxth.w	r8, r7
 8000774:	2601      	movs	r6, #1
 8000776:	fbb3 fcfe 	udiv	ip, r3, lr
 800077a:	0c21      	lsrs	r1, r4, #16
 800077c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000780:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000784:	fb08 f30c 	mul.w	r3, r8, ip
 8000788:	428b      	cmp	r3, r1
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0xe4>
 800078c:	1879      	adds	r1, r7, r1
 800078e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0xe2>
 8000794:	428b      	cmp	r3, r1
 8000796:	f200 80e9 	bhi.w	800096c <__udivmoddi4+0x2b4>
 800079a:	4684      	mov	ip, r0
 800079c:	1ac9      	subs	r1, r1, r3
 800079e:	b2a3      	uxth	r3, r4
 80007a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007a4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007a8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007ac:	fb08 f800 	mul.w	r8, r8, r0
 80007b0:	45a0      	cmp	r8, r4
 80007b2:	d907      	bls.n	80007c4 <__udivmoddi4+0x10c>
 80007b4:	193c      	adds	r4, r7, r4
 80007b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x10a>
 80007bc:	45a0      	cmp	r8, r4
 80007be:	f200 80d9 	bhi.w	8000974 <__udivmoddi4+0x2bc>
 80007c2:	4618      	mov	r0, r3
 80007c4:	eba4 0408 	sub.w	r4, r4, r8
 80007c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007cc:	e7bf      	b.n	800074e <__udivmoddi4+0x96>
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d909      	bls.n	80007e6 <__udivmoddi4+0x12e>
 80007d2:	2d00      	cmp	r5, #0
 80007d4:	f000 80b1 	beq.w	800093a <__udivmoddi4+0x282>
 80007d8:	2600      	movs	r6, #0
 80007da:	e9c5 0100 	strd	r0, r1, [r5]
 80007de:	4630      	mov	r0, r6
 80007e0:	4631      	mov	r1, r6
 80007e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e6:	fab3 f683 	clz	r6, r3
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d14a      	bne.n	8000884 <__udivmoddi4+0x1cc>
 80007ee:	428b      	cmp	r3, r1
 80007f0:	d302      	bcc.n	80007f8 <__udivmoddi4+0x140>
 80007f2:	4282      	cmp	r2, r0
 80007f4:	f200 80b8 	bhi.w	8000968 <__udivmoddi4+0x2b0>
 80007f8:	1a84      	subs	r4, r0, r2
 80007fa:	eb61 0103 	sbc.w	r1, r1, r3
 80007fe:	2001      	movs	r0, #1
 8000800:	468c      	mov	ip, r1
 8000802:	2d00      	cmp	r5, #0
 8000804:	d0a8      	beq.n	8000758 <__udivmoddi4+0xa0>
 8000806:	e9c5 4c00 	strd	r4, ip, [r5]
 800080a:	e7a5      	b.n	8000758 <__udivmoddi4+0xa0>
 800080c:	f1c2 0320 	rsb	r3, r2, #32
 8000810:	fa20 f603 	lsr.w	r6, r0, r3
 8000814:	4097      	lsls	r7, r2
 8000816:	fa01 f002 	lsl.w	r0, r1, r2
 800081a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800081e:	40d9      	lsrs	r1, r3
 8000820:	4330      	orrs	r0, r6
 8000822:	0c03      	lsrs	r3, r0, #16
 8000824:	fbb1 f6fe 	udiv	r6, r1, lr
 8000828:	fa1f f887 	uxth.w	r8, r7
 800082c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000830:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000834:	fb06 f108 	mul.w	r1, r6, r8
 8000838:	4299      	cmp	r1, r3
 800083a:	fa04 f402 	lsl.w	r4, r4, r2
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x19c>
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000846:	f080 808d 	bcs.w	8000964 <__udivmoddi4+0x2ac>
 800084a:	4299      	cmp	r1, r3
 800084c:	f240 808a 	bls.w	8000964 <__udivmoddi4+0x2ac>
 8000850:	3e02      	subs	r6, #2
 8000852:	443b      	add	r3, r7
 8000854:	1a5b      	subs	r3, r3, r1
 8000856:	b281      	uxth	r1, r0
 8000858:	fbb3 f0fe 	udiv	r0, r3, lr
 800085c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000860:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000864:	fb00 f308 	mul.w	r3, r0, r8
 8000868:	428b      	cmp	r3, r1
 800086a:	d907      	bls.n	800087c <__udivmoddi4+0x1c4>
 800086c:	1879      	adds	r1, r7, r1
 800086e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000872:	d273      	bcs.n	800095c <__udivmoddi4+0x2a4>
 8000874:	428b      	cmp	r3, r1
 8000876:	d971      	bls.n	800095c <__udivmoddi4+0x2a4>
 8000878:	3802      	subs	r0, #2
 800087a:	4439      	add	r1, r7
 800087c:	1acb      	subs	r3, r1, r3
 800087e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000882:	e778      	b.n	8000776 <__udivmoddi4+0xbe>
 8000884:	f1c6 0c20 	rsb	ip, r6, #32
 8000888:	fa03 f406 	lsl.w	r4, r3, r6
 800088c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000890:	431c      	orrs	r4, r3
 8000892:	fa20 f70c 	lsr.w	r7, r0, ip
 8000896:	fa01 f306 	lsl.w	r3, r1, r6
 800089a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800089e:	fa21 f10c 	lsr.w	r1, r1, ip
 80008a2:	431f      	orrs	r7, r3
 80008a4:	0c3b      	lsrs	r3, r7, #16
 80008a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008aa:	fa1f f884 	uxth.w	r8, r4
 80008ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80008b2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80008b6:	fb09 fa08 	mul.w	sl, r9, r8
 80008ba:	458a      	cmp	sl, r1
 80008bc:	fa02 f206 	lsl.w	r2, r2, r6
 80008c0:	fa00 f306 	lsl.w	r3, r0, r6
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0x220>
 80008c6:	1861      	adds	r1, r4, r1
 80008c8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80008cc:	d248      	bcs.n	8000960 <__udivmoddi4+0x2a8>
 80008ce:	458a      	cmp	sl, r1
 80008d0:	d946      	bls.n	8000960 <__udivmoddi4+0x2a8>
 80008d2:	f1a9 0902 	sub.w	r9, r9, #2
 80008d6:	4421      	add	r1, r4
 80008d8:	eba1 010a 	sub.w	r1, r1, sl
 80008dc:	b2bf      	uxth	r7, r7
 80008de:	fbb1 f0fe 	udiv	r0, r1, lr
 80008e2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008e6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008ea:	fb00 f808 	mul.w	r8, r0, r8
 80008ee:	45b8      	cmp	r8, r7
 80008f0:	d907      	bls.n	8000902 <__udivmoddi4+0x24a>
 80008f2:	19e7      	adds	r7, r4, r7
 80008f4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008f8:	d22e      	bcs.n	8000958 <__udivmoddi4+0x2a0>
 80008fa:	45b8      	cmp	r8, r7
 80008fc:	d92c      	bls.n	8000958 <__udivmoddi4+0x2a0>
 80008fe:	3802      	subs	r0, #2
 8000900:	4427      	add	r7, r4
 8000902:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000906:	eba7 0708 	sub.w	r7, r7, r8
 800090a:	fba0 8902 	umull	r8, r9, r0, r2
 800090e:	454f      	cmp	r7, r9
 8000910:	46c6      	mov	lr, r8
 8000912:	4649      	mov	r1, r9
 8000914:	d31a      	bcc.n	800094c <__udivmoddi4+0x294>
 8000916:	d017      	beq.n	8000948 <__udivmoddi4+0x290>
 8000918:	b15d      	cbz	r5, 8000932 <__udivmoddi4+0x27a>
 800091a:	ebb3 020e 	subs.w	r2, r3, lr
 800091e:	eb67 0701 	sbc.w	r7, r7, r1
 8000922:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000926:	40f2      	lsrs	r2, r6
 8000928:	ea4c 0202 	orr.w	r2, ip, r2
 800092c:	40f7      	lsrs	r7, r6
 800092e:	e9c5 2700 	strd	r2, r7, [r5]
 8000932:	2600      	movs	r6, #0
 8000934:	4631      	mov	r1, r6
 8000936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800093a:	462e      	mov	r6, r5
 800093c:	4628      	mov	r0, r5
 800093e:	e70b      	b.n	8000758 <__udivmoddi4+0xa0>
 8000940:	4606      	mov	r6, r0
 8000942:	e6e9      	b.n	8000718 <__udivmoddi4+0x60>
 8000944:	4618      	mov	r0, r3
 8000946:	e6fd      	b.n	8000744 <__udivmoddi4+0x8c>
 8000948:	4543      	cmp	r3, r8
 800094a:	d2e5      	bcs.n	8000918 <__udivmoddi4+0x260>
 800094c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000950:	eb69 0104 	sbc.w	r1, r9, r4
 8000954:	3801      	subs	r0, #1
 8000956:	e7df      	b.n	8000918 <__udivmoddi4+0x260>
 8000958:	4608      	mov	r0, r1
 800095a:	e7d2      	b.n	8000902 <__udivmoddi4+0x24a>
 800095c:	4660      	mov	r0, ip
 800095e:	e78d      	b.n	800087c <__udivmoddi4+0x1c4>
 8000960:	4681      	mov	r9, r0
 8000962:	e7b9      	b.n	80008d8 <__udivmoddi4+0x220>
 8000964:	4666      	mov	r6, ip
 8000966:	e775      	b.n	8000854 <__udivmoddi4+0x19c>
 8000968:	4630      	mov	r0, r6
 800096a:	e74a      	b.n	8000802 <__udivmoddi4+0x14a>
 800096c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000970:	4439      	add	r1, r7
 8000972:	e713      	b.n	800079c <__udivmoddi4+0xe4>
 8000974:	3802      	subs	r0, #2
 8000976:	443c      	add	r4, r7
 8000978:	e724      	b.n	80007c4 <__udivmoddi4+0x10c>
 800097a:	bf00      	nop

0800097c <__aeabi_idiv0>:
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <ILI9341_ConfigurePinForOutput>:
  PARAM_FLAG_ENTRY_MODE_LOW_VOLTAGE_DETECTION_DISABLED = 0x1,
  PARAM_FLAG_ENTRY_MODE_NORMAL_DISPLAY = 0x6
};

inline static void ILI9341_ConfigurePinForOutput(struct ILI9341_Pin_t p)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	463b      	mov	r3, r7
 8000988:	e883 0003 	stmia.w	r3, {r0, r1}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = p.pin;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(p.port, &GPIO_InitStruct);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	f107 020c 	add.w	r2, r7, #12
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f009 f819 	bl	80099ec <HAL_GPIO_Init>
}
 80009ba:	bf00      	nop
 80009bc:	3720      	adds	r7, #32
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <ILI9341_PrepareDataPinsForWriting>:
    ILI9341_ConfigurePinForInput(ili->DATA[i]);
  }
}

inline static void ILI9341_PrepareDataPinsForWriting(struct ILI9341_t *ili)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 8; i++) {
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e00a      	b.n	80009e6 <ILI9341_PrepareDataPinsForWriting+0x24>
    ILI9341_ConfigurePinForOutput(ili->DATA[i]);
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	4413      	add	r3, r2
 80009d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009dc:	f7ff ffd0 	bl	8000980 <ILI9341_ConfigurePinForOutput>
  for (int i = 0; i < 8; i++) {
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2b07      	cmp	r3, #7
 80009ea:	ddf1      	ble.n	80009d0 <ILI9341_PrepareDataPinsForWriting+0xe>
  }
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <ILI9341_WriteToDataPins>:

inline static void ILI9341_WriteToDataPins(struct ILI9341_t *ili, uint8_t b)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	70fb      	strb	r3, [r7, #3]
  for (int i = 0; i < 8; i++) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e027      	b.n	8000a58 <ILI9341_WriteToDataPins+0x62>
    if (b & (1 << i))
 8000a08:	78fa      	ldrb	r2, [r7, #3]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	fa42 f303 	asr.w	r3, r2, r3
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00e      	beq.n	8000a36 <ILI9341_WriteToDataPins+0x40>
      PIN_HIGH(ili->DATA[i]);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	4413      	add	r3, r2
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f009 f960 	bl	8009cf4 <HAL_GPIO_WritePin>
 8000a34:	e00d      	b.n	8000a52 <ILI9341_WriteToDataPins+0x5c>
    else
      PIN_LOW(ili->DATA[i]);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	4413      	add	r3, r2
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f009 f951 	bl	8009cf4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b07      	cmp	r3, #7
 8000a5c:	ddd4      	ble.n	8000a08 <ILI9341_WriteToDataPins+0x12>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <ILI9341_WriteCommand>:

  return b;
}

inline static void ILI9341_WriteCommand(struct ILI9341_t *ili, uint8_t command)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
  CD_COMMAND(ili);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	f009 f937 	bl	8009cf4 <HAL_GPIO_WritePin>

  WR_ACTIVE(ili);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	2200      	movs	r2, #0
 8000a92:	4619      	mov	r1, r3
 8000a94:	f009 f92e 	bl	8009cf4 <HAL_GPIO_WritePin>
  ILI9341_WriteToDataPins(ili, command);
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ffaa 	bl	80009f6 <ILI9341_WriteToDataPins>
  WR_IDLE(ili);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	2201      	movs	r2, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f009 f920 	bl	8009cf4 <HAL_GPIO_WritePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <ILI9341_WriteData>:

inline static void ILI9341_WriteData(struct ILI9341_t *ili, uint8_t data)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
  CD_DATA(ili);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f009 f90d 	bl	8009cf4 <HAL_GPIO_WritePin>

  WR_ACTIVE(ili);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f009 f904 	bl	8009cf4 <HAL_GPIO_WritePin>
  ILI9341_WriteToDataPins(ili, data);
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	4619      	mov	r1, r3
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff80 	bl	80009f6 <ILI9341_WriteToDataPins>
  WR_IDLE(ili);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	2201      	movs	r2, #1
 8000b02:	4619      	mov	r1, r3
 8000b04:	f009 f8f6 	bl	8009cf4 <HAL_GPIO_WritePin>
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <ILI9341_WriteCommandWithParameter>:
inline static void ILI9341_WriteCommandWithParameter(
  struct ILI9341_t *ili,
  uint8_t command,
  uint8_t param1
)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	70bb      	strb	r3, [r7, #2]
  ILI9341_WriteCommand(ili, command);
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	4619      	mov	r1, r3
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff9f 	bl	8000a68 <ILI9341_WriteCommand>
  SMALL_DELAY(ili);
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f008 fe54 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteData(ili, param1);
 8000b30:	78bb      	ldrb	r3, [r7, #2]
 8000b32:	4619      	mov	r1, r3
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ffc1 	bl	8000abc <ILI9341_WriteData>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <ILI9341_WriteCommandWith2Parameters>:
  struct ILI9341_t *ili,
  uint8_t command,
  uint8_t param1,
  uint8_t param2
)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4603      	mov	r3, r0
 8000b52:	70fb      	strb	r3, [r7, #3]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70bb      	strb	r3, [r7, #2]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	707b      	strb	r3, [r7, #1]
  ILI9341_WriteCommand(ili, command);
 8000b5c:	78fb      	ldrb	r3, [r7, #3]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff81 	bl	8000a68 <ILI9341_WriteCommand>
  SMALL_DELAY(ili);
 8000b66:	2001      	movs	r0, #1
 8000b68:	f008 fe36 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteData(ili, param1);
 8000b6c:	78bb      	ldrb	r3, [r7, #2]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ffa3 	bl	8000abc <ILI9341_WriteData>
  SMALL_DELAY(ili);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f008 fe2e 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteData(ili, param2);
 8000b7c:	787b      	ldrb	r3, [r7, #1]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff9b 	bl	8000abc <ILI9341_WriteData>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <ILI9341_WriteCommandWith4Parameters>:
  uint8_t command,
  uint8_t param1,
  uint8_t param2,
  uint8_t param3,
  uint8_t param4)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	4608      	mov	r0, r1
 8000b98:	4611      	mov	r1, r2
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	70fb      	strb	r3, [r7, #3]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70bb      	strb	r3, [r7, #2]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	707b      	strb	r3, [r7, #1]
  ILI9341_WriteCommand(ili, command);
 8000ba8:	78fb      	ldrb	r3, [r7, #3]
 8000baa:	4619      	mov	r1, r3
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff5b 	bl	8000a68 <ILI9341_WriteCommand>
  SMALL_DELAY(ili);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f008 fe10 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteData(ili, param1);
 8000bb8:	78bb      	ldrb	r3, [r7, #2]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff7d 	bl	8000abc <ILI9341_WriteData>
  SMALL_DELAY(ili);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f008 fe08 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteData(ili, param2);
 8000bc8:	787b      	ldrb	r3, [r7, #1]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff75 	bl	8000abc <ILI9341_WriteData>
  SMALL_DELAY(ili);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f008 fe00 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteData(ili, param3);
 8000bd8:	7c3b      	ldrb	r3, [r7, #16]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff6d 	bl	8000abc <ILI9341_WriteData>
  SMALL_DELAY(ili);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f008 fdf8 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteData(ili, param4);
 8000be8:	7d3b      	ldrb	r3, [r7, #20]
 8000bea:	4619      	mov	r1, r3
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff65 	bl	8000abc <ILI9341_WriteData>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <ILI9341_Init>:
  struct ILI9341_Pin_t CS,
  struct ILI9341_Pin_t RS,
  struct ILI9341_Pin_t WR,
  struct ILI9341_Pin_t RD
)
{
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	1d38      	adds	r0, r7, #4
 8000c06:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c0a:	61fb      	str	r3, [r7, #28]
  ili->RST = RST;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3340      	adds	r3, #64	; 0x40
 8000c10:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c18:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->CS = CS;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3348      	adds	r3, #72	; 0x48
 8000c20:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8000c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c28:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->RS = RS;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3350      	adds	r3, #80	; 0x50
 8000c30:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c38:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->WR = WR;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3358      	adds	r3, #88	; 0x58
 8000c40:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c48:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->RD = RD;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3360      	adds	r3, #96	; 0x60
 8000c50:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000c54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c58:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->DATA[0] = D0;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c68:	e882 0003 	stmia.w	r2, {r0, r1}
  ili->DATA[1] = D1;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3308      	adds	r3, #8
 8000c70:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000c74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c78:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->DATA[2] = D2;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3310      	adds	r3, #16
 8000c80:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c88:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->DATA[3] = D3;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3318      	adds	r3, #24
 8000c90:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000c94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c98:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->DATA[4] = D4;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	3320      	adds	r3, #32
 8000ca0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000ca4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ca8:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->DATA[5] = D5;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3328      	adds	r3, #40	; 0x28
 8000cb0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000cb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb8:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->DATA[6] = D6;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3330      	adds	r3, #48	; 0x30
 8000cc0:	f107 021c 	add.w	r2, r7, #28
 8000cc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc8:	e883 0003 	stmia.w	r3, {r0, r1}
  ili->DATA[7] = D7;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3338      	adds	r3, #56	; 0x38
 8000cd0:	1d3a      	adds	r2, r7, #4
 8000cd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd6:	e883 0003 	stmia.w	r3, {r0, r1}

  ILI9341_ConfigurePinForOutput(ili->RST);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3340      	adds	r3, #64	; 0x40
 8000cde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ce2:	f7ff fe4d 	bl	8000980 <ILI9341_ConfigurePinForOutput>
  ILI9341_ConfigurePinForOutput(ili->CS);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3348      	adds	r3, #72	; 0x48
 8000cea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cee:	f7ff fe47 	bl	8000980 <ILI9341_ConfigurePinForOutput>
  ILI9341_ConfigurePinForOutput(ili->RS);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3350      	adds	r3, #80	; 0x50
 8000cf6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000cfa:	f7ff fe41 	bl	8000980 <ILI9341_ConfigurePinForOutput>
  ILI9341_ConfigurePinForOutput(ili->WR);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3358      	adds	r3, #88	; 0x58
 8000d02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d06:	f7ff fe3b 	bl	8000980 <ILI9341_ConfigurePinForOutput>
  ILI9341_ConfigurePinForOutput(ili->RD);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3360      	adds	r3, #96	; 0x60
 8000d0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d12:	f7ff fe35 	bl	8000980 <ILI9341_ConfigurePinForOutput>

  CS_ACTIVE(ili);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	2200      	movs	r2, #0
 8000d22:	4619      	mov	r1, r3
 8000d24:	f008 ffe6 	bl	8009cf4 <HAL_GPIO_WritePin>
  PIN_HIGH(ili->RST);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	2201      	movs	r2, #1
 8000d34:	4619      	mov	r1, r3
 8000d36:	f008 ffdd 	bl	8009cf4 <HAL_GPIO_WritePin>
  WR_IDLE(ili);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	2201      	movs	r2, #1
 8000d46:	4619      	mov	r1, r3
 8000d48:	f008 ffd4 	bl	8009cf4 <HAL_GPIO_WritePin>
  RD_IDLE(ili);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	2201      	movs	r2, #1
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f008 ffcb 	bl	8009cf4 <HAL_GPIO_WritePin>
  CD_COMMAND(ili);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f008 ffc2 	bl	8009cf4 <HAL_GPIO_WritePin>

  // Hardware Reset
  PIN_HIGH(ili->RST);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f008 ffb9 	bl	8009cf4 <HAL_GPIO_WritePin>
  DELAY(50);
 8000d82:	2032      	movs	r0, #50	; 0x32
 8000d84:	f008 fd28 	bl	80097d8 <HAL_Delay>
  PIN_LOW(ili->RST);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	2200      	movs	r2, #0
 8000d94:	4619      	mov	r1, r3
 8000d96:	f008 ffad 	bl	8009cf4 <HAL_GPIO_WritePin>
  DELAY(150);
 8000d9a:	2096      	movs	r0, #150	; 0x96
 8000d9c:	f008 fd1c 	bl	80097d8 <HAL_Delay>
  PIN_HIGH(ili->RST);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	4619      	mov	r1, r3
 8000dae:	f008 ffa1 	bl	8009cf4 <HAL_GPIO_WritePin>
  DELAY(200);
 8000db2:	20c8      	movs	r0, #200	; 0xc8
 8000db4:	f008 fd10 	bl	80097d8 <HAL_Delay>

  CS_IDLE(ili);

  return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dc4:	b002      	add	sp, #8
 8000dc6:	4770      	bx	lr

08000dc8 <ILI9341_SendInitializationSequence>:

void ILI9341_SendInitializationSequence(struct ILI9341_t *ili)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  ILI9341_PrepareDataPinsForWriting(ili);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fdf6 	bl	80009c2 <ILI9341_PrepareDataPinsForWriting>

  // Data transfer sync
  {
    CS_ACTIVE(ili);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	f008 ff86 	bl	8009cf4 <HAL_GPIO_WritePin>
    CD_COMMAND(ili);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	f008 ff7d 	bl	8009cf4 <HAL_GPIO_WritePin>
    ILI9341_WriteData(ili, 0x00);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fe5d 	bl	8000abc <ILI9341_WriteData>
    for (int i = 0; i < 3; i++) {
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	e014      	b.n	8000e32 <ILI9341_SendInitializationSequence+0x6a>
      WR_ACTIVE(ili);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	2200      	movs	r2, #0
 8000e14:	4619      	mov	r1, r3
 8000e16:	f008 ff6d 	bl	8009cf4 <HAL_GPIO_WritePin>
      WR_IDLE(ili);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	2201      	movs	r2, #1
 8000e26:	4619      	mov	r1, r3
 8000e28:	f008 ff64 	bl	8009cf4 <HAL_GPIO_WritePin>
    for (int i = 0; i < 3; i++) {
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	dde7      	ble.n	8000e08 <ILI9341_SendInitializationSequence+0x40>
    }
    CS_IDLE(ili);
  }

  CS_ACTIVE(ili);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	2200      	movs	r2, #0
 8000e44:	4619      	mov	r1, r3
 8000e46:	f008 ff55 	bl	8009cf4 <HAL_GPIO_WritePin>

  ILI9341_WriteCommand(ili, CMD_SOFTWARE_RESET);
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff fe0b 	bl	8000a68 <ILI9341_WriteCommand>
  DELAY(150);
 8000e52:	2096      	movs	r0, #150	; 0x96
 8000e54:	f008 fcc0 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteCommand(ili, CMD_DISPLAY_OFF);
 8000e58:	2128      	movs	r1, #40	; 0x28
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fe04 	bl	8000a68 <ILI9341_WriteCommand>
  SMALL_DELAY(ili);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f008 fcb9 	bl	80097d8 <HAL_Delay>

  ILI9341_WriteCommandWithParameter(ili, CMD_POWER_CONTROL_1, 0x23);
 8000e66:	2223      	movs	r2, #35	; 0x23
 8000e68:	21c0      	movs	r1, #192	; 0xc0
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fe50 	bl	8000b10 <ILI9341_WriteCommandWithParameter>
  SMALL_DELAY(ili);
 8000e70:	2001      	movs	r0, #1
 8000e72:	f008 fcb1 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteCommandWithParameter(ili, CMD_POWER_CONTROL_2, 0x10);
 8000e76:	2210      	movs	r2, #16
 8000e78:	21c1      	movs	r1, #193	; 0xc1
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fe48 	bl	8000b10 <ILI9341_WriteCommandWithParameter>
  SMALL_DELAY(ili);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f008 fca9 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteCommandWith2Parameters(ili, CMD_VCOM_CONTROL_1, 0x2B, 0x2B);
 8000e86:	232b      	movs	r3, #43	; 0x2b
 8000e88:	222b      	movs	r2, #43	; 0x2b
 8000e8a:	21c5      	movs	r1, #197	; 0xc5
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff fe58 	bl	8000b42 <ILI9341_WriteCommandWith2Parameters>
  SMALL_DELAY(ili);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f008 fca0 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteCommandWithParameter(ili, CMD_VCOM_CONTROL_2, 0xC0);
 8000e98:	22c0      	movs	r2, #192	; 0xc0
 8000e9a:	21c7      	movs	r1, #199	; 0xc7
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff fe37 	bl	8000b10 <ILI9341_WriteCommandWithParameter>
  SMALL_DELAY(ili);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f008 fc98 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteCommandWithParameter(ili, CMD_MEMORY_ACCESS_CONTROL, PARAM_FLAG_MEMORY_ACCESS_CONTROL_ROW_ADDRESS_ORDER | PARAM_FLAG_MEMORY_ACCESS_CONTROL_ROW_BGR);
 8000ea8:	2288      	movs	r2, #136	; 0x88
 8000eaa:	2136      	movs	r1, #54	; 0x36
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff fe2f 	bl	8000b10 <ILI9341_WriteCommandWithParameter>
  SMALL_DELAY(ili);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f008 fc90 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteCommandWithParameter(ili, CMD_PIXEL_FORMAT_SET, PARAM_PIXEL_FORMAT_RGB_16_BITS_PER_PIXEL | PARAM_PIXEL_FORMAT_BGR_16_BITS_PER_PIXEL);
 8000eb8:	2255      	movs	r2, #85	; 0x55
 8000eba:	213a      	movs	r1, #58	; 0x3a
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff fe27 	bl	8000b10 <ILI9341_WriteCommandWithParameter>
  SMALL_DELAY(ili);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f008 fc88 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteCommandWith2Parameters(ili, CMD_FRAME_RATE_CONTROL, 0x00, 0x1b);
 8000ec8:	231b      	movs	r3, #27
 8000eca:	2200      	movs	r2, #0
 8000ecc:	21b1      	movs	r1, #177	; 0xb1
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff fe37 	bl	8000b42 <ILI9341_WriteCommandWith2Parameters>
  SMALL_DELAY(ili);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f008 fc7f 	bl	80097d8 <HAL_Delay>

  ILI9341_WriteCommandWithParameter(ili, CMD_ENTRY_MODE_SET, PARAM_FLAG_ENTRY_MODE_LOW_VOLTAGE_DETECTION_DISABLED | PARAM_FLAG_ENTRY_MODE_NORMAL_DISPLAY);
 8000eda:	2207      	movs	r2, #7
 8000edc:	21b7      	movs	r1, #183	; 0xb7
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fe16 	bl	8000b10 <ILI9341_WriteCommandWithParameter>
  SMALL_DELAY(ili);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f008 fc77 	bl	80097d8 <HAL_Delay>

  ILI9341_WriteCommand(ili, CMD_SLEEP_OUT);
 8000eea:	2111      	movs	r1, #17
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff fdbb 	bl	8000a68 <ILI9341_WriteCommand>
  DELAY(150);
 8000ef2:	2096      	movs	r0, #150	; 0x96
 8000ef4:	f008 fc70 	bl	80097d8 <HAL_Delay>
  ILI9341_WriteCommand(ili, CMD_DISPLAY_ON);
 8000ef8:	2129      	movs	r1, #41	; 0x29
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fdb4 	bl	8000a68 <ILI9341_WriteCommand>
  DELAY(500);
 8000f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f04:	f008 fc68 	bl	80097d8 <HAL_Delay>

  CS_IDLE(ili);
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <ILI9341_SetDrawingArea>:

void ILI9341_SetDrawingArea(struct ILI9341_t *ili, uint16_t x1, uint16_t x2, uint16_t y1, uint16_t y2)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	4608      	mov	r0, r1
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4603      	mov	r3, r0
 8000f20:	817b      	strh	r3, [r7, #10]
 8000f22:	460b      	mov	r3, r1
 8000f24:	813b      	strh	r3, [r7, #8]
 8000f26:	4613      	mov	r3, r2
 8000f28:	80fb      	strh	r3, [r7, #6]
  // DO NOT ADD CS_ACTIVE / CS_IDLE HERE BECAUSE IT DISABLES THE MEMORY WRITE AFTER

  ILI9341_PrepareDataPinsForWriting(ili);
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f7ff fd49 	bl	80009c2 <ILI9341_PrepareDataPinsForWriting>

  ILI9341_WriteCommandWith4Parameters(
 8000f30:	897b      	ldrh	r3, [r7, #10]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b2d9      	uxtb	r1, r3
 8000f38:	897b      	ldrh	r3, [r7, #10]
 8000f3a:	b2d8      	uxtb	r0, r3
 8000f3c:	893b      	ldrh	r3, [r7, #8]
 8000f3e:	0a1b      	lsrs	r3, r3, #8
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	893a      	ldrh	r2, [r7, #8]
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	9201      	str	r2, [sp, #4]
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	460a      	mov	r2, r1
 8000f50:	212a      	movs	r1, #42	; 0x2a
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f7ff fe1b 	bl	8000b8e <ILI9341_WriteCommandWith4Parameters>
    (uint8_t) (x1 & 0xff),
    (uint8_t) (x2 >> 8),
    (uint8_t) x2 & 0xff
  );

  ILI9341_WriteCommandWith4Parameters(
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	b2d9      	uxtb	r1, r3
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	b2d8      	uxtb	r0, r3
 8000f64:	8b3b      	ldrh	r3, [r7, #24]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	8b3a      	ldrh	r2, [r7, #24]
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	9201      	str	r2, [sp, #4]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	4603      	mov	r3, r0
 8000f76:	460a      	mov	r2, r1
 8000f78:	212b      	movs	r1, #43	; 0x2b
 8000f7a:	68f8      	ldr	r0, [r7, #12]
 8000f7c:	f7ff fe07 	bl	8000b8e <ILI9341_WriteCommandWith4Parameters>
    (uint8_t) (y1 >> 8),
    (uint8_t) (y1 & 0xff),
    (uint8_t) (y2 >> 8),
    (uint8_t) y2 & 0xff
  );
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <ILI9341_DrawFramebuffer>:

void ILI9341_DrawFramebuffer(struct ILI9341_t *ili, uint16_t framebuffer[], uint16_t width, uint16_t height)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	460b      	mov	r3, r1
 8000f98:	80fb      	strh	r3, [r7, #6]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	80bb      	strh	r3, [r7, #4]
	CS_ACTIVE(ili);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	f008 fea2 	bl	8009cf4 <HAL_GPIO_WritePin>
	ILI9341_PrepareDataPinsForWriting(ili);
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f7ff fd06 	bl	80009c2 <ILI9341_PrepareDataPinsForWriting>

	ILI9341_SetDrawingArea(ili, 0, width, 0, height);
 8000fb6:	88fa      	ldrh	r2, [r7, #6]
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f7ff ffa5 	bl	8000f10 <ILI9341_SetDrawingArea>
	ILI9341_WriteCommand(ili, CMD_MEMORY_WRITE);
 8000fc6:	212c      	movs	r1, #44	; 0x2c
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f7ff fd4d 	bl	8000a68 <ILI9341_WriteCommand>
	for (int i = 0; i < width * height; i++) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e018      	b.n	8001006 <ILI9341_DrawFramebuffer+0x7e>
		ILI9341_WriteData(ili, (uint8_t) (framebuffer[i] >> 8));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	4413      	add	r3, r2
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff fd68 	bl	8000abc <ILI9341_WriteData>
		ILI9341_WriteData(ili, (uint8_t) framebuffer[i]);
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff fd5e 	bl	8000abc <ILI9341_WriteData>
	for (int i = 0; i < width * height; i++) {
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	3301      	adds	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	88ba      	ldrh	r2, [r7, #4]
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	dbdf      	blt.n	8000fd4 <ILI9341_DrawFramebuffer+0x4c>
	}

	CS_IDLE(ili);
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <gb_tick_rtc>:
/**
 * Tick the internal RTC by one second.
 * This was taken from SameBoy, which is released under MIT Licence.
 */
void gb_tick_rtc(struct gb_s *gb)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	/* is timer running? */
	if((gb->cart_rtc[4] & 0x40) == 0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800102c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001030:	2b00      	cmp	r3, #0
 8001032:	d158      	bne.n	80010e6 <gb_tick_rtc+0xc8>
	{
		if(++gb->rtc_bits.sec == 60)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800103a:	3301      	adds	r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800104a:	2b3c      	cmp	r3, #60	; 0x3c
 800104c:	d14b      	bne.n	80010e6 <gb_tick_rtc+0xc8>
		{
			gb->rtc_bits.sec = 0;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			if(++gb->rtc_bits.min == 60)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800105c:	3301      	adds	r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800106c:	2b3c      	cmp	r3, #60	; 0x3c
 800106e:	d13a      	bne.n	80010e6 <gb_tick_rtc+0xc8>
			{
				gb->rtc_bits.min = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

				if(++gb->rtc_bits.hour == 24)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800107e:	3301      	adds	r3, #1
 8001080:	b2da      	uxtb	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800108e:	2b18      	cmp	r3, #24
 8001090:	d129      	bne.n	80010e6 <gb_tick_rtc+0xc8>
				{
					gb->rtc_bits.hour = 0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

					if(++gb->rtc_bits.yday == 0)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d118      	bne.n	80010e6 <gb_tick_rtc+0xc8>
					{
						if(gb->rtc_bits.high & 1)  /* Bit 8 of days*/
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d008      	beq.n	80010d4 <gb_tick_rtc+0xb6>
						{
							gb->rtc_bits.high |= 0x80; /* Overflow bit */
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80010c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
						}

						gb->rtc_bits.high ^= 1;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80010da:	f083 0301 	eor.w	r3, r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
					}
				}
			}
		}
	}
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <__gb_read>:

/**
 * Internal function used to read bytes.
 */
uint8_t __gb_read(struct gb_s *gb, const uint_fast16_t addr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	switch(addr >> 12)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	0b1b      	lsrs	r3, r3, #12
 8001102:	2b0f      	cmp	r3, #15
 8001104:	f200 8221 	bhi.w	800154a <__gb_read+0x456>
 8001108:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <__gb_read+0x1c>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001151 	.word	0x08001151
 8001114:	08001151 	.word	0x08001151
 8001118:	08001151 	.word	0x08001151
 800111c:	08001151 	.word	0x08001151
 8001120:	0800115f 	.word	0x0800115f
 8001124:	0800115f 	.word	0x0800115f
 8001128:	0800115f 	.word	0x0800115f
 800112c:	0800115f 	.word	0x0800115f
 8001130:	080011ad 	.word	0x080011ad
 8001134:	080011ad 	.word	0x080011ad
 8001138:	080011c1 	.word	0x080011c1
 800113c:	080011c1 	.word	0x080011c1
 8001140:	08001251 	.word	0x08001251
 8001144:	08001261 	.word	0x08001261
 8001148:	08001271 	.word	0x08001271
 800114c:	08001281 	.word	0x08001281

	/* TODO: BIOS support. */
	case 0x1:
	case 0x2:
	case 0x3:
		return gb->gb_rom_read(gb, addr);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	4798      	blx	r3
 800115a:	4603      	mov	r3, r0
 800115c:	e1fd      	b.n	800155a <__gb_read+0x466>

	case 0x4:
	case 0x5:
	case 0x6:
	case 0x7:
		if(gb->mbc == 1 && gb->cart_mode_select)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7f1b      	ldrb	r3, [r3, #28]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d114      	bne.n	8001190 <__gb_read+0x9c>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00f      	beq.n	8001190 <__gb_read+0x9c>
			return gb->gb_rom_read(gb,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
					       addr + ((gb->selected_rom_bank & 0x1F) - 1) * ROM_BANK_SIZE);
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001178:	f002 021f 	and.w	r2, r2, #31
 800117c:	3a01      	subs	r2, #1
 800117e:	0392      	lsls	r2, r2, #14
 8001180:	4611      	mov	r1, r2
			return gb->gb_rom_read(gb,
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	440a      	add	r2, r1
 8001186:	4611      	mov	r1, r2
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	4798      	blx	r3
 800118c:	4603      	mov	r3, r0
 800118e:	e1e4      	b.n	800155a <__gb_read+0x466>
		else
			return gb->gb_rom_read(gb, addr + (gb->selected_rom_bank - 1) * ROM_BANK_SIZE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8001198:	3a01      	subs	r2, #1
 800119a:	0392      	lsls	r2, r2, #14
 800119c:	4611      	mov	r1, r2
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	440a      	add	r2, r1
 80011a2:	4611      	mov	r1, r2
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	4798      	blx	r3
 80011a8:	4603      	mov	r3, r0
 80011aa:	e1d6      	b.n	800155a <__gb_read+0x466>

	case 0x8:
	case 0x9:
		return gb->vram[addr - VRAM_ADDR];
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80011ba:	332c      	adds	r3, #44	; 0x2c
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	e1cc      	b.n	800155a <__gb_read+0x466>

	case 0xA:
	case 0xB:
		if(gb->cart_ram && gb->enable_cart_ram)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7f5b      	ldrb	r3, [r3, #29]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d041      	beq.n	800124c <__gb_read+0x158>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d03c      	beq.n	800124c <__gb_read+0x158>
		{
			if(gb->mbc == 3 && gb->cart_ram_bank >= 0x08)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7f1b      	ldrb	r3, [r3, #28]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d10d      	bne.n	80011f6 <__gb_read+0x102>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011e0:	2b07      	cmp	r3, #7
 80011e2:	d908      	bls.n	80011f6 <__gb_read+0x102>
				return gb->cart_rtc[gb->cart_ram_bank - 0x08];
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011ea:	3b08      	subs	r3, #8
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80011f4:	e1b1      	b.n	800155a <__gb_read+0x466>
			else if((gb->cart_mode_select || gb->mbc != 1) &&
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d103      	bne.n	8001208 <__gb_read+0x114>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7f1b      	ldrb	r3, [r3, #28]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d017      	beq.n	8001238 <__gb_read+0x144>
					gb->cart_ram_bank < gb->num_ram_banks)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3020 	ldrb.w	r3, [r3, #32]
			else if((gb->cart_mode_select || gb->mbc != 1) &&
 8001214:	429a      	cmp	r2, r3
 8001216:	d20f      	bcs.n	8001238 <__gb_read+0x144>
			{
				return gb->gb_cart_ram_read(gb, addr - CART_RAM_ADDR +
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
							    (gb->cart_ram_bank * CRAM_BANK_SIZE));
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001222:	0352      	lsls	r2, r2, #13
				return gb->gb_cart_ram_read(gb, addr - CART_RAM_ADDR +
 8001224:	4611      	mov	r1, r2
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	440a      	add	r2, r1
 800122a:	f5a2 4220 	sub.w	r2, r2, #40960	; 0xa000
 800122e:	4611      	mov	r1, r2
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	4798      	blx	r3
 8001234:	4603      	mov	r3, r0
 8001236:	e190      	b.n	800155a <__gb_read+0x466>
			}
			else
				return gb->gb_cart_ram_read(gb, addr - CART_RAM_ADDR);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	f5a2 4220 	sub.w	r2, r2, #40960	; 0xa000
 8001242:	4611      	mov	r1, r2
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	4798      	blx	r3
 8001248:	4603      	mov	r3, r0
 800124a:	e186      	b.n	800155a <__gb_read+0x466>
		}

		return 0xFF;
 800124c:	23ff      	movs	r3, #255	; 0xff
 800124e:	e184      	b.n	800155a <__gb_read+0x466>

	case 0xC:
		return gb->wram[addr - WRAM_0_ADDR];
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800125e:	e17c      	b.n	800155a <__gb_read+0x466>

	case 0xD:
		return gb->wram[addr - WRAM_1_ADDR + WRAM_BANK_SIZE];
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800126e:	e174      	b.n	800155a <__gb_read+0x466>

	case 0xE:
		return gb->wram[addr - ECHO_ADDR];
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f5a3 4360 	sub.w	r3, r3, #57344	; 0xe000
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800127e:	e16c      	b.n	800155a <__gb_read+0x466>

	case 0xF:
		if(addr < OAM_ADDR)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8001286:	d207      	bcs.n	8001298 <__gb_read+0x1a4>
			return gb->wram[addr - ECHO_ADDR];
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f5a3 4360 	sub.w	r3, r3, #57344	; 0xe000
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001296:	e160      	b.n	800155a <__gb_read+0x466>

		if(addr < UNUSED_ADDR)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f64f 629f 	movw	r2, #65183	; 0xfe9f
 800129e:	4293      	cmp	r3, r2
 80012a0:	d809      	bhi.n	80012b6 <__gb_read+0x1c2>
			return gb->oam[addr - OAM_ADDR];
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	f5a3 437e 	sub.w	r3, r3, #65024	; 0xfe00
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80012b0:	336c      	adds	r3, #108	; 0x6c
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	e151      	b.n	800155a <__gb_read+0x466>

		/* Unusable memory area. Reading from this area returns 0.*/
		if(addr < IO_ADDR)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80012bc:	d201      	bcs.n	80012c2 <__gb_read+0x1ce>
			return 0xFF;
 80012be:	23ff      	movs	r3, #255	; 0xff
 80012c0:	e14b      	b.n	800155a <__gb_read+0x466>

		/* HRAM */
		if(HRAM_ADDR <= addr && addr < INTR_EN_ADDR)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f64f 727f 	movw	r2, #65407	; 0xff7f
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d90e      	bls.n	80012ea <__gb_read+0x1f6>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d809      	bhi.n	80012ea <__gb_read+0x1f6>
			return gb->hram[addr - IO_ADDR];
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80012e4:	336c      	adds	r3, #108	; 0x6c
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	e137      	b.n	800155a <__gb_read+0x466>

		/* APU registers. */
		if((addr >= 0xFF10) && (addr <= 0xFF3F))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d915      	bls.n	8001320 <__gb_read+0x22c>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f64f 723f 	movw	r2, #65343	; 0xff3f
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d810      	bhi.n	8001320 <__gb_read+0x22c>
				0x00, 0x00, 0x70,
				0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
			};
			return gb->hram[addr - IO_ADDR] | ortab[addr - IO_ADDR];
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	4413      	add	r3, r2
 8001308:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800130c:	336c      	adds	r3, #108	; 0x6c
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001316:	4993      	ldr	r1, [pc, #588]	; (8001564 <__gb_read+0x470>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	4313      	orrs	r3, r2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	e11c      	b.n	800155a <__gb_read+0x466>
#endif
		}

		/* IO and Interrupts. */
		switch(addr & 0xFF)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b4b      	cmp	r3, #75	; 0x4b
 8001326:	f200 809f 	bhi.w	8001468 <__gb_read+0x374>
 800132a:	2b4b      	cmp	r3, #75	; 0x4b
 800132c:	f200 810b 	bhi.w	8001546 <__gb_read+0x452>
 8001330:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <__gb_read+0x244>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	0800146f 	.word	0x0800146f
 800133c:	0800147d 	.word	0x0800147d
 8001340:	08001485 	.word	0x08001485
 8001344:	08001547 	.word	0x08001547
 8001348:	0800148d 	.word	0x0800148d
 800134c:	08001495 	.word	0x08001495
 8001350:	0800149d 	.word	0x0800149d
 8001354:	080014a5 	.word	0x080014a5
 8001358:	08001547 	.word	0x08001547
 800135c:	08001547 	.word	0x08001547
 8001360:	08001547 	.word	0x08001547
 8001364:	08001547 	.word	0x08001547
 8001368:	08001547 	.word	0x08001547
 800136c:	08001547 	.word	0x08001547
 8001370:	08001547 	.word	0x08001547
 8001374:	080014ad 	.word	0x080014ad
 8001378:	08001547 	.word	0x08001547
 800137c:	08001547 	.word	0x08001547
 8001380:	08001547 	.word	0x08001547
 8001384:	08001547 	.word	0x08001547
 8001388:	08001547 	.word	0x08001547
 800138c:	08001547 	.word	0x08001547
 8001390:	08001547 	.word	0x08001547
 8001394:	08001547 	.word	0x08001547
 8001398:	08001547 	.word	0x08001547
 800139c:	08001547 	.word	0x08001547
 80013a0:	08001547 	.word	0x08001547
 80013a4:	08001547 	.word	0x08001547
 80013a8:	08001547 	.word	0x08001547
 80013ac:	08001547 	.word	0x08001547
 80013b0:	08001547 	.word	0x08001547
 80013b4:	08001547 	.word	0x08001547
 80013b8:	08001547 	.word	0x08001547
 80013bc:	08001547 	.word	0x08001547
 80013c0:	08001547 	.word	0x08001547
 80013c4:	08001547 	.word	0x08001547
 80013c8:	08001547 	.word	0x08001547
 80013cc:	08001547 	.word	0x08001547
 80013d0:	08001547 	.word	0x08001547
 80013d4:	08001547 	.word	0x08001547
 80013d8:	08001547 	.word	0x08001547
 80013dc:	08001547 	.word	0x08001547
 80013e0:	08001547 	.word	0x08001547
 80013e4:	08001547 	.word	0x08001547
 80013e8:	08001547 	.word	0x08001547
 80013ec:	08001547 	.word	0x08001547
 80013f0:	08001547 	.word	0x08001547
 80013f4:	08001547 	.word	0x08001547
 80013f8:	08001547 	.word	0x08001547
 80013fc:	08001547 	.word	0x08001547
 8001400:	08001547 	.word	0x08001547
 8001404:	08001547 	.word	0x08001547
 8001408:	08001547 	.word	0x08001547
 800140c:	08001547 	.word	0x08001547
 8001410:	08001547 	.word	0x08001547
 8001414:	08001547 	.word	0x08001547
 8001418:	08001547 	.word	0x08001547
 800141c:	08001547 	.word	0x08001547
 8001420:	08001547 	.word	0x08001547
 8001424:	08001547 	.word	0x08001547
 8001428:	08001547 	.word	0x08001547
 800142c:	08001547 	.word	0x08001547
 8001430:	08001547 	.word	0x08001547
 8001434:	08001547 	.word	0x08001547
 8001438:	080014b5 	.word	0x080014b5
 800143c:	080014bd 	.word	0x080014bd
 8001440:	080014ef 	.word	0x080014ef
 8001444:	080014f7 	.word	0x080014f7
 8001448:	080014ff 	.word	0x080014ff
 800144c:	08001507 	.word	0x08001507
 8001450:	0800150f 	.word	0x0800150f
 8001454:	08001517 	.word	0x08001517
 8001458:	0800151f 	.word	0x0800151f
 800145c:	08001527 	.word	0x08001527
 8001460:	0800152f 	.word	0x0800152f
 8001464:	08001537 	.word	0x08001537
 8001468:	2bff      	cmp	r3, #255	; 0xff
 800146a:	d068      	beq.n	800153e <__gb_read+0x44a>
 800146c:	e06b      	b.n	8001546 <__gb_read+0x452>
		{
		/* IO Registers */
		case 0x00:
			return 0xC0 | gb->gb_reg.P1;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001474:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001478:	b2db      	uxtb	r3, r3
 800147a:	e06e      	b.n	800155a <__gb_read+0x466>

		case 0x01:
			return gb->gb_reg.SB;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001482:	e06a      	b.n	800155a <__gb_read+0x466>

		case 0x02:
			return gb->gb_reg.SC;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800148a:	e066      	b.n	800155a <__gb_read+0x466>

		/* Timer Registers */
		case 0x04:
			return gb->gb_reg.DIV;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001492:	e062      	b.n	800155a <__gb_read+0x466>

		case 0x05:
			return gb->gb_reg.TIMA;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800149a:	e05e      	b.n	800155a <__gb_read+0x466>

		case 0x06:
			return gb->gb_reg.TMA;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a2:	e05a      	b.n	800155a <__gb_read+0x466>

		case 0x07:
			return gb->gb_reg.TAC;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014aa:	e056      	b.n	800155a <__gb_read+0x466>

		/* Interrupt Flag Register */
		case 0x0F:
			return gb->gb_reg.IF;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80014b2:	e052      	b.n	800155a <__gb_read+0x466>

		/* LCD Registers */
		case 0x40:
			return gb->gb_reg.LCDC;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014ba:	e04e      	b.n	800155a <__gb_read+0x466>

		case 0x41:
			return (gb->gb_reg.STAT & STAT_USER_BITS) |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	f023 0307 	bic.w	r3, r3, #7
 80014c8:	b25a      	sxtb	r2, r3
			       (gb->gb_reg.LCDC & LCDC_ENABLE ? gb->lcd_mode : LCD_VBLANK);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80014d0:	b25b      	sxtb	r3, r3
			return (gb->gb_reg.STAT & STAT_USER_BITS) |
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	da06      	bge.n	80014e4 <__gb_read+0x3f0>
			       (gb->gb_reg.LCDC & LCDC_ENABLE ? gb->lcd_mode : LCD_VBLANK);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7e1b      	ldrb	r3, [r3, #24]
 80014da:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80014de:	b2db      	uxtb	r3, r3
			return (gb->gb_reg.STAT & STAT_USER_BITS) |
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	e000      	b.n	80014e6 <__gb_read+0x3f2>
 80014e4:	2301      	movs	r3, #1
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	e035      	b.n	800155a <__gb_read+0x466>

		case 0x42:
			return gb->gb_reg.SCY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80014f4:	e031      	b.n	800155a <__gb_read+0x466>

		case 0x43:
			return gb->gb_reg.SCX;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80014fc:	e02d      	b.n	800155a <__gb_read+0x466>

		case 0x44:
			return gb->gb_reg.LY;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001504:	e029      	b.n	800155a <__gb_read+0x466>

		case 0x45:
			return gb->gb_reg.LYC;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800150c:	e025      	b.n	800155a <__gb_read+0x466>

		/* DMA Register */
		case 0x46:
			return gb->gb_reg.DMA;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001514:	e021      	b.n	800155a <__gb_read+0x466>

		/* DMG Palette Registers */
		case 0x47:
			return gb->gb_reg.BGP;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 800151c:	e01d      	b.n	800155a <__gb_read+0x466>

		case 0x48:
			return gb->gb_reg.OBP0;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001524:	e019      	b.n	800155a <__gb_read+0x466>

		case 0x49:
			return gb->gb_reg.OBP1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800152c:	e015      	b.n	800155a <__gb_read+0x466>

		/* Window Position Registers */
		case 0x4A:
			return gb->gb_reg.WY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001534:	e011      	b.n	800155a <__gb_read+0x466>

		case 0x4B:
			return gb->gb_reg.WX;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800153c:	e00d      	b.n	800155a <__gb_read+0x466>

		/* Interrupt Enable Register */
		case 0xFF:
			return gb->gb_reg.IE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001544:	e009      	b.n	800155a <__gb_read+0x466>

		/* Unused registers return 1 */
		default:
			return 0xFF;
 8001546:	23ff      	movs	r3, #255	; 0xff
 8001548:	e007      	b.n	800155a <__gb_read+0x466>
		}
	}

	(gb->gb_error)(gb, GB_INVALID_READ, addr);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	b292      	uxth	r2, r2
 8001552:	2102      	movs	r1, #2
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	4798      	blx	r3
	return 0xFF;
 8001558:	23ff      	movs	r3, #255	; 0xff
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	0800bba4 	.word	0x0800bba4

08001568 <__gb_write>:

/**
 * Internal function used to write bytes.
 */
void __gb_write(struct gb_s *gb, const uint_fast16_t addr, const uint8_t val)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	4613      	mov	r3, r2
 8001574:	71fb      	strb	r3, [r7, #7]
	switch(addr >> 12)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	0b1b      	lsrs	r3, r3, #12
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f200 840b 	bhi.w	8001d96 <__gb_write+0x82e>
 8001580:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <__gb_write+0x20>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	080015c9 	.word	0x080015c9
 800158c:	080015c9 	.word	0x080015c9
 8001590:	0800160b 	.word	0x0800160b
 8001594:	0800163f 	.word	0x0800163f
 8001598:	0800171d 	.word	0x0800171d
 800159c:	0800171d 	.word	0x0800171d
 80015a0:	08001793 	.word	0x08001793
 80015a4:	08001793 	.word	0x08001793
 80015a8:	080017a3 	.word	0x080017a3
 80015ac:	080017a3 	.word	0x080017a3
 80015b0:	080017b9 	.word	0x080017b9
 80015b4:	080017b9 	.word	0x080017b9
 80015b8:	0800184d 	.word	0x0800184d
 80015bc:	0800185f 	.word	0x0800185f
 80015c0:	08001871 	.word	0x08001871
 80015c4:	08001883 	.word	0x08001883
	{
	case 0x0:
	case 0x1:
		if(gb->mbc == 2 && addr & 0x10)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	7f1b      	ldrb	r3, [r3, #28]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d105      	bne.n	80015dc <__gb_write+0x74>
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 83e5 	bne.w	8001da6 <__gb_write+0x83e>
			return;
		else if(gb->mbc > 0 && gb->cart_ram)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	7f1b      	ldrb	r3, [r3, #28]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 83e2 	beq.w	8001daa <__gb_write+0x842>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	7f5b      	ldrb	r3, [r3, #29]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 83dd 	beq.w	8001daa <__gb_write+0x842>
			gb->enable_cart_ram = ((val & 0x0F) == 0x0A);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	bf0c      	ite	eq
 80015fa:	2301      	moveq	r3, #1
 80015fc:	2300      	movne	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		return;
 8001608:	e3cf      	b.n	8001daa <__gb_write+0x842>

	case 0x2:
		if(gb->mbc == 5)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	7f1b      	ldrb	r3, [r3, #28]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d115      	bne.n	800163e <__gb_write+0xd6>
		{
			gb->selected_rom_bank = (gb->selected_rom_bank & 0x100) | val;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001616:	b21b      	sxth	r3, r3
 8001618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161c:	b21a      	sxth	r2, r3
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	b21b      	sxth	r3, r3
 8001622:	4313      	orrs	r3, r2
 8001624:	b21b      	sxth	r3, r3
 8001626:	b29a      	uxth	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	845a      	strh	r2, [r3, #34]	; 0x22
			gb->selected_rom_bank =
				gb->selected_rom_bank & gb->num_rom_banks_mask;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8bdb      	ldrh	r3, [r3, #30]
			gb->selected_rom_bank =
 8001634:	4013      	ands	r3, r2
 8001636:	b29a      	uxth	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	845a      	strh	r2, [r3, #34]	; 0x22
			return;
 800163c:	e3be      	b.n	8001dbc <__gb_write+0x854>
		}

	/* Intentional fall through. */

	case 0x3:
		if(gb->mbc == 1)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	7f1b      	ldrb	r3, [r3, #28]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d11c      	bne.n	8001680 <__gb_write+0x118>
		{
			//selected_rom_bank = val & 0x7;
			gb->selected_rom_bank = (val & 0x1F) | (gb->selected_rom_bank & 0x60);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	b21b      	sxth	r3, r3
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	b21a      	sxth	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001654:	b21b      	sxth	r3, r3
 8001656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21b      	sxth	r3, r3
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	845a      	strh	r2, [r3, #34]	; 0x22

			if((gb->selected_rom_bank & 0x1F) == 0x00)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	2b00      	cmp	r3, #0
 8001670:	d14b      	bne.n	800170a <__gb_write+0x1a2>
				gb->selected_rom_bank++;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001676:	3301      	adds	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	845a      	strh	r2, [r3, #34]	; 0x22
 800167e:	e044      	b.n	800170a <__gb_write+0x1a2>
		}
		else if(gb->mbc == 2 && addr & 0x10)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	7f1b      	ldrb	r3, [r3, #28]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d116      	bne.n	80016b6 <__gb_write+0x14e>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d011      	beq.n	80016b6 <__gb_write+0x14e>
		{
			gb->selected_rom_bank = val & 0x0F;
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	b29b      	uxth	r3, r3
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	845a      	strh	r2, [r3, #34]	; 0x22

			if(!gb->selected_rom_bank)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d130      	bne.n	800170a <__gb_write+0x1a2>
				gb->selected_rom_bank++;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80016ac:	3301      	adds	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	845a      	strh	r2, [r3, #34]	; 0x22
			if(!gb->selected_rom_bank)
 80016b4:	e029      	b.n	800170a <__gb_write+0x1a2>
		}
		else if(gb->mbc == 3)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	7f1b      	ldrb	r3, [r3, #28]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d111      	bne.n	80016e2 <__gb_write+0x17a>
		{
			gb->selected_rom_bank = val & 0x7F;
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	845a      	strh	r2, [r3, #34]	; 0x22

			if(!gb->selected_rom_bank)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11a      	bne.n	800170a <__gb_write+0x1a2>
				gb->selected_rom_bank++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80016d8:	3301      	adds	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	845a      	strh	r2, [r3, #34]	; 0x22
 80016e0:	e013      	b.n	800170a <__gb_write+0x1a2>
		}
		else if(gb->mbc == 5)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	7f1b      	ldrb	r3, [r3, #28]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d10f      	bne.n	800170a <__gb_write+0x1a2>
			gb->selected_rom_bank = (val & 0x01) << 8 | (gb->selected_rom_bank & 0xFF);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21b      	sxth	r3, r3
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	845a      	strh	r2, [r3, #34]	; 0x22

		gb->selected_rom_bank = gb->selected_rom_bank & gb->num_rom_banks_mask;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8bdb      	ldrh	r3, [r3, #30]
 8001712:	4013      	ands	r3, r2
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	845a      	strh	r2, [r3, #34]	; 0x22
		return;
 800171a:	e34f      	b.n	8001dbc <__gb_write+0x854>

	case 0x4:
	case 0x5:
		if(gb->mbc == 1)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	7f1b      	ldrb	r3, [r3, #28]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d120      	bne.n	8001766 <__gb_write+0x1fe>
		{
			gb->cart_ram_bank = (val & 3);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	b2da      	uxtb	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			gb->selected_rom_bank = ((val & 3) << 5) | (gb->selected_rom_bank & 0x1F);
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	015b      	lsls	r3, r3, #5
 8001736:	b21b      	sxth	r3, r3
 8001738:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800173c:	b21a      	sxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001742:	b21b      	sxth	r3, r3
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	b21b      	sxth	r3, r3
 800174a:	4313      	orrs	r3, r2
 800174c:	b21b      	sxth	r3, r3
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	845a      	strh	r2, [r3, #34]	; 0x22
			gb->selected_rom_bank = gb->selected_rom_bank & gb->num_rom_banks_mask;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8bdb      	ldrh	r3, [r3, #30]
 800175c:	4013      	ands	r3, r2
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	845a      	strh	r2, [r3, #34]	; 0x22
		else if(gb->mbc == 3)
			gb->cart_ram_bank = val;
		else if(gb->mbc == 5)
			gb->cart_ram_bank = (val & 0x0F);

		return;
 8001764:	e323      	b.n	8001dae <__gb_write+0x846>
		else if(gb->mbc == 3)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	7f1b      	ldrb	r3, [r3, #28]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d104      	bne.n	8001778 <__gb_write+0x210>
			gb->cart_ram_bank = val;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return;
 8001776:	e31a      	b.n	8001dae <__gb_write+0x846>
		else if(gb->mbc == 5)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	7f1b      	ldrb	r3, [r3, #28]
 800177c:	2b05      	cmp	r3, #5
 800177e:	f040 8316 	bne.w	8001dae <__gb_write+0x846>
			gb->cart_ram_bank = (val & 0x0F);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 030f 	and.w	r3, r3, #15
 8001788:	b2da      	uxtb	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return;
 8001790:	e30d      	b.n	8001dae <__gb_write+0x846>

	case 0x6:
	case 0x7:
		gb->cart_mode_select = (val & 1);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		return;
 80017a0:	e30c      	b.n	8001dbc <__gb_write+0x854>

	case 0x8:
	case 0x9:
		gb->vram[addr - VRAM_ADDR] = val;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80017b0:	332c      	adds	r3, #44	; 0x2c
 80017b2:	79fa      	ldrb	r2, [r7, #7]
 80017b4:	701a      	strb	r2, [r3, #0]
		return;
 80017b6:	e301      	b.n	8001dbc <__gb_write+0x854>

	case 0xA:
	case 0xB:
		if(gb->cart_ram && gb->enable_cart_ram)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	7f5b      	ldrb	r3, [r3, #29]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 82f8 	beq.w	8001db2 <__gb_write+0x84a>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 82f2 	beq.w	8001db2 <__gb_write+0x84a>
		{
			if(gb->mbc == 3 && gb->cart_ram_bank >= 0x08)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	7f1b      	ldrb	r3, [r3, #28]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d10e      	bne.n	80017f4 <__gb_write+0x28c>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017dc:	2b07      	cmp	r3, #7
 80017de:	d909      	bls.n	80017f4 <__gb_write+0x28c>
				gb->cart_rtc[gb->cart_ram_bank - 0x08] = val;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e6:	3b08      	subs	r3, #8
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	79fa      	ldrb	r2, [r7, #7]
 80017ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 80017f2:	e02a      	b.n	800184a <__gb_write+0x2e2>
			else if(gb->cart_mode_select &&
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d016      	beq.n	800182c <__gb_write+0x2c4>
					gb->cart_ram_bank < gb->num_ram_banks)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 3020 	ldrb.w	r3, [r3, #32]
			else if(gb->cart_mode_select &&
 800180a:	429a      	cmp	r2, r3
 800180c:	d20e      	bcs.n	800182c <__gb_write+0x2c4>
			{
				gb->gb_cart_ram_write(gb,
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	689b      	ldr	r3, [r3, #8]
						      addr - CART_RAM_ADDR + (gb->cart_ram_bank * CRAM_BANK_SIZE), val);
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001818:	0352      	lsls	r2, r2, #13
 800181a:	4611      	mov	r1, r2
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	440a      	add	r2, r1
				gb->gb_cart_ram_write(gb,
 8001820:	f5a2 4120 	sub.w	r1, r2, #40960	; 0xa000
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	4798      	blx	r3
 800182a:	e00e      	b.n	800184a <__gb_write+0x2e2>
			}
			else if(gb->num_ram_banks)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 82bd 	beq.w	8001db2 <__gb_write+0x84a>
				gb->gb_cart_ram_write(gb, addr - CART_RAM_ADDR, val);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	f5a2 4120 	sub.w	r1, r2, #40960	; 0xa000
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	4798      	blx	r3
		}

		return;
 8001848:	e2b3      	b.n	8001db2 <__gb_write+0x84a>
 800184a:	e2b2      	b.n	8001db2 <__gb_write+0x84a>

	case 0xC:
		gb->wram[addr - WRAM_0_ADDR] = val;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4413      	add	r3, r2
 8001856:	79fa      	ldrb	r2, [r7, #7]
 8001858:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		return;
 800185c:	e2ae      	b.n	8001dbc <__gb_write+0x854>

	case 0xD:
		gb->wram[addr - WRAM_1_ADDR + WRAM_BANK_SIZE] = val;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f5a3 4340 	sub.w	r3, r3, #49152	; 0xc000
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	79fa      	ldrb	r2, [r7, #7]
 800186a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		return;
 800186e:	e2a5      	b.n	8001dbc <__gb_write+0x854>

	case 0xE:
		gb->wram[addr - ECHO_ADDR] = val;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f5a3 4360 	sub.w	r3, r3, #57344	; 0xe000
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		return;
 8001880:	e29c      	b.n	8001dbc <__gb_write+0x854>

	case 0xF:
		if(addr < OAM_ADDR)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f5b3 4f7e 	cmp.w	r3, #65024	; 0xfe00
 8001888:	d208      	bcs.n	800189c <__gb_write+0x334>
		{
			gb->wram[addr - ECHO_ADDR] = val;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f5a3 4360 	sub.w	r3, r3, #57344	; 0xe000
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	79fa      	ldrb	r2, [r7, #7]
 8001896:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			return;
 800189a:	e28f      	b.n	8001dbc <__gb_write+0x854>
		}

		if(addr < UNUSED_ADDR)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f64f 629f 	movw	r2, #65183	; 0xfe9f
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d80a      	bhi.n	80018bc <__gb_write+0x354>
		{
			gb->oam[addr - OAM_ADDR] = val;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f5a3 437e 	sub.w	r3, r3, #65024	; 0xfe00
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80018b4:	336c      	adds	r3, #108	; 0x6c
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	701a      	strb	r2, [r3, #0]
			return;
 80018ba:	e27f      	b.n	8001dbc <__gb_write+0x854>
		}

		/* Unusable memory area. */
		if(addr < IO_ADDR)
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80018c2:	f0c0 8278 	bcc.w	8001db6 <__gb_write+0x84e>
			return;

		if(HRAM_ADDR <= addr && addr < INTR_EN_ADDR)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f64f 727f 	movw	r2, #65407	; 0xff7f
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d90f      	bls.n	80018f0 <__gb_write+0x388>
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d80a      	bhi.n	80018f0 <__gb_write+0x388>
		{
			gb->hram[addr - IO_ADDR] = val;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80018e8:	336c      	adds	r3, #108	; 0x6c
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	701a      	strb	r2, [r3, #0]
			return;
 80018ee:	e265      	b.n	8001dbc <__gb_write+0x854>
		}

		if((addr >= 0xFF10) && (addr <= 0xFF3F))
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d90f      	bls.n	800191a <__gb_write+0x3b2>
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f64f 723f 	movw	r2, #65343	; 0xff3f
 8001900:	4293      	cmp	r3, r2
 8001902:	d80a      	bhi.n	800191a <__gb_write+0x3b2>
		{
#if ENABLE_SOUND
			audio_write(addr, val);
#else
			gb->hram[addr - IO_ADDR] = val;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4413      	add	r3, r2
 800190e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001912:	336c      	adds	r3, #108	; 0x6c
 8001914:	79fa      	ldrb	r2, [r7, #7]
 8001916:	701a      	strb	r2, [r3, #0]
#endif
			return;
 8001918:	e250      	b.n	8001dbc <__gb_write+0x854>
		}

		/* IO and Interrupts. */
		switch(addr & 0xFF)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b50      	cmp	r3, #80	; 0x50
 8001920:	f200 80a8 	bhi.w	8001a74 <__gb_write+0x50c>
 8001924:	2b50      	cmp	r3, #80	; 0x50
 8001926:	f200 8236 	bhi.w	8001d96 <__gb_write+0x82e>
 800192a:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <__gb_write+0x3c8>)
 800192c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001930:	08001a7d 	.word	0x08001a7d
 8001934:	08001adb 	.word	0x08001adb
 8001938:	08001ae5 	.word	0x08001ae5
 800193c:	08001d97 	.word	0x08001d97
 8001940:	08001aef 	.word	0x08001aef
 8001944:	08001af9 	.word	0x08001af9
 8001948:	08001b03 	.word	0x08001b03
 800194c:	08001b0d 	.word	0x08001b0d
 8001950:	08001d97 	.word	0x08001d97
 8001954:	08001d97 	.word	0x08001d97
 8001958:	08001d97 	.word	0x08001d97
 800195c:	08001d97 	.word	0x08001d97
 8001960:	08001d97 	.word	0x08001d97
 8001964:	08001d97 	.word	0x08001d97
 8001968:	08001d97 	.word	0x08001d97
 800196c:	08001b17 	.word	0x08001b17
 8001970:	08001d97 	.word	0x08001d97
 8001974:	08001d97 	.word	0x08001d97
 8001978:	08001d97 	.word	0x08001d97
 800197c:	08001d97 	.word	0x08001d97
 8001980:	08001d97 	.word	0x08001d97
 8001984:	08001d97 	.word	0x08001d97
 8001988:	08001d97 	.word	0x08001d97
 800198c:	08001d97 	.word	0x08001d97
 8001990:	08001d97 	.word	0x08001d97
 8001994:	08001d97 	.word	0x08001d97
 8001998:	08001d97 	.word	0x08001d97
 800199c:	08001d97 	.word	0x08001d97
 80019a0:	08001d97 	.word	0x08001d97
 80019a4:	08001d97 	.word	0x08001d97
 80019a8:	08001d97 	.word	0x08001d97
 80019ac:	08001d97 	.word	0x08001d97
 80019b0:	08001d97 	.word	0x08001d97
 80019b4:	08001d97 	.word	0x08001d97
 80019b8:	08001d97 	.word	0x08001d97
 80019bc:	08001d97 	.word	0x08001d97
 80019c0:	08001d97 	.word	0x08001d97
 80019c4:	08001d97 	.word	0x08001d97
 80019c8:	08001d97 	.word	0x08001d97
 80019cc:	08001d97 	.word	0x08001d97
 80019d0:	08001d97 	.word	0x08001d97
 80019d4:	08001d97 	.word	0x08001d97
 80019d8:	08001d97 	.word	0x08001d97
 80019dc:	08001d97 	.word	0x08001d97
 80019e0:	08001d97 	.word	0x08001d97
 80019e4:	08001d97 	.word	0x08001d97
 80019e8:	08001d97 	.word	0x08001d97
 80019ec:	08001d97 	.word	0x08001d97
 80019f0:	08001d97 	.word	0x08001d97
 80019f4:	08001d97 	.word	0x08001d97
 80019f8:	08001d97 	.word	0x08001d97
 80019fc:	08001d97 	.word	0x08001d97
 8001a00:	08001d97 	.word	0x08001d97
 8001a04:	08001d97 	.word	0x08001d97
 8001a08:	08001d97 	.word	0x08001d97
 8001a0c:	08001d97 	.word	0x08001d97
 8001a10:	08001d97 	.word	0x08001d97
 8001a14:	08001d97 	.word	0x08001d97
 8001a18:	08001d97 	.word	0x08001d97
 8001a1c:	08001d97 	.word	0x08001d97
 8001a20:	08001d97 	.word	0x08001d97
 8001a24:	08001d97 	.word	0x08001d97
 8001a28:	08001d97 	.word	0x08001d97
 8001a2c:	08001d97 	.word	0x08001d97
 8001a30:	08001b27 	.word	0x08001b27
 8001a34:	08001baf 	.word	0x08001baf
 8001a38:	08001bbf 	.word	0x08001bbf
 8001a3c:	08001bc9 	.word	0x08001bc9
 8001a40:	08001d97 	.word	0x08001d97
 8001a44:	08001bd3 	.word	0x08001bd3
 8001a48:	08001bdd 	.word	0x08001bdd
 8001a4c:	08001c35 	.word	0x08001c35
 8001a50:	08001c9d 	.word	0x08001c9d
 8001a54:	08001d05 	.word	0x08001d05
 8001a58:	08001d6d 	.word	0x08001d6d
 8001a5c:	08001d77 	.word	0x08001d77
 8001a60:	08001d97 	.word	0x08001d97
 8001a64:	08001d97 	.word	0x08001d97
 8001a68:	08001d97 	.word	0x08001d97
 8001a6c:	08001d97 	.word	0x08001d97
 8001a70:	08001d81 	.word	0x08001d81
 8001a74:	2bff      	cmp	r3, #255	; 0xff
 8001a76:	f000 8189 	beq.w	8001d8c <__gb_write+0x824>
 8001a7a:	e18c      	b.n	8001d96 <__gb_write+0x82e>
		/* Joypad */
		case 0x00:
			/* Only bits 5 and 4 are R/W.
			 * The lower bits are overwritten later, and the two most
			 * significant bits are unused. */
			gb->gb_reg.P1 = val;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	79fa      	ldrb	r2, [r7, #7]
 8001a80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			/* Direction keys selected */
			if((gb->gb_reg.P1 & 0b010000) == 0)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10f      	bne.n	8001ab2 <__gb_write+0x54a>
				gb->gb_reg.P1 |= (gb->direct.joypad >> 4);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001a9e:	3324      	adds	r3, #36	; 0x24
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			/* Button keys selected */
			else
				gb->gb_reg.P1 |= (gb->direct.joypad & 0x0F);

			return;
 8001ab0:	e184      	b.n	8001dbc <__gb_write+0x854>
				gb->gb_reg.P1 |= (gb->direct.joypad & 0x0F);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ab8:	b25a      	sxtb	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001ac0:	3324      	adds	r3, #36	; 0x24
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	b25b      	sxtb	r3, r3
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			return;
 8001ad8:	e170      	b.n	8001dbc <__gb_write+0x854>

		/* Serial */
		case 0x01:
			gb->gb_reg.SB = val;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			return;
 8001ae2:	e16b      	b.n	8001dbc <__gb_write+0x854>

		case 0x02:
			gb->gb_reg.SC = val;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	79fa      	ldrb	r2, [r7, #7]
 8001ae8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			return;
 8001aec:	e166      	b.n	8001dbc <__gb_write+0x854>

		/* Timer Registers */
		case 0x04:
			gb->gb_reg.DIV = 0x00;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			return;
 8001af6:	e161      	b.n	8001dbc <__gb_write+0x854>

		case 0x05:
			gb->gb_reg.TIMA = val;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	79fa      	ldrb	r2, [r7, #7]
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			return;
 8001b00:	e15c      	b.n	8001dbc <__gb_write+0x854>

		case 0x06:
			gb->gb_reg.TMA = val;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	79fa      	ldrb	r2, [r7, #7]
 8001b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			return;
 8001b0a:	e157      	b.n	8001dbc <__gb_write+0x854>

		case 0x07:
			gb->gb_reg.TAC = val;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	79fa      	ldrb	r2, [r7, #7]
 8001b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			return;
 8001b14:	e152      	b.n	8001dbc <__gb_write+0x854>

		/* Interrupt Flag Register */
		case 0x0F:
			gb->gb_reg.IF = (val | 0b11100000);
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f063 031f 	orn	r3, r3, #31
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			return;
 8001b24:	e14a      	b.n	8001dbc <__gb_write+0x854>

		/* LCD Registers */
		case 0x40:
			if(((gb->gb_reg.LCDC & LCDC_ENABLE) == 0) &&
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b2c:	b25b      	sxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	db0b      	blt.n	8001b4a <__gb_write+0x5e2>
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da07      	bge.n	8001b4a <__gb_write+0x5e2>
				(val & LCDC_ENABLE))
			{
				gb->counter.lcd_count = 0;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	65da      	str	r2, [r3, #92]	; 0x5c
				gb->lcd_blank = 1;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	7e13      	ldrb	r3, [r2, #24]
 8001b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b48:	7613      	strb	r3, [r2, #24]
			}

			gb->gb_reg.LCDC = val;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	79fa      	ldrb	r2, [r7, #7]
 8001b4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

			/* LY fixed to 0 when LCD turned off. */
			if((gb->gb_reg.LCDC & LCDC_ENABLE) == 0)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b58:	b25b      	sxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f2c0 812d 	blt.w	8001dba <__gb_write+0x852>
			{
				/* Do not turn off LCD outside of VBLANK. This may
				 * happen due to poor timing in this emulator. */
				if(gb->lcd_mode != LCD_VBLANK)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	7e1b      	ldrb	r3, [r3, #24]
 8001b64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d009      	beq.n	8001b82 <__gb_write+0x61a>
				{
					gb->gb_reg.LCDC |= LCDC_ENABLE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
					return;
 8001b80:	e11c      	b.n	8001dbc <__gb_write+0x854>
				}

				gb->gb_reg.STAT = (gb->gb_reg.STAT & ~0x03) | LCD_VBLANK;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	f023 0303 	bic.w	r3, r3, #3
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	b25b      	sxtb	r3, r3
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
				gb->gb_reg.LY = 0;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				gb->counter.lcd_count = 0;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	65da      	str	r2, [r3, #92]	; 0x5c
			}

			return;
 8001bac:	e105      	b.n	8001dba <__gb_write+0x852>

		case 0x41:
			gb->gb_reg.STAT = (val & 0b01111000);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
			return;
 8001bbc:	e0fe      	b.n	8001dbc <__gb_write+0x854>

		case 0x42:
			gb->gb_reg.SCY = val;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
			return;
 8001bc6:	e0f9      	b.n	8001dbc <__gb_write+0x854>

		case 0x43:
			gb->gb_reg.SCX = val;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
			return;
 8001bd0:	e0f4      	b.n	8001dbc <__gb_write+0x854>

		/* LY (0xFF44) is read only. */
		case 0x45:
			gb->gb_reg.LYC = val;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			return;
 8001bda:	e0ef      	b.n	8001dbc <__gb_write+0x854>

		/* DMA Register */
		case 0x46:
			gb->gb_reg.DMA = (val % 0xF1);
 8001bdc:	79f9      	ldrb	r1, [r7, #7]
 8001bde:	4b79      	ldr	r3, [pc, #484]	; (8001dc4 <__gb_write+0x85c>)
 8001be0:	fba3 2301 	umull	r2, r3, r3, r1
 8001be4:	091a      	lsrs	r2, r3, #4
 8001be6:	4613      	mov	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	1acb      	subs	r3, r1, r3
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

			for(uint8_t i = 0; i < OAM_SIZE; i++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
 8001bfe:	e015      	b.n	8001c2c <__gb_write+0x6c4>
				gb->oam[i] = __gb_read(gb, (gb->gb_reg.DMA << 8) + i);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001c06:	021a      	lsls	r2, r3, #8
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	7dfc      	ldrb	r4, [r7, #23]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff fa6f 	bl	80010f4 <__gb_read>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4423      	add	r3, r4
 8001c1e:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001c22:	336c      	adds	r3, #108	; 0x6c
 8001c24:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < OAM_SIZE; i++)
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	75fb      	strb	r3, [r7, #23]
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b9f      	cmp	r3, #159	; 0x9f
 8001c30:	d9e6      	bls.n	8001c00 <__gb_write+0x698>

			return;
 8001c32:	e0c3      	b.n	8001dbc <__gb_write+0x854>

		/* DMG Palette Registers */
		case 0x47:
			gb->gb_reg.BGP = val;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			gb->display.bg_palette[0] = (gb->gb_reg.BGP & 0x03);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001c4e:	3310      	adds	r3, #16
 8001c50:	701a      	strb	r2, [r3, #0]
			gb->display.bg_palette[1] = (gb->gb_reg.BGP >> 2) & 0x03;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001c68:	3311      	adds	r3, #17
 8001c6a:	701a      	strb	r2, [r3, #0]
			gb->display.bg_palette[2] = (gb->gb_reg.BGP >> 4) & 0x03;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001c82:	3312      	adds	r3, #18
 8001c84:	701a      	strb	r2, [r3, #0]
			gb->display.bg_palette[3] = (gb->gb_reg.BGP >> 6) & 0x03;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001c96:	3313      	adds	r3, #19
 8001c98:	701a      	strb	r2, [r3, #0]
			return;
 8001c9a:	e08f      	b.n	8001dbc <__gb_write+0x854>

		case 0x48:
			gb->gb_reg.OBP0 = val;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	79fa      	ldrb	r2, [r7, #7]
 8001ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			gb->display.sp_palette[0] = (gb->gb_reg.OBP0 & 0x03);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	701a      	strb	r2, [r3, #0]
			gb->display.sp_palette[1] = (gb->gb_reg.OBP0 >> 2) & 0x03;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001cd0:	3315      	adds	r3, #21
 8001cd2:	701a      	strb	r2, [r3, #0]
			gb->display.sp_palette[2] = (gb->gb_reg.OBP0 >> 4) & 0x03;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001cea:	3316      	adds	r3, #22
 8001cec:	701a      	strb	r2, [r3, #0]
			gb->display.sp_palette[3] = (gb->gb_reg.OBP0 >> 6) & 0x03;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001cfe:	3317      	adds	r3, #23
 8001d00:	701a      	strb	r2, [r3, #0]
			return;
 8001d02:	e05b      	b.n	8001dbc <__gb_write+0x854>

		case 0x49:
			gb->gb_reg.OBP1 = val;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	79fa      	ldrb	r2, [r7, #7]
 8001d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			gb->display.sp_palette[4] = (gb->gb_reg.OBP1 & 0x03);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001d1e:	3318      	adds	r3, #24
 8001d20:	701a      	strb	r2, [r3, #0]
			gb->display.sp_palette[5] = (gb->gb_reg.OBP1 >> 2) & 0x03;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d28:	089b      	lsrs	r3, r3, #2
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001d38:	3319      	adds	r3, #25
 8001d3a:	701a      	strb	r2, [r3, #0]
			gb->display.sp_palette[6] = (gb->gb_reg.OBP1 >> 4) & 0x03;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001d52:	331a      	adds	r3, #26
 8001d54:	701a      	strb	r2, [r3, #0]
			gb->display.sp_palette[7] = (gb->gb_reg.OBP1 >> 6) & 0x03;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8001d66:	331b      	adds	r3, #27
 8001d68:	701a      	strb	r2, [r3, #0]
			return;
 8001d6a:	e027      	b.n	8001dbc <__gb_write+0x854>

		/* Window Position Registers */
		case 0x4A:
			gb->gb_reg.WY = val;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	79fa      	ldrb	r2, [r7, #7]
 8001d70:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			return;
 8001d74:	e022      	b.n	8001dbc <__gb_write+0x854>

		case 0x4B:
			gb->gb_reg.WX = val;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	79fa      	ldrb	r2, [r7, #7]
 8001d7a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
			return;
 8001d7e:	e01d      	b.n	8001dbc <__gb_write+0x854>

		/* Turn off boot ROM */
		case 0x50:
			gb->gb_bios_enable = 0;
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	7e13      	ldrb	r3, [r2, #24]
 8001d84:	f36f 0382 	bfc	r3, #2, #1
 8001d88:	7613      	strb	r3, [r2, #24]
			return;
 8001d8a:	e017      	b.n	8001dbc <__gb_write+0x854>

		/* Interrupt Enable Register */
		case 0xFF:
			gb->gb_reg.IE = val;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	79fa      	ldrb	r2, [r7, #7]
 8001d90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			return;
 8001d94:	e012      	b.n	8001dbc <__gb_write+0x854>
		}
	}

	(gb->gb_error)(gb, GB_INVALID_WRITE, addr);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	b292      	uxth	r2, r2
 8001d9e:	2103      	movs	r1, #3
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	4798      	blx	r3
 8001da4:	e00a      	b.n	8001dbc <__gb_write+0x854>
			return;
 8001da6:	bf00      	nop
 8001da8:	e008      	b.n	8001dbc <__gb_write+0x854>
		return;
 8001daa:	bf00      	nop
 8001dac:	e006      	b.n	8001dbc <__gb_write+0x854>
		return;
 8001dae:	bf00      	nop
 8001db0:	e004      	b.n	8001dbc <__gb_write+0x854>
		return;
 8001db2:	bf00      	nop
 8001db4:	e002      	b.n	8001dbc <__gb_write+0x854>
			return;
 8001db6:	bf00      	nop
 8001db8:	e000      	b.n	8001dbc <__gb_write+0x854>
			return;
 8001dba:	bf00      	nop
}
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	10fef011 	.word	0x10fef011

08001dc8 <__gb_execute_cb>:

uint8_t __gb_execute_cb(struct gb_s *gb)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	uint8_t inst_cycles;
	uint8_t cbop = __gb_read(gb, gb->cpu_reg.pc++);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	b291      	uxth	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	8791      	strh	r1, [r2, #60]	; 0x3c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff f988 	bl	80010f4 <__gb_read>
 8001de4:	4603      	mov	r3, r0
 8001de6:	753b      	strb	r3, [r7, #20]
	uint8_t r = (cbop & 0x7);
 8001de8:	7d3b      	ldrb	r3, [r7, #20]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	74fb      	strb	r3, [r7, #19]
	uint8_t b = (cbop >> 3) & 0x7;
 8001df0:	7d3b      	ldrb	r3, [r7, #20]
 8001df2:	08db      	lsrs	r3, r3, #3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	74bb      	strb	r3, [r7, #18]
	uint8_t d = (cbop >> 3) & 0x1;
 8001dfc:	7d3b      	ldrb	r3, [r7, #20]
 8001dfe:	08db      	lsrs	r3, r3, #3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	747b      	strb	r3, [r7, #17]
	uint8_t val;
	uint8_t writeback = 1;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	757b      	strb	r3, [r7, #21]

	inst_cycles = 8;
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	75fb      	strb	r3, [r7, #23]
	/* Add an additional 8 cycles to these sets of instructions. */
	switch(cbop & 0xC7)
 8001e10:	7d3b      	ldrb	r3, [r7, #20]
 8001e12:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
 8001e16:	2bc6      	cmp	r3, #198	; 0xc6
 8001e18:	d00a      	beq.n	8001e30 <__gb_execute_cb+0x68>
 8001e1a:	2bc6      	cmp	r3, #198	; 0xc6
 8001e1c:	dc10      	bgt.n	8001e40 <__gb_execute_cb+0x78>
 8001e1e:	2b86      	cmp	r3, #134	; 0x86
 8001e20:	d006      	beq.n	8001e30 <__gb_execute_cb+0x68>
 8001e22:	2b86      	cmp	r3, #134	; 0x86
 8001e24:	dc0c      	bgt.n	8001e40 <__gb_execute_cb+0x78>
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d002      	beq.n	8001e30 <__gb_execute_cb+0x68>
 8001e2a:	2b46      	cmp	r3, #70	; 0x46
 8001e2c:	d004      	beq.n	8001e38 <__gb_execute_cb+0x70>
 8001e2e:	e007      	b.n	8001e40 <__gb_execute_cb+0x78>
	{
	case 0x06:
	case 0x86:
    	case 0xC6:
		inst_cycles += 8;
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	3308      	adds	r3, #8
 8001e34:	75fb      	strb	r3, [r7, #23]
    	break;
 8001e36:	e003      	b.n	8001e40 <__gb_execute_cb+0x78>
    	case 0x46:
		inst_cycles += 4;
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	75fb      	strb	r3, [r7, #23]
    	break;
 8001e3e:	bf00      	nop
	}

	switch(r)
 8001e40:	7cfb      	ldrb	r3, [r7, #19]
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d837      	bhi.n	8001eb6 <__gb_execute_cb+0xee>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <__gb_execute_cb+0x84>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e69 	.word	0x08001e69
 8001e50:	08001e73 	.word	0x08001e73
 8001e54:	08001e7d 	.word	0x08001e7d
 8001e58:	08001e87 	.word	0x08001e87
 8001e5c:	08001e91 	.word	0x08001e91
 8001e60:	08001e9b 	.word	0x08001e9b
 8001e64:	08001ea5 	.word	0x08001ea5
	{
	case 0:
		val = gb->cpu_reg.b;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e6e:	75bb      	strb	r3, [r7, #22]
		break;
 8001e70:	e026      	b.n	8001ec0 <__gb_execute_cb+0xf8>

	case 1:
		val = gb->cpu_reg.c;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e78:	75bb      	strb	r3, [r7, #22]
		break;
 8001e7a:	e021      	b.n	8001ec0 <__gb_execute_cb+0xf8>

	case 2:
		val = gb->cpu_reg.d;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001e82:	75bb      	strb	r3, [r7, #22]
		break;
 8001e84:	e01c      	b.n	8001ec0 <__gb_execute_cb+0xf8>

	case 3:
		val = gb->cpu_reg.e;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001e8c:	75bb      	strb	r3, [r7, #22]
		break;
 8001e8e:	e017      	b.n	8001ec0 <__gb_execute_cb+0xf8>

	case 4:
		val = gb->cpu_reg.h;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e96:	75bb      	strb	r3, [r7, #22]
		break;
 8001e98:	e012      	b.n	8001ec0 <__gb_execute_cb+0xf8>

	case 5:
		val = gb->cpu_reg.l;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ea0:	75bb      	strb	r3, [r7, #22]
		break;
 8001ea2:	e00d      	b.n	8001ec0 <__gb_execute_cb+0xf8>

	case 6:
		val = __gb_read(gb, gb->cpu_reg.hl);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff f922 	bl	80010f4 <__gb_read>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	75bb      	strb	r3, [r7, #22]
		break;
 8001eb4:	e004      	b.n	8001ec0 <__gb_execute_cb+0xf8>

	/* Only values 0-7 are possible here, so we make the final case
	 * default to satisfy -Wmaybe-uninitialized warning. */
	default:
		val = gb->cpu_reg.a;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ebc:	75bb      	strb	r3, [r7, #22]
		break;
 8001ebe:	bf00      	nop
	}

	/* TODO: Find out WTF this is doing. */
	switch(cbop >> 6)
 8001ec0:	7d3b      	ldrb	r3, [r7, #20]
 8001ec2:	099b      	lsrs	r3, r3, #6
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	f200 81aa 	bhi.w	8002220 <__gb_execute_cb+0x458>
 8001ecc:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <__gb_execute_cb+0x10c>)
 8001ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed2:	bf00      	nop
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	0800219b 	.word	0x0800219b
 8001edc:	080021e1 	.word	0x080021e1
 8001ee0:	08002209 	.word	0x08002209
	{
	case 0x0:
		cbop = (cbop >> 4) & 0x3;
 8001ee4:	7d3b      	ldrb	r3, [r7, #20]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	753b      	strb	r3, [r7, #20]

		switch(cbop)
 8001ef0:	7d3b      	ldrb	r3, [r7, #20]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	f000 80f3 	beq.w	80020de <__gb_execute_cb+0x316>
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	f300 8190 	bgt.w	800221e <__gb_execute_cb+0x456>
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	dc02      	bgt.n	8001f08 <__gb_execute_cb+0x140>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da04      	bge.n	8001f10 <__gb_execute_cb+0x148>
			}

			break;
		}

		break;
 8001f06:	e18a      	b.n	800221e <__gb_execute_cb+0x456>
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	f000 8086 	beq.w	800201a <__gb_execute_cb+0x252>
 8001f0e:	e186      	b.n	800221e <__gb_execute_cb+0x456>
			if(d) /* RRC R / RR R */
 8001f10:	7c7b      	ldrb	r3, [r7, #17]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03f      	beq.n	8001f96 <__gb_execute_cb+0x1ce>
				uint8_t temp = val;
 8001f16:	7dbb      	ldrb	r3, [r7, #22]
 8001f18:	73bb      	strb	r3, [r7, #14]
				val = (val >> 1);
 8001f1a:	7dbb      	ldrb	r3, [r7, #22]
 8001f1c:	085b      	lsrs	r3, r3, #1
 8001f1e:	75bb      	strb	r3, [r7, #22]
				val |= cbop ? (gb->cpu_reg.f_bits.c << 7) : (temp << 7);
 8001f20:	7d3b      	ldrb	r3, [r7, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <__gb_execute_cb+0x170>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f2c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	01db      	lsls	r3, r3, #7
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	e002      	b.n	8001f3e <__gb_execute_cb+0x176>
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	01db      	lsls	r3, r3, #7
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	b25b      	sxtb	r3, r3
 8001f46:	75bb      	strb	r3, [r7, #22]
				gb->cpu_reg.f_bits.z = (val == 0x00);
 8001f48:	7dbb      	ldrb	r3, [r7, #22]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf0c      	ite	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	2300      	movne	r3, #0
 8001f52:	b2d9      	uxtb	r1, r3
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001f5a:	f361 13c7 	bfi	r3, r1, #7, #1
 8001f5e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.n = 0;
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001f68:	f36f 1386 	bfc	r3, #6, #1
 8001f6c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.h = 0;
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001f76:	f36f 1345 	bfc	r3, #5, #1
 8001f7a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.c = (temp & 0x01);
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	b2d9      	uxtb	r1, r3
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001f8c:	f361 1304 	bfi	r3, r1, #4, #1
 8001f90:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
			break;
 8001f94:	e100      	b.n	8002198 <__gb_execute_cb+0x3d0>
				uint8_t temp = val;
 8001f96:	7dbb      	ldrb	r3, [r7, #22]
 8001f98:	73fb      	strb	r3, [r7, #15]
				val = (val << 1);
 8001f9a:	7dbb      	ldrb	r3, [r7, #22]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	75bb      	strb	r3, [r7, #22]
				val |= cbop ? gb->cpu_reg.f_bits.c : (temp >> 7);
 8001fa0:	7d3b      	ldrb	r3, [r7, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <__gb_execute_cb+0x1ee>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001fac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	b25b      	sxtb	r3, r3
 8001fb4:	e003      	b.n	8001fbe <__gb_execute_cb+0x1f6>
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	09db      	lsrs	r3, r3, #7
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	b25b      	sxtb	r3, r3
 8001fbe:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	75bb      	strb	r3, [r7, #22]
				gb->cpu_reg.f_bits.z = (val == 0x00);
 8001fc8:	7dbb      	ldrb	r3, [r7, #22]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf0c      	ite	eq
 8001fce:	2301      	moveq	r3, #1
 8001fd0:	2300      	movne	r3, #0
 8001fd2:	b2d9      	uxtb	r1, r3
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001fda:	f361 13c7 	bfi	r3, r1, #7, #1
 8001fde:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.n = 0;
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001fe8:	f36f 1386 	bfc	r3, #6, #1
 8001fec:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.h = 0;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8001ff6:	f36f 1345 	bfc	r3, #5, #1
 8001ffa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.c = (temp >> 7);
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	09db      	lsrs	r3, r3, #7
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	b2d9      	uxtb	r1, r3
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8002010:	f361 1304 	bfi	r3, r1, #4, #1
 8002014:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
			break;
 8002018:	e0be      	b.n	8002198 <__gb_execute_cb+0x3d0>
			if(d) /* SRA R */
 800201a:	7c7b      	ldrb	r3, [r7, #17]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d032      	beq.n	8002086 <__gb_execute_cb+0x2be>
				gb->cpu_reg.f_bits.c = val & 0x01;
 8002020:	7dbb      	ldrb	r3, [r7, #22]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	b2d9      	uxtb	r1, r3
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800202e:	f361 1304 	bfi	r3, r1, #4, #1
 8002032:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				val = (val >> 1) | (val & 0x80);
 8002036:	7dbb      	ldrb	r3, [r7, #22]
 8002038:	085b      	lsrs	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	b25a      	sxtb	r2, r3
 800203e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002042:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002046:	b25b      	sxtb	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b25b      	sxtb	r3, r3
 800204c:	75bb      	strb	r3, [r7, #22]
				gb->cpu_reg.f_bits.z = (val == 0x00);
 800204e:	7dbb      	ldrb	r3, [r7, #22]
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2d9      	uxtb	r1, r3
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8002060:	f361 13c7 	bfi	r3, r1, #7, #1
 8002064:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.n = 0;
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800206e:	f36f 1386 	bfc	r3, #6, #1
 8002072:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.h = 0;
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800207c:	f36f 1345 	bfc	r3, #5, #1
 8002080:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
			break;
 8002084:	e088      	b.n	8002198 <__gb_execute_cb+0x3d0>
				gb->cpu_reg.f_bits.c = (val >> 7);
 8002086:	7dbb      	ldrb	r3, [r7, #22]
 8002088:	09db      	lsrs	r3, r3, #7
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	b2d9      	uxtb	r1, r3
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8002098:	f361 1304 	bfi	r3, r1, #4, #1
 800209c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				val = val << 1;
 80020a0:	7dbb      	ldrb	r3, [r7, #22]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	75bb      	strb	r3, [r7, #22]
				gb->cpu_reg.f_bits.z = (val == 0x00);
 80020a6:	7dbb      	ldrb	r3, [r7, #22]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2d9      	uxtb	r1, r3
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80020b8:	f361 13c7 	bfi	r3, r1, #7, #1
 80020bc:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.n = 0;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80020c6:	f36f 1386 	bfc	r3, #6, #1
 80020ca:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.h = 0;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80020d4:	f36f 1345 	bfc	r3, #5, #1
 80020d8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
			break;
 80020dc:	e05c      	b.n	8002198 <__gb_execute_cb+0x3d0>
			if(d) /* SRL R */
 80020de:	7c7b      	ldrb	r3, [r7, #17]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d029      	beq.n	8002138 <__gb_execute_cb+0x370>
				gb->cpu_reg.f_bits.c = val & 0x01;
 80020e4:	7dbb      	ldrb	r3, [r7, #22]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	b2d9      	uxtb	r1, r3
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80020f2:	f361 1304 	bfi	r3, r1, #4, #1
 80020f6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				val = val >> 1;
 80020fa:	7dbb      	ldrb	r3, [r7, #22]
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	75bb      	strb	r3, [r7, #22]
				gb->cpu_reg.f_bits.z = (val == 0x00);
 8002100:	7dbb      	ldrb	r3, [r7, #22]
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2d9      	uxtb	r1, r3
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8002112:	f361 13c7 	bfi	r3, r1, #7, #1
 8002116:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.n = 0;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8002120:	f36f 1386 	bfc	r3, #6, #1
 8002124:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.h = 0;
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800212e:	f36f 1345 	bfc	r3, #5, #1
 8002132:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
			break;
 8002136:	e02e      	b.n	8002196 <__gb_execute_cb+0x3ce>
				uint8_t temp = (val >> 4) & 0x0F;
 8002138:	7dbb      	ldrb	r3, [r7, #22]
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	743b      	strb	r3, [r7, #16]
				temp |= (val << 4) & 0xF0;
 800213e:	7dbb      	ldrb	r3, [r7, #22]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	b25a      	sxtb	r2, r3
 8002144:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	b25b      	sxtb	r3, r3
 800214c:	743b      	strb	r3, [r7, #16]
				val = temp;
 800214e:	7c3b      	ldrb	r3, [r7, #16]
 8002150:	75bb      	strb	r3, [r7, #22]
				gb->cpu_reg.f_bits.z = (val == 0x00);
 8002152:	7dbb      	ldrb	r3, [r7, #22]
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2d9      	uxtb	r1, r3
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8002164:	f361 13c7 	bfi	r3, r1, #7, #1
 8002168:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.n = 0;
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8002172:	f36f 1386 	bfc	r3, #6, #1
 8002176:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.h = 0;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8002180:	f36f 1345 	bfc	r3, #5, #1
 8002184:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				gb->cpu_reg.f_bits.c = 0;
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800218e:	f36f 1304 	bfc	r3, #4, #1
 8002192:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
			break;
 8002196:	bf00      	nop
		break;
 8002198:	e041      	b.n	800221e <__gb_execute_cb+0x456>

	case 0x1: /* BIT B, R */
		gb->cpu_reg.f_bits.z = !((val >> b) & 0x1);
 800219a:	7dba      	ldrb	r2, [r7, #22]
 800219c:	7cbb      	ldrb	r3, [r7, #18]
 800219e:	fa42 f303 	asr.w	r3, r2, r3
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	bf0c      	ite	eq
 80021aa:	2301      	moveq	r3, #1
 80021ac:	2300      	movne	r3, #0
 80021ae:	b2d9      	uxtb	r1, r3
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80021b6:	f361 13c7 	bfi	r3, r1, #7, #1
 80021ba:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80021c4:	f36f 1386 	bfc	r3, #6, #1
 80021c8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80021d2:	f043 0320 	orr.w	r3, r3, #32
 80021d6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		writeback = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	757b      	strb	r3, [r7, #21]
		break;
 80021de:	e01f      	b.n	8002220 <__gb_execute_cb+0x458>

	case 0x2: /* RES B, R */
		val &= (0xFE << b) | (0xFF >> (8 - b));
 80021e0:	7cbb      	ldrb	r3, [r7, #18]
 80021e2:	22fe      	movs	r2, #254	; 0xfe
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	b25a      	sxtb	r2, r3
 80021ea:	7cbb      	ldrb	r3, [r7, #18]
 80021ec:	f1c3 0308 	rsb	r3, r3, #8
 80021f0:	21ff      	movs	r1, #255	; 0xff
 80021f2:	fa41 f303 	asr.w	r3, r1, r3
 80021f6:	b25b      	sxtb	r3, r3
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b25a      	sxtb	r2, r3
 80021fc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002200:	4013      	ands	r3, r2
 8002202:	b25b      	sxtb	r3, r3
 8002204:	75bb      	strb	r3, [r7, #22]
		break;
 8002206:	e00b      	b.n	8002220 <__gb_execute_cb+0x458>

	case 0x3: /* SET B, R */
		val |= (0x1 << b);
 8002208:	7cbb      	ldrb	r3, [r7, #18]
 800220a:	2201      	movs	r2, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	b25a      	sxtb	r2, r3
 8002212:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002216:	4313      	orrs	r3, r2
 8002218:	b25b      	sxtb	r3, r3
 800221a:	75bb      	strb	r3, [r7, #22]
		break;
 800221c:	e000      	b.n	8002220 <__gb_execute_cb+0x458>
		break;
 800221e:	bf00      	nop
	}

	if(writeback)
 8002220:	7d7b      	ldrb	r3, [r7, #21]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d042      	beq.n	80022ac <__gb_execute_cb+0x4e4>
	{
		switch(r)
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	2b07      	cmp	r3, #7
 800222a:	d840      	bhi.n	80022ae <__gb_execute_cb+0x4e6>
 800222c:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <__gb_execute_cb+0x46c>)
 800222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002232:	bf00      	nop
 8002234:	08002255 	.word	0x08002255
 8002238:	0800225f 	.word	0x0800225f
 800223c:	08002269 	.word	0x08002269
 8002240:	08002273 	.word	0x08002273
 8002244:	0800227d 	.word	0x0800227d
 8002248:	08002287 	.word	0x08002287
 800224c:	08002291 	.word	0x08002291
 8002250:	080022a3 	.word	0x080022a3
		{
		case 0:
			gb->cpu_reg.b = val;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7dba      	ldrb	r2, [r7, #22]
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			break;
 800225c:	e027      	b.n	80022ae <__gb_execute_cb+0x4e6>

		case 1:
			gb->cpu_reg.c = val;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	7dba      	ldrb	r2, [r7, #22]
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			break;
 8002266:	e022      	b.n	80022ae <__gb_execute_cb+0x4e6>

		case 2:
			gb->cpu_reg.d = val;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7dba      	ldrb	r2, [r7, #22]
 800226c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			break;
 8002270:	e01d      	b.n	80022ae <__gb_execute_cb+0x4e6>

		case 3:
			gb->cpu_reg.e = val;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7dba      	ldrb	r2, [r7, #22]
 8002276:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			break;
 800227a:	e018      	b.n	80022ae <__gb_execute_cb+0x4e6>

		case 4:
			gb->cpu_reg.h = val;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7dba      	ldrb	r2, [r7, #22]
 8002280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			break;
 8002284:	e013      	b.n	80022ae <__gb_execute_cb+0x4e6>

		case 5:
			gb->cpu_reg.l = val;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7dba      	ldrb	r2, [r7, #22]
 800228a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			break;
 800228e:	e00e      	b.n	80022ae <__gb_execute_cb+0x4e6>

		case 6:
			__gb_write(gb, gb->cpu_reg.hl, val);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002294:	4619      	mov	r1, r3
 8002296:	7dbb      	ldrb	r3, [r7, #22]
 8002298:	461a      	mov	r2, r3
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff f964 	bl	8001568 <__gb_write>
			break;
 80022a0:	e005      	b.n	80022ae <__gb_execute_cb+0x4e6>

		case 7:
			gb->cpu_reg.a = val;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7dba      	ldrb	r2, [r7, #22]
 80022a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			break;
 80022aa:	e000      	b.n	80022ae <__gb_execute_cb+0x4e6>
		}
	}
 80022ac:	bf00      	nop
	return inst_cycles;
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <compare_sprites>:
	uint8_t x;
};

#if PEANUT_GB_HIGH_LCD_ACCURACY
static int compare_sprites(const void *in1, const void *in2)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	const struct sprite_data *sd1 = in1, *sd2 = in2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	613b      	str	r3, [r7, #16]
	int x_res = (int)sd1->x - (int)sd2->x;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	785b      	ldrb	r3, [r3, #1]
 80022ce:	461a      	mov	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	60fb      	str	r3, [r7, #12]
	if(x_res != 0)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <compare_sprites+0x2a>
		return x_res;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	e005      	b.n	80022ee <compare_sprites+0x36>

	return (int)sd1->sprite_number - (int)sd2->sprite_number;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	1ad3      	subs	r3, r2, r3
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <__gb_draw_line>:
#endif

void __gb_draw_line(struct gb_s *gb)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b0ca      	sub	sp, #296	; 0x128
 8002300:	af00      	add	r7, sp, #0
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	6018      	str	r0, [r3, #0]
	uint8_t pixels[160] = {0};
 8002306:	2300      	movs	r3, #0
 8002308:	65bb      	str	r3, [r7, #88]	; 0x58
 800230a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800230e:	229c      	movs	r2, #156	; 0x9c
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f008 f96e 	bl	800a5f4 <memset>

	/* If LCD not initialised by front-end, don't render anything. */
	if(gb->display.lcd_draw_line == NULL)
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002320:	330c      	adds	r3, #12
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 853e 	beq.w	8002da6 <__gb_draw_line+0xaaa>
		return;

	if(gb->direct.frame_skip && !gb->display.frame_skip_count)
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002332:	3320      	adds	r3, #32
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <__gb_draw_line+0x5c>
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002348:	331e      	adds	r3, #30
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8529 	beq.w	8002daa <__gb_draw_line+0xaae>
		return;

	/* If interlaced mode is activated, check if we need to draw the current
	 * line. */
	if(gb->direct.interlace)
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002360:	3320      	adds	r3, #32
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d052      	beq.n	8002414 <__gb_draw_line+0x118>
	{
		if((gb->display.interlace_count == 0
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002376:	331e      	adds	r3, #30
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d107      	bne.n	8002394 <__gb_draw_line+0x98>
				&& (gb->gb_reg.LY & 1) == 0)
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d012      	beq.n	80023ba <__gb_draw_line+0xbe>
				|| (gb->display.interlace_count == 1
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800239c:	331e      	adds	r3, #30
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d034      	beq.n	8002414 <__gb_draw_line+0x118>
				    && (gb->gb_reg.LY & 1) == 1))
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d02c      	beq.n	8002414 <__gb_draw_line+0x118>
		{
			/* Compensate for missing window draw if required. */
			if(gb->gb_reg.LCDC & LCDC_WINDOW_ENABLE
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 84f1 	beq.w	8002dae <__gb_draw_line+0xab2>
					&& gb->gb_reg.LY >= gb->display.WY
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80023dc:	331d      	adds	r3, #29
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f0c0 84e4 	bcc.w	8002dae <__gb_draw_line+0xab2>
					&& gb->gb_reg.WX <= 166)
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80023ee:	2ba6      	cmp	r3, #166	; 0xa6
 80023f0:	f200 84dd 	bhi.w	8002dae <__gb_draw_line+0xab2>
				gb->display.window_clear++;
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80023fc:	331c      	adds	r3, #28
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	3301      	adds	r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800240c:	331c      	adds	r3, #28
 800240e:	701a      	strb	r2, [r3, #0]

			return;
 8002410:	f000 bccd 	b.w	8002dae <__gb_draw_line+0xab2>
		}
	}

	/* If background is enabled, draw it. */
	if(gb->gb_reg.LCDC & LCDC_BG_ENABLE)
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 813c 	beq.w	800269e <__gb_draw_line+0x3a2>
	{
		/* Calculate current background line to draw. Constant because
		 * this function draws only this one line each time it is
		 * called. */
		const uint8_t bg_y = gb->gb_reg.LY + gb->gb_reg.SCY;
 8002426:	1d3b      	adds	r3, r7, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002436:	4413      	add	r3, r2
 8002438:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
		/* Get selected background map address for first tile
		 * corresponding to current line.
		 * 0x20 (32) is the width of a background tile, and the bit
		 * shift is to calculate the address. */
		const uint16_t bg_map =
			((gb->gb_reg.LCDC & LCDC_BG_MAP) ?
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002444:	f003 0308 	and.w	r3, r3, #8
			 VRAM_BMAP_2 : VRAM_BMAP_1)
			+ (bg_y >> 3) * 0x20;
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <__gb_draw_line+0x156>
 800244c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002450:	e001      	b.n	8002456 <__gb_draw_line+0x15a>
 8002452:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002456:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800245a:	08db      	lsrs	r3, r3, #3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	b29b      	uxth	r3, r3
 8002460:	015b      	lsls	r3, r3, #5
 8002462:	b29b      	uxth	r3, r3
		const uint16_t bg_map =
 8002464:	4413      	add	r3, r2
 8002466:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		/* The displays (what the player sees) X coordinate, drawn right
		 * to left. */
		uint8_t disp_x = LCD_WIDTH - 1;
 800246a:	239f      	movs	r3, #159	; 0x9f
 800246c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

		/* The X coordinate to begin drawing the background at. */
		uint8_t bg_x = disp_x + gb->gb_reg.SCX;
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8002478:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800247c:	4413      	add	r3, r2
 800247e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

		/* Get tile index for current background tile. */
		uint8_t idx = gb->vram[bg_map + (bg_x >> 3)];
 8002482:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002486:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 800248a:	08d2      	lsrs	r2, r2, #3
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	4413      	add	r3, r2
 8002490:	1d3a      	adds	r2, r7, #4
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	4413      	add	r3, r2
 8002496:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800249a:	332c      	adds	r3, #44	; 0x2c
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
		/* Y coordinate of tile pixel to draw. */
		const uint8_t py = (bg_y & 0x07);
 80024a2:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		/* X coordinate of tile pixel to draw. */
		uint8_t px = 7 - (bg_x & 0x07);
 80024ae:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80024b2:	43db      	mvns	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

		uint16_t tile;

		/* Select addressing mode. */
		if(gb->gb_reg.LCDC & LCDC_TILE_SELECT)
 80024be:	1d3b      	adds	r3, r7, #4
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <__gb_draw_line+0x1e0>
			tile = VRAM_TILES_1 + idx * 0x10;
 80024ce:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
 80024da:	e00c      	b.n	80024f6 <__gb_draw_line+0x1fa>
		else
			tile = VRAM_TILES_2 + ((idx + 0x80) % 0x100) * 0x10;
 80024dc:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80024e0:	3380      	adds	r3, #128	; 0x80
 80024e2:	425a      	negs	r2, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	bf58      	it	pl
 80024ea:	4253      	negpl	r3, r2
 80024ec:	3380      	adds	r3, #128	; 0x80
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

		tile += 2 * py;
 80024f6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 8002504:	4413      	add	r3, r2
 8002506:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

		/* fetch first tile */
		uint8_t t1 = gb->vram[tile] >> px;
 800250a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800250e:	1d3a      	adds	r2, r7, #4
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	4413      	add	r3, r2
 8002514:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002518:	332c      	adds	r3, #44	; 0x2c
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8002522:	fa42 f303 	asr.w	r3, r2, r3
 8002526:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
		uint8_t t2 = gb->vram[tile + 1] >> px;
 800252a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 800252e:	3301      	adds	r3, #1
 8002530:	1d3a      	adds	r2, r7, #4
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	4413      	add	r3, r2
 8002536:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800253a:	332c      	adds	r3, #44	; 0x2c
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8002544:	fa42 f303 	asr.w	r3, r2, r3
 8002548:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122

		for(; disp_x != 0xFF; disp_x--)
 800254c:	e0a2      	b.n	8002694 <__gb_draw_line+0x398>
		{
			if(px == 8)
 800254e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8002552:	2b08      	cmp	r3, #8
 8002554:	d158      	bne.n	8002608 <__gb_draw_line+0x30c>
			{
				/* fetch next tile */
				px = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				bg_x = disp_x + gb->gb_reg.SCX;
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8002564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002568:	4413      	add	r3, r2
 800256a:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
				idx = gb->vram[bg_map + (bg_x >> 3)];
 800256e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002572:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8002576:	08d2      	lsrs	r2, r2, #3
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	4413      	add	r3, r2
 800257c:	1d3a      	adds	r2, r7, #4
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	4413      	add	r3, r2
 8002582:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002586:	332c      	adds	r3, #44	; 0x2c
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c

				if(gb->gb_reg.LCDC & LCDC_TILE_SELECT)
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <__gb_draw_line+0x2b0>
					tile = VRAM_TILES_1 + idx * 0x10;
 800259e:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
 80025aa:	e00c      	b.n	80025c6 <__gb_draw_line+0x2ca>
				else
					tile = VRAM_TILES_2 + ((idx + 0x80) % 0x100) * 0x10;
 80025ac:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 80025b0:	3380      	adds	r3, #128	; 0x80
 80025b2:	425a      	negs	r2, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	bf58      	it	pl
 80025ba:	4253      	negpl	r3, r2
 80025bc:	3380      	adds	r3, #128	; 0x80
 80025be:	b29b      	uxth	r3, r3
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124

				tile += 2 * py;
 80025c6:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80025d4:	4413      	add	r3, r2
 80025d6:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
				t1 = gb->vram[tile];
 80025da:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80025de:	1d3a      	adds	r2, r7, #4
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80025e8:	332c      	adds	r3, #44	; 0x2c
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
				t2 = gb->vram[tile + 1];
 80025f0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	; 0x124
 80025f4:	3301      	adds	r3, #1
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002600:	332c      	adds	r3, #44	; 0x2c
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			}

			/* copy background */
			uint8_t c = (t1 & 0x1) | ((t2 & 0x1) << 1);
 8002608:	f997 3123 	ldrsb.w	r3, [r7, #291]	; 0x123
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	b25a      	sxtb	r2, r3
 8002612:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	b25b      	sxtb	r3, r3
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	b25b      	sxtb	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b25b      	sxtb	r3, r3
 8002624:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
			pixels[disp_x] = gb->display.bg_palette[c];
 8002628:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800262c:	f897 2127 	ldrb.w	r2, [r7, #295]	; 0x127
 8002630:	1d39      	adds	r1, r7, #4
 8002632:	6809      	ldr	r1, [r1, #0]
 8002634:	440b      	add	r3, r1
 8002636:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800263a:	3310      	adds	r3, #16
 800263c:	7819      	ldrb	r1, [r3, #0]
 800263e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002642:	4413      	add	r3, r2
 8002644:	460a      	mov	r2, r1
 8002646:	f803 2cd0 	strb.w	r2, [r3, #-208]
			pixels[disp_x] |= LCD_PALETTE_BG;
 800264a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800264e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002652:	4413      	add	r3, r2
 8002654:	f813 2cd0 	ldrb.w	r2, [r3, #-208]
 8002658:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800265c:	f042 0220 	orr.w	r2, r2, #32
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8002666:	440b      	add	r3, r1
 8002668:	f803 2cd0 	strb.w	r2, [r3, #-208]
			t1 = t1 >> 1;
 800266c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
			t2 = t2 >> 1;
 8002676:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
			px++;
 8002680:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8002684:	3301      	adds	r3, #1
 8002686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		for(; disp_x != 0xFF; disp_x--)
 800268a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800268e:	3b01      	subs	r3, #1
 8002690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
 8002694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002698:	2bff      	cmp	r3, #255	; 0xff
 800269a:	f47f af58 	bne.w	800254e <__gb_draw_line+0x252>
		}
	}

	/* draw window */
	if(gb->gb_reg.LCDC & LCDC_WINDOW_ENABLE
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8170 	beq.w	8002990 <__gb_draw_line+0x694>
			&& gb->gb_reg.LY >= gb->display.WY
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80026b8:	1d3b      	adds	r3, r7, #4
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80026c0:	331d      	adds	r3, #29
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f0c0 8163 	bcc.w	8002990 <__gb_draw_line+0x694>
			&& gb->gb_reg.WX <= 166)
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80026d2:	2ba6      	cmp	r3, #166	; 0xa6
 80026d4:	f200 815c 	bhi.w	8002990 <__gb_draw_line+0x694>
	{
		/* Calculate Window Map Address. */
		uint16_t win_line = (gb->gb_reg.LCDC & LCDC_WINDOW_MAP) ?
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <__gb_draw_line+0x3f2>
 80026e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026ec:	e001      	b.n	80026f2 <__gb_draw_line+0x3f6>
 80026ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026f2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				    VRAM_BMAP_2 : VRAM_BMAP_1;
		win_line += (gb->display.window_clear >> 3) * 0x20;
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80026fe:	331c      	adds	r3, #28
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	b29b      	uxth	r3, r3
 8002708:	015b      	lsls	r3, r3, #5
 800270a:	b29a      	uxth	r2, r3
 800270c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8002710:	4413      	add	r3, r2
 8002712:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108

		uint8_t disp_x = LCD_WIDTH - 1;
 8002716:	239f      	movs	r3, #159	; 0x9f
 8002718:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		uint8_t win_x = disp_x - gb->gb_reg.WX + 7;
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002724:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3307      	adds	r3, #7
 800272e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		// look up tile
		uint8_t py = gb->display.window_clear & 0x07;
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800273a:	331c      	adds	r3, #28
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		uint8_t px = 7 - (win_x & 0x07);
 8002746:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800274a:	43db      	mvns	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
		uint8_t idx = gb->vram[win_line + (win_x >> 3)];
 8002756:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 800275a:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 800275e:	08d2      	lsrs	r2, r2, #3
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	4413      	add	r3, r2
 8002764:	1d3a      	adds	r2, r7, #4
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	4413      	add	r3, r2
 800276a:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 800276e:	332c      	adds	r3, #44	; 0x2c
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

		uint16_t tile;

		if(gb->gb_reg.LCDC & LCDC_TILE_SELECT)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <__gb_draw_line+0x498>
			tile = VRAM_TILES_1 + idx * 0x10;
 8002786:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 800278a:	b29b      	uxth	r3, r3
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8002792:	e00c      	b.n	80027ae <__gb_draw_line+0x4b2>
		else
			tile = VRAM_TILES_2 + ((idx + 0x80) % 0x100) * 0x10;
 8002794:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002798:	3380      	adds	r3, #128	; 0x80
 800279a:	425a      	negs	r2, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	bf58      	it	pl
 80027a2:	4253      	negpl	r3, r2
 80027a4:	3380      	adds	r3, #128	; 0x80
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

		tile += 2 * py;
 80027ae:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80027bc:	4413      	add	r3, r2
 80027be:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

		// fetch first tile
		uint8_t t1 = gb->vram[tile] >> px;
 80027c2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80027c6:	1d3a      	adds	r2, r7, #4
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80027d0:	332c      	adds	r3, #44	; 0x2c
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 80027da:	fa42 f303 	asr.w	r3, r2, r3
 80027de:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
		uint8_t t2 = gb->vram[tile + 1] >> px;
 80027e2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80027e6:	3301      	adds	r3, #1
 80027e8:	1d3a      	adds	r2, r7, #4
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80027f2:	332c      	adds	r3, #44	; 0x2c
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 80027fc:	fa42 f303 	asr.w	r3, r2, r3
 8002800:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

		// loop & copy window
		uint8_t end = (gb->gb_reg.WX < 7 ? 0 : gb->gb_reg.WX - 7) - 1;
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800280c:	2b07      	cmp	r3, #7
 800280e:	bf38      	it	cc
 8002810:	2307      	movcc	r3, #7
 8002812:	b2db      	uxtb	r3, r3
 8002814:	3b08      	subs	r3, #8
 8002816:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

		for(; disp_x != end; disp_x--)
 800281a:	e0a4      	b.n	8002966 <__gb_draw_line+0x66a>
		{
			if(px == 8)
 800281c:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8002820:	2b08      	cmp	r3, #8
 8002822:	d15a      	bne.n	80028da <__gb_draw_line+0x5de>
			{
				// fetch next tile
				px = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
				win_x = disp_x - gb->gb_reg.WX + 7;
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002832:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3307      	adds	r3, #7
 800283c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				idx = gb->vram[win_line + (win_x >> 3)];
 8002840:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8002844:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8002848:	08d2      	lsrs	r2, r2, #3
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	4413      	add	r3, r2
 800284e:	1d3a      	adds	r2, r7, #4
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	4413      	add	r3, r2
 8002854:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002858:	332c      	adds	r3, #44	; 0x2c
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

				if(gb->gb_reg.LCDC & LCDC_TILE_SELECT)
 8002860:	1d3b      	adds	r3, r7, #4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <__gb_draw_line+0x582>
					tile = VRAM_TILES_1 + idx * 0x10;
 8002870:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002874:	b29b      	uxth	r3, r3
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 800287c:	e00c      	b.n	8002898 <__gb_draw_line+0x59c>
				else
					tile = VRAM_TILES_2 + ((idx + 0x80) % 0x100) * 0x10;
 800287e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002882:	3380      	adds	r3, #128	; 0x80
 8002884:	425a      	negs	r2, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	bf58      	it	pl
 800288c:	4253      	negpl	r3, r2
 800288e:	3380      	adds	r3, #128	; 0x80
 8002890:	b29b      	uxth	r3, r3
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

				tile += 2 * py;
 8002898:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800289c:	b29b      	uxth	r3, r3
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80028a6:	4413      	add	r3, r2
 80028a8:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
				t1 = gb->vram[tile];
 80028ac:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80028b0:	1d3a      	adds	r2, r7, #4
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80028ba:	332c      	adds	r3, #44	; 0x2c
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
				t2 = gb->vram[tile + 1];
 80028c2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80028c6:	3301      	adds	r3, #1
 80028c8:	1d3a      	adds	r2, r7, #4
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 80028d2:	332c      	adds	r3, #44	; 0x2c
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			}

			// copy window
			uint8_t c = (t1 & 0x1) | ((t2 & 0x1) << 1);
 80028da:	f997 311d 	ldrsb.w	r3, [r7, #285]	; 0x11d
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	b25a      	sxtb	r2, r3
 80028e4:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	4313      	orrs	r3, r2
 80028f4:	b25b      	sxtb	r3, r3
 80028f6:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
			pixels[disp_x] = gb->display.bg_palette[c];
 80028fa:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80028fe:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8002902:	1d39      	adds	r1, r7, #4
 8002904:	6809      	ldr	r1, [r1, #0]
 8002906:	440b      	add	r3, r1
 8002908:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800290c:	3310      	adds	r3, #16
 800290e:	7819      	ldrb	r1, [r3, #0]
 8002910:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002914:	4413      	add	r3, r2
 8002916:	460a      	mov	r2, r1
 8002918:	f803 2cd0 	strb.w	r2, [r3, #-208]
			pixels[disp_x] |= LCD_PALETTE_BG;
 800291c:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8002920:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002924:	4413      	add	r3, r2
 8002926:	f813 2cd0 	ldrb.w	r2, [r3, #-208]
 800292a:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 800292e:	f042 0220 	orr.w	r2, r2, #32
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8002938:	440b      	add	r3, r1
 800293a:	f803 2cd0 	strb.w	r2, [r3, #-208]
			t1 = t1 >> 1;
 800293e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			t2 = t2 >> 1;
 8002948:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			px++;
 8002952:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8002956:	3301      	adds	r3, #1
 8002958:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
		for(; disp_x != end; disp_x--)
 800295c:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8002960:	3b01      	subs	r3, #1
 8002962:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
 8002966:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 800296a:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 800296e:	429a      	cmp	r2, r3
 8002970:	f47f af54 	bne.w	800281c <__gb_draw_line+0x520>
		}

		gb->display.window_clear++; // advance window line
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800297c:	331c      	adds	r3, #28
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	3301      	adds	r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800298c:	331c      	adds	r3, #28
 800298e:	701a      	strb	r2, [r3, #0]
	}

	// draw sprites
	if(gb->gb_reg.LCDC & LCDC_OBJ_ENABLE)
 8002990:	1d3b      	adds	r3, r7, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 81f2 	beq.w	8002d86 <__gb_draw_line+0xa8a>
	{
#if PEANUT_GB_HIGH_LCD_ACCURACY
		uint8_t number_of_sprites = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		struct sprite_data sprites_to_render[NUM_SPRITES];

		/* Record number of sprites on the line being rendered, limited
		 * to the maximum number sprites that the Game Boy is able to
		 * render on each line (10 sprites). */
		for(uint8_t sprite_number = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 80029ae:	e054      	b.n	8002a5a <__gb_draw_line+0x75e>
				sprite_number < PEANUT_GB_ARRAYSIZE(sprites_to_render);
				sprite_number++)
		{
			/* Sprite Y position. */
			uint8_t OY = gb->oam[4 * sprite_number + 0];
 80029b0:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	1d3a      	adds	r2, r7, #4
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80029c0:	336c      	adds	r3, #108	; 0x6c
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
			/* Sprite X position. */
			uint8_t OX = gb->oam[4 * sprite_number + 1];
 80029c8:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	3301      	adds	r3, #1
 80029d0:	1d3a      	adds	r2, r7, #4
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80029da:	336c      	adds	r3, #108	; 0x6c
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb

			/* If sprite isn't on this line, continue. */
			if (gb->gb_reg.LY +
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80029ea:	461a      	mov	r2, r3
				(gb->gb_reg.LCDC & LCDC_OBJ_SIZE ? 0 : 8) >= OY
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <__gb_draw_line+0x704>
 80029fc:	2300      	movs	r3, #0
 80029fe:	e000      	b.n	8002a02 <__gb_draw_line+0x706>
 8002a00:	2308      	movs	r3, #8
			if (gb->gb_reg.LY +
 8002a02:	441a      	add	r2, r3
				(gb->gb_reg.LCDC & LCDC_OBJ_SIZE ? 0 : 8) >= OY
 8002a04:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
			if (gb->gb_reg.LY +
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	da20      	bge.n	8002a4e <__gb_draw_line+0x752>
					|| gb->gb_reg.LY + 16 < OY)
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a14:	f103 0210 	add.w	r2, r3, #16
 8002a18:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	db16      	blt.n	8002a4e <__gb_draw_line+0x752>
				continue;


			sprites_to_render[number_of_sprites].sprite_number = sprite_number;
 8002a20:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8002a24:	f107 0308 	add.w	r3, r7, #8
 8002a28:	f897 111a 	ldrb.w	r1, [r7, #282]	; 0x11a
 8002a2c:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
			sprites_to_render[number_of_sprites].x = OX;
 8002a30:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8002a34:	f107 0208 	add.w	r2, r7, #8
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f897 20fb 	ldrb.w	r2, [r7, #251]	; 0xfb
 8002a40:	705a      	strb	r2, [r3, #1]
			number_of_sprites++;
 8002a42:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8002a46:	3301      	adds	r3, #1
 8002a48:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 8002a4c:	e000      	b.n	8002a50 <__gb_draw_line+0x754>
				continue;
 8002a4e:	bf00      	nop
				sprite_number++)
 8002a50:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8002a54:	3301      	adds	r3, #1
 8002a56:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
		for(uint8_t sprite_number = 0;
 8002a5a:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8002a5e:	2b27      	cmp	r3, #39	; 0x27
 8002a60:	d9a6      	bls.n	80029b0 <__gb_draw_line+0x6b4>
		}

		/* If maximum number of sprites reached, prioritise X
		 * coordinate and object location in OAM. */
		qsort(&sprites_to_render[0], number_of_sprites,
 8002a62:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 8002a66:	f107 0008 	add.w	r0, r7, #8
 8002a6a:	4bd3      	ldr	r3, [pc, #844]	; (8002db8 <__gb_draw_line+0xabc>)
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f007 fe90 	bl	800a792 <qsort>
				sizeof(sprites_to_render[0]), compare_sprites);
		if(number_of_sprites > MAX_SPRITES_LINE)
 8002a72:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8002a76:	2b0a      	cmp	r3, #10
 8002a78:	d902      	bls.n	8002a80 <__gb_draw_line+0x784>
			number_of_sprites = MAX_SPRITES_LINE;
 8002a7a:	230a      	movs	r3, #10
 8002a7c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
#endif

		/* Render each sprite, from low priority to high priority. */
#if PEANUT_GB_HIGH_LCD_ACCURACY
		/* Render the top ten prioritised sprites on this scanline. */
		for(uint8_t sprite_number = number_of_sprites - 1;
 8002a80:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8002a84:	3b01      	subs	r3, #1
 8002a86:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8002a8a:	e177      	b.n	8002d7c <__gb_draw_line+0xa80>
				sprite_number != 0xFF;
				sprite_number--)
		{
			uint8_t s = sprites_to_render[sprite_number].sprite_number;
 8002a8c:	f897 2119 	ldrb.w	r2, [r7, #281]	; 0x119
 8002a90:	f107 0308 	add.w	r3, r7, #8
 8002a94:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8002a98:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
			sprite_number--)
		{
			uint8_t s = sprite_number;
#endif
			/* Sprite Y position. */
			uint8_t OY = gb->oam[4 * s + 0];
 8002a9c:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	1d3a      	adds	r2, r7, #4
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8002aac:	336c      	adds	r3, #108	; 0x6c
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
			/* Sprite X position. */
			uint8_t OX = gb->oam[4 * s + 1];
 8002ab4:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	3301      	adds	r3, #1
 8002abc:	1d3a      	adds	r2, r7, #4
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8002ac6:	336c      	adds	r3, #108	; 0x6c
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
			/* Sprite Tile/Pattern Number. */
			uint8_t OT = gb->oam[4 * s + 2]
 8002ace:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	3302      	adds	r3, #2
 8002ad6:	1d3a      	adds	r2, r7, #4
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8002ae0:	336c      	adds	r3, #108	; 0x6c
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b25b      	sxtb	r3, r3
				     & (gb->gb_reg.LCDC & LCDC_OBJ_SIZE ? 0xFE : 0xFF);
 8002ae6:	1d3a      	adds	r2, r7, #4
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8002aee:	f002 0204 	and.w	r2, r2, #4
 8002af2:	2a00      	cmp	r2, #0
 8002af4:	d002      	beq.n	8002afc <__gb_draw_line+0x800>
 8002af6:	f06f 0201 	mvn.w	r2, #1
 8002afa:	e001      	b.n	8002b00 <__gb_draw_line+0x804>
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b00:	4013      	ands	r3, r2
 8002b02:	b25b      	sxtb	r3, r3
			uint8_t OT = gb->oam[4 * s + 2]
 8002b04:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
			/* Additional attributes. */
			uint8_t OF = gb->oam[4 * s + 3];
 8002b08:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	3303      	adds	r3, #3
 8002b10:	1d3a      	adds	r2, r7, #4
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8002b1a:	336c      	adds	r3, #108	; 0x6c
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
					gb->gb_reg.LY + 16 < OY)
				continue;
#endif

			/* Continue if sprite not visible. */
			if(OX == 0 || OX >= 168)
 8002b22:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8122 	beq.w	8002d70 <__gb_draw_line+0xa74>
 8002b2c:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002b30:	2ba7      	cmp	r3, #167	; 0xa7
 8002b32:	f200 811d 	bhi.w	8002d70 <__gb_draw_line+0xa74>
				continue;

			// y flip
			uint8_t py = gb->gb_reg.LY - OY + 16;
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8002b3e:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3310      	adds	r3, #16
 8002b48:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

			if(OF & OBJ_FLIP_Y)
 8002b4c:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00f      	beq.n	8002b78 <__gb_draw_line+0x87c>
				py = (gb->gb_reg.LCDC & LCDC_OBJ_SIZE ? 15 : 7) - py;
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <__gb_draw_line+0x870>
 8002b68:	220f      	movs	r2, #15
 8002b6a:	e000      	b.n	8002b6e <__gb_draw_line+0x872>
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

			// fetch the tile
			uint8_t t1 = gb->vram[VRAM_TILES_1 + OT * 0x10 + 2 * py];
 8002b78:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002b7c:	00da      	lsls	r2, r3, #3
 8002b7e:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8002b82:	4413      	add	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	1d3a      	adds	r2, r7, #4
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002b90:	332c      	adds	r3, #44	; 0x2c
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			uint8_t t2 = gb->vram[VRAM_TILES_1 + OT * 0x10 + 2 * py + 1];
 8002b98:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002b9c:	00da      	lsls	r2, r3, #3
 8002b9e:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8002ba2:	4413      	add	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	1d3a      	adds	r2, r7, #4
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8002bb2:	332c      	adds	r3, #44	; 0x2c
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

			// handle x flip
			uint8_t dir, start, end, shift;

			if(OF & OBJ_FLIP_X)
 8002bba:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01c      	beq.n	8002c00 <__gb_draw_line+0x904>
			{
				dir = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				start = (OX < 8 ? 0 : OX - 8);
 8002bcc:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	bf38      	it	cc
 8002bd4:	2308      	movcc	r3, #8
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	3b08      	subs	r3, #8
 8002bda:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
				end = MIN(OX, LCD_WIDTH);
 8002bde:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002be2:	2ba0      	cmp	r3, #160	; 0xa0
 8002be4:	bf28      	it	cs
 8002be6:	23a0      	movcs	r3, #160	; 0xa0
 8002be8:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
				shift = 8 - OX + start;
 8002bec:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 8002bf0:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
 8002bfe:	e01d      	b.n	8002c3c <__gb_draw_line+0x940>
			}
			else
			{
				dir = -1;
 8002c00:	23ff      	movs	r3, #255	; 0xff
 8002c02:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				start = MIN(OX, LCD_WIDTH) - 1;
 8002c06:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002c0a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c0c:	bf28      	it	cs
 8002c0e:	23a0      	movcs	r3, #160	; 0xa0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
				end = (OX < 8 ? 0 : OX - 8) - 1;
 8002c18:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	bf38      	it	cc
 8002c20:	2308      	movcc	r3, #8
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	3b09      	subs	r3, #9
 8002c26:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
				shift = OX - (start + 1);
 8002c2a:	f897 2100 	ldrb.w	r2, [r7, #256]	; 0x100
 8002c2e:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
			}

			// copy tile
			t1 >>= shift;
 8002c3c:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8002c40:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8002c44:	fa42 f303 	asr.w	r3, r2, r3
 8002c48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			t2 >>= shift;
 8002c4c:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8002c50:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8002c54:	fa42 f303 	asr.w	r3, r2, r3
 8002c58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

			for(uint8_t disp_x = start; disp_x != end; disp_x += dir)
 8002c5c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8002c60:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 8002c64:	e07c      	b.n	8002d60 <__gb_draw_line+0xa64>
			{
				uint8_t c = (t1 & 0x1) | ((t2 & 0x1) << 1);
 8002c66:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	b25a      	sxtb	r2, r3
 8002c70:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	b25b      	sxtb	r3, r3
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
						//	&& OX <= fx[disp_x]
						&& !((OF & OBJ_PRIORITY)
						     && ((pixels[disp_x] & 0x3)
							 && fx[disp_x] == 0xFE)))
#else
				if(c && !(OF & OBJ_PRIORITY
 8002c86:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d057      	beq.n	8002d3e <__gb_draw_line+0xa42>
 8002c8e:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da0a      	bge.n	8002cac <__gb_draw_line+0x9b0>
						&& pixels[disp_x] & 0x3))
 8002c96:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8002c9a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f813 3cd0 	ldrb.w	r3, [r3, #-208]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
				if(c && !(OF & OBJ_PRIORITY
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d148      	bne.n	8002d3e <__gb_draw_line+0xa42>
#endif
				{
					/* Set pixel colour. */
					pixels[disp_x] = (OF & OBJ_PALETTE)
 8002cac:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <__gb_draw_line+0x9d2>
							 ? gb->display.sp_palette[c + 4]
 8002cb8:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8002cbc:	3304      	adds	r3, #4
					pixels[disp_x] = (OF & OBJ_PALETTE)
 8002cbe:	1d3a      	adds	r2, r7, #4
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002cc8:	3314      	adds	r3, #20
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	e008      	b.n	8002ce0 <__gb_draw_line+0x9e4>
							 : gb->display.sp_palette[c];
 8002cce:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
					pixels[disp_x] = (OF & OBJ_PALETTE)
 8002cd2:	1d3a      	adds	r2, r7, #4
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002cdc:	3314      	adds	r3, #20
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	f897 2111 	ldrb.w	r2, [r7, #273]	; 0x111
 8002ce4:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8002ce8:	440a      	add	r2, r1
 8002cea:	f802 3cd0 	strb.w	r3, [r2, #-208]
					/* Set pixel palette (OBJ0 or OBJ1). */
					pixels[disp_x] |= (OF & OBJ_PALETTE);
 8002cee:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8002cf2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f813 3cd0 	ldrb.w	r3, [r3, #-208]
 8002cfc:	b25a      	sxtb	r2, r3
 8002cfe:	f997 30fe 	ldrsb.w	r3, [r7, #254]	; 0xfe
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	b25b      	sxtb	r3, r3
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	b25a      	sxtb	r2, r3
 8002d0c:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8002d16:	440b      	add	r3, r1
 8002d18:	f803 2cd0 	strb.w	r2, [r3, #-208]
					/* Deselect BG palette. */
					pixels[disp_x] &= ~LCD_PALETTE_BG;
 8002d1c:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8002d20:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8002d24:	4413      	add	r3, r2
 8002d26:	f813 2cd0 	ldrb.w	r2, [r3, #-208]
 8002d2a:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8002d2e:	f022 0220 	bic.w	r2, r2, #32
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8002d38:	440b      	add	r3, r1
 8002d3a:	f803 2cd0 	strb.w	r2, [r3, #-208]
				}

				t1 = t1 >> 1;
 8002d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				t2 = t2 >> 1;
 8002d48:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
			for(uint8_t disp_x = start; disp_x != end; disp_x += dir)
 8002d52:	f897 2111 	ldrb.w	r2, [r7, #273]	; 0x111
 8002d56:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 8002d60:	f897 2111 	ldrb.w	r2, [r7, #273]	; 0x111
 8002d64:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	f47f af7c 	bne.w	8002c66 <__gb_draw_line+0x96a>
 8002d6e:	e000      	b.n	8002d72 <__gb_draw_line+0xa76>
				continue;
 8002d70:	bf00      	nop
				sprite_number--)
 8002d72:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8002d76:	3b01      	subs	r3, #1
 8002d78:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
		for(uint8_t sprite_number = number_of_sprites - 1;
 8002d7c:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8002d80:	2bff      	cmp	r3, #255	; 0xff
 8002d82:	f47f ae83 	bne.w	8002a8c <__gb_draw_line+0x790>
			}
		}
	}

	gb->display.lcd_draw_line(gb, pixels, gb->gb_reg.LY);
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8002d8e:	330c      	adds	r3, #12
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	1d3a      	adds	r2, r7, #4
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002d9e:	1d38      	adds	r0, r7, #4
 8002da0:	6800      	ldr	r0, [r0, #0]
 8002da2:	4798      	blx	r3
 8002da4:	e004      	b.n	8002db0 <__gb_draw_line+0xab4>
		return;
 8002da6:	bf00      	nop
 8002da8:	e002      	b.n	8002db0 <__gb_draw_line+0xab4>
		return;
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <__gb_draw_line+0xab4>
			return;
 8002dae:	bf00      	nop
}
 8002db0:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	080022b9 	.word	0x080022b9

08002dbc <__gb_step_cpu>:

/**
 * Internal function used to step the CPU.
 */
void __gb_step_cpu(struct gb_s *gb)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b0af      	sub	sp, #188	; 0xbc
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
		12,12,8, 4, 0,16, 8,16,12, 8,16, 4, 0, 0, 8,16	/* 0xF0 */
		/* *INDENT-ON* */
	};

	/* Handle interrupts */
	if((gb->gb_ime || gb->gb_halt) &&
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7e1b      	ldrb	r3, [r3, #24]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d107      	bne.n	8002de2 <__gb_step_cpu+0x26>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7e1b      	ldrb	r3, [r3, #24]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80bd 	beq.w	8002f5c <__gb_step_cpu+0x1a0>
			(gb->gb_reg.IF & gb->gb_reg.IE & ANY_INTR))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dee:	4013      	ands	r3, r2
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f003 031f 	and.w	r3, r3, #31
	if((gb->gb_ime || gb->gb_halt) &&
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80b0 	beq.w	8002f5c <__gb_step_cpu+0x1a0>
	{
		gb->gb_halt = 0;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	7e13      	ldrb	r3, [r2, #24]
 8002e00:	f36f 0300 	bfc	r3, #0, #1
 8002e04:	7613      	strb	r3, [r2, #24]

		if(gb->gb_ime)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7e1b      	ldrb	r3, [r3, #24]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a3 	beq.w	8002f5c <__gb_step_cpu+0x1a0>
		{
			/* Disable interrupts */
			gb->gb_ime = 0;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	7e13      	ldrb	r3, [r2, #24]
 8002e1a:	f36f 0341 	bfc	r3, #1, #1
 8002e1e:	7613      	strb	r3, [r2, #24]

			/* Push Program Counter */
			__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	875a      	strh	r2, [r3, #58]	; 0x3a
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002e30:	4619      	mov	r1, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7fe fb92 	bl	8001568 <__gb_write>
			__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002e54:	4619      	mov	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fb82 	bl	8001568 <__gb_write>

			/* Call interrupt handler if required. */
			if(gb->gb_reg.IF & gb->gb_reg.IE & VBLANK_INTR)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e70:	4013      	ands	r3, r2
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <__gb_step_cpu+0xda>
			{
				gb->cpu_reg.pc = VBLANK_INTR_ADDR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2240      	movs	r2, #64	; 0x40
 8002e80:	879a      	strh	r2, [r3, #60]	; 0x3c
				gb->gb_reg.IF ^= VBLANK_INTR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002e88:	f083 0301 	eor.w	r3, r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8002e94:	e062      	b.n	8002f5c <__gb_step_cpu+0x1a0>
			}
			else if(gb->gb_reg.IF & gb->gb_reg.IE & LCDC_INTR)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00c      	beq.n	8002ec8 <__gb_step_cpu+0x10c>
			{
				gb->cpu_reg.pc = LCDC_INTR_ADDR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2248      	movs	r2, #72	; 0x48
 8002eb2:	879a      	strh	r2, [r3, #60]	; 0x3c
				gb->gb_reg.IF ^= LCDC_INTR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002eba:	f083 0302 	eor.w	r3, r3, #2
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8002ec6:	e049      	b.n	8002f5c <__gb_step_cpu+0x1a0>
			}
			else if(gb->gb_reg.IF & gb->gb_reg.IE & TIMER_INTR)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00c      	beq.n	8002efa <__gb_step_cpu+0x13e>
			{
				gb->cpu_reg.pc = TIMER_INTR_ADDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2250      	movs	r2, #80	; 0x50
 8002ee4:	879a      	strh	r2, [r3, #60]	; 0x3c
				gb->gb_reg.IF ^= TIMER_INTR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002eec:	f083 0304 	eor.w	r3, r3, #4
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8002ef8:	e030      	b.n	8002f5c <__gb_step_cpu+0x1a0>
			}
			else if(gb->gb_reg.IF & gb->gb_reg.IE & SERIAL_INTR)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f06:	4013      	ands	r3, r2
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00c      	beq.n	8002f2c <__gb_step_cpu+0x170>
			{
				gb->cpu_reg.pc = SERIAL_INTR_ADDR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2258      	movs	r2, #88	; 0x58
 8002f16:	879a      	strh	r2, [r3, #60]	; 0x3c
				gb->gb_reg.IF ^= SERIAL_INTR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002f1e:	f083 0308 	eor.w	r3, r3, #8
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8002f2a:	e017      	b.n	8002f5c <__gb_step_cpu+0x1a0>
			}
			else if(gb->gb_reg.IF & gb->gb_reg.IE & CONTROL_INTR)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <__gb_step_cpu+0x1a0>
			{
				gb->cpu_reg.pc = CONTROL_INTR_ADDR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2260      	movs	r2, #96	; 0x60
 8002f48:	879a      	strh	r2, [r3, #60]	; 0x3c
				gb->gb_reg.IF ^= CONTROL_INTR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8002f50:	f083 0310 	eor.w	r3, r3, #16
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			}
		}
	}

	/* Obtain opcode */
	opcode = (gb->gb_halt ? 0x00 : __gb_read(gb, gb->cpu_reg.pc++));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7e1b      	ldrb	r3, [r3, #24]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10b      	bne.n	8002f82 <__gb_step_cpu+0x1c6>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	b291      	uxth	r1, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	8791      	strh	r1, [r2, #60]	; 0x3c
 8002f76:	4619      	mov	r1, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7fe f8bb 	bl	80010f4 <__gb_read>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	e000      	b.n	8002f84 <__gb_step_cpu+0x1c8>
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	inst_cycles = op_cycles[opcode];
 8002f88:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8002f8c:	4a03      	ldr	r2, [pc, #12]	; (8002f9c <__gb_step_cpu+0x1e0>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	/* Execute opcode */
	switch(opcode)
 8002f94:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8002f98:	e002      	b.n	8002fa0 <__gb_step_cpu+0x1e4>
 8002f9a:	bf00      	nop
 8002f9c:	0800bbd4 	.word	0x0800bbd4
 8002fa0:	2bff      	cmp	r3, #255	; 0xff
 8002fa2:	f204 8769 	bhi.w	8007e78 <__gb_step_cpu+0x50bc>
 8002fa6:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <__gb_step_cpu+0x1f0>)
 8002fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fac:	08007e8b 	.word	0x08007e8b
 8002fb0:	080033ad 	.word	0x080033ad
 8002fb4:	080033ed 	.word	0x080033ed
 8002fb8:	08003405 	.word	0x08003405
 8002fbc:	08003415 	.word	0x08003415
 8002fc0:	08003477 	.word	0x08003477
 8002fc4:	080034d9 	.word	0x080034d9
 8002fc8:	080034fb 	.word	0x080034fb
 8002fcc:	08003565 	.word	0x08003565
 8002fd0:	080035cf 	.word	0x080035cf
 8002fd4:	0800363b 	.word	0x0800363b
 8002fd8:	08003655 	.word	0x08003655
 8002fdc:	08003665 	.word	0x08003665
 8002fe0:	080036c7 	.word	0x080036c7
 8002fe4:	08003729 	.word	0x08003729
 8002fe8:	0800374b 	.word	0x0800374b
 8002fec:	08007e8b 	.word	0x08007e8b
 8002ff0:	080037b5 	.word	0x080037b5
 8002ff4:	080037f5 	.word	0x080037f5
 8002ff8:	0800380d 	.word	0x0800380d
 8002ffc:	0800381d 	.word	0x0800381d
 8003000:	0800387f 	.word	0x0800387f
 8003004:	080038e1 	.word	0x080038e1
 8003008:	08003903 	.word	0x08003903
 800300c:	08003977 	.word	0x08003977
 8003010:	080039a5 	.word	0x080039a5
 8003014:	08003a11 	.word	0x08003a11
 8003018:	08003a2b 	.word	0x08003a2b
 800301c:	08003a3b 	.word	0x08003a3b
 8003020:	08003a9d 	.word	0x08003a9d
 8003024:	08003aff 	.word	0x08003aff
 8003028:	08003b21 	.word	0x08003b21
 800302c:	08003b95 	.word	0x08003b95
 8003030:	08003bed 	.word	0x08003bed
 8003034:	08003c2d 	.word	0x08003c2d
 8003038:	08003c51 	.word	0x08003c51
 800303c:	08003c61 	.word	0x08003c61
 8003040:	08003cc3 	.word	0x08003cc3
 8003044:	08003d25 	.word	0x08003d25
 8003048:	08003d47 	.word	0x08003d47
 800304c:	08003e39 	.word	0x08003e39
 8003050:	08003e91 	.word	0x08003e91
 8003054:	08003ee9 	.word	0x08003ee9
 8003058:	08003f0b 	.word	0x08003f0b
 800305c:	08003f1b 	.word	0x08003f1b
 8003060:	08003f7d 	.word	0x08003f7d
 8003064:	08003fdf 	.word	0x08003fdf
 8003068:	08004001 	.word	0x08004001
 800306c:	08004031 	.word	0x08004031
 8003070:	0800408b 	.word	0x0800408b
 8003074:	080040d5 	.word	0x080040d5
 8003078:	080040f9 	.word	0x080040f9
 800307c:	08004109 	.word	0x08004109
 8003080:	0800417d 	.word	0x0800417d
 8003084:	080041f1 	.word	0x080041f1
 8003088:	0800421b 	.word	0x0800421b
 800308c:	08004249 	.word	0x08004249
 8003090:	080042a3 	.word	0x080042a3
 8003094:	0800430b 	.word	0x0800430b
 8003098:	0800432d 	.word	0x0800432d
 800309c:	0800433d 	.word	0x0800433d
 80030a0:	0800439f 	.word	0x0800439f
 80030a4:	08004401 	.word	0x08004401
 80030a8:	08004423 	.word	0x08004423
 80030ac:	08007e8b 	.word	0x08007e8b
 80030b0:	08004467 	.word	0x08004467
 80030b4:	08004477 	.word	0x08004477
 80030b8:	08004487 	.word	0x08004487
 80030bc:	08004497 	.word	0x08004497
 80030c0:	080044a7 	.word	0x080044a7
 80030c4:	080044b7 	.word	0x080044b7
 80030c8:	080044d1 	.word	0x080044d1
 80030cc:	080044e1 	.word	0x080044e1
 80030d0:	08007e8b 	.word	0x08007e8b
 80030d4:	080044f1 	.word	0x080044f1
 80030d8:	08004501 	.word	0x08004501
 80030dc:	08004511 	.word	0x08004511
 80030e0:	08004521 	.word	0x08004521
 80030e4:	08004531 	.word	0x08004531
 80030e8:	0800454b 	.word	0x0800454b
 80030ec:	0800455b 	.word	0x0800455b
 80030f0:	0800456b 	.word	0x0800456b
 80030f4:	08007e8b 	.word	0x08007e8b
 80030f8:	0800457b 	.word	0x0800457b
 80030fc:	0800458b 	.word	0x0800458b
 8003100:	0800459b 	.word	0x0800459b
 8003104:	080045ab 	.word	0x080045ab
 8003108:	080045c5 	.word	0x080045c5
 800310c:	080045d5 	.word	0x080045d5
 8003110:	080045e5 	.word	0x080045e5
 8003114:	080045f5 	.word	0x080045f5
 8003118:	08007e8b 	.word	0x08007e8b
 800311c:	08004605 	.word	0x08004605
 8003120:	08004615 	.word	0x08004615
 8003124:	08004625 	.word	0x08004625
 8003128:	0800463f 	.word	0x0800463f
 800312c:	0800464f 	.word	0x0800464f
 8003130:	0800465f 	.word	0x0800465f
 8003134:	0800466f 	.word	0x0800466f
 8003138:	0800467f 	.word	0x0800467f
 800313c:	08007e8b 	.word	0x08007e8b
 8003140:	0800468f 	.word	0x0800468f
 8003144:	0800469f 	.word	0x0800469f
 8003148:	080046b9 	.word	0x080046b9
 800314c:	080046c9 	.word	0x080046c9
 8003150:	080046d9 	.word	0x080046d9
 8003154:	080046e9 	.word	0x080046e9
 8003158:	080046f9 	.word	0x080046f9
 800315c:	08004709 	.word	0x08004709
 8003160:	08007e8b 	.word	0x08007e8b
 8003164:	08004719 	.word	0x08004719
 8003168:	08004733 	.word	0x08004733
 800316c:	08004743 	.word	0x08004743
 8003170:	0800475b 	.word	0x0800475b
 8003174:	08004773 	.word	0x08004773
 8003178:	0800478b 	.word	0x0800478b
 800317c:	080047a3 	.word	0x080047a3
 8003180:	080047bb 	.word	0x080047bb
 8003184:	080047d3 	.word	0x080047d3
 8003188:	080047e1 	.word	0x080047e1
 800318c:	080047f9 	.word	0x080047f9
 8003190:	08004809 	.word	0x08004809
 8003194:	08004819 	.word	0x08004819
 8003198:	08004829 	.word	0x08004829
 800319c:	08004839 	.word	0x08004839
 80031a0:	08004849 	.word	0x08004849
 80031a4:	08004859 	.word	0x08004859
 80031a8:	08007e8b 	.word	0x08007e8b
 80031ac:	08004873 	.word	0x08004873
 80031b0:	08004909 	.word	0x08004909
 80031b4:	0800499f 	.word	0x0800499f
 80031b8:	08004a35 	.word	0x08004a35
 80031bc:	08004acb 	.word	0x08004acb
 80031c0:	08004b61 	.word	0x08004b61
 80031c4:	08004bf7 	.word	0x08004bf7
 80031c8:	08004c9b 	.word	0x08004c9b
 80031cc:	08004d15 	.word	0x08004d15
 80031d0:	08004dbd 	.word	0x08004dbd
 80031d4:	08004e65 	.word	0x08004e65
 80031d8:	08004f0d 	.word	0x08004f0d
 80031dc:	08004fbf 	.word	0x08004fbf
 80031e0:	08005071 	.word	0x08005071
 80031e4:	08005123 	.word	0x08005123
 80031e8:	080051e3 	.word	0x080051e3
 80031ec:	08005279 	.word	0x08005279
 80031f0:	08005319 	.word	0x08005319
 80031f4:	080053b9 	.word	0x080053b9
 80031f8:	08005459 	.word	0x08005459
 80031fc:	080054f9 	.word	0x080054f9
 8003200:	08005599 	.word	0x08005599
 8003204:	08005639 	.word	0x08005639
 8003208:	080056e7 	.word	0x080056e7
 800320c:	0800572b 	.word	0x0800572b
 8003210:	080057dd 	.word	0x080057dd
 8003214:	0800588f 	.word	0x0800588f
 8003218:	08005941 	.word	0x08005941
 800321c:	080059f3 	.word	0x080059f3
 8003220:	08005aa5 	.word	0x08005aa5
 8003224:	08005b57 	.word	0x08005b57
 8003228:	08005c17 	.word	0x08005c17
 800322c:	08005c83 	.word	0x08005c83
 8003230:	08005ce5 	.word	0x08005ce5
 8003234:	08005d47 	.word	0x08005d47
 8003238:	08005da9 	.word	0x08005da9
 800323c:	08005e0b 	.word	0x08005e0b
 8003240:	08005e6d 	.word	0x08005e6d
 8003244:	08005ecf 	.word	0x08005ecf
 8003248:	08005f39 	.word	0x08005f39
 800324c:	08005f85 	.word	0x08005f85
 8003250:	08005fe7 	.word	0x08005fe7
 8003254:	08006049 	.word	0x08006049
 8003258:	080060ab 	.word	0x080060ab
 800325c:	0800610d 	.word	0x0800610d
 8003260:	0800616f 	.word	0x0800616f
 8003264:	080061d1 	.word	0x080061d1
 8003268:	0800623b 	.word	0x0800623b
 800326c:	0800627f 	.word	0x0800627f
 8003270:	080062e1 	.word	0x080062e1
 8003274:	08006343 	.word	0x08006343
 8003278:	080063a5 	.word	0x080063a5
 800327c:	08006407 	.word	0x08006407
 8003280:	08006469 	.word	0x08006469
 8003284:	080064cb 	.word	0x080064cb
 8003288:	08006535 	.word	0x08006535
 800328c:	08006581 	.word	0x08006581
 8003290:	08006615 	.word	0x08006615
 8003294:	080066a9 	.word	0x080066a9
 8003298:	0800673d 	.word	0x0800673d
 800329c:	080067d1 	.word	0x080067d1
 80032a0:	08006865 	.word	0x08006865
 80032a4:	080068f9 	.word	0x080068f9
 80032a8:	0800699b 	.word	0x0800699b
 80032ac:	080069d7 	.word	0x080069d7
 80032b0:	08006a3d 	.word	0x08006a3d
 80032b4:	08006a7d 	.word	0x08006a7d
 80032b8:	08006af3 	.word	0x08006af3
 80032bc:	08006b37 	.word	0x08006b37
 80032c0:	08006bf1 	.word	0x08006bf1
 80032c4:	08006c35 	.word	0x08006c35
 80032c8:	08006ce7 	.word	0x08006ce7
 80032cc:	08006d35 	.word	0x08006d35
 80032d0:	08006d9d 	.word	0x08006d9d
 80032d4:	08006de9 	.word	0x08006de9
 80032d8:	08006e5f 	.word	0x08006e5f
 80032dc:	08006e6f 	.word	0x08006e6f
 80032e0:	08006f29 	.word	0x08006f29
 80032e4:	08006fb9 	.word	0x08006fb9
 80032e8:	0800708f 	.word	0x0800708f
 80032ec:	080070dd 	.word	0x080070dd
 80032f0:	08007145 	.word	0x08007145
 80032f4:	08007185 	.word	0x08007185
 80032f8:	08007e79 	.word	0x08007e79
 80032fc:	080071fb 	.word	0x080071fb
 8003300:	080072b5 	.word	0x080072b5
 8003304:	080072f9 	.word	0x080072f9
 8003308:	080073af 	.word	0x080073af
 800330c:	080073fd 	.word	0x080073fd
 8003310:	08007465 	.word	0x08007465
 8003314:	080074bb 	.word	0x080074bb
 8003318:	08007e79 	.word	0x08007e79
 800331c:	08007531 	.word	0x08007531
 8003320:	08007e79 	.word	0x08007e79
 8003324:	080075eb 	.word	0x080075eb
 8003328:	080076b1 	.word	0x080076b1
 800332c:	080076fd 	.word	0x080076fd
 8003330:	08007729 	.word	0x08007729
 8003334:	08007767 	.word	0x08007767
 8003338:	08007e79 	.word	0x08007e79
 800333c:	08007e79 	.word	0x08007e79
 8003340:	08007783 	.word	0x08007783
 8003344:	080077c5 	.word	0x080077c5
 8003348:	08007835 	.word	0x08007835
 800334c:	08007881 	.word	0x08007881
 8003350:	0800791b 	.word	0x0800791b
 8003354:	08007925 	.word	0x08007925
 8003358:	08007e79 	.word	0x08007e79
 800335c:	08007e79 	.word	0x08007e79
 8003360:	08007e79 	.word	0x08007e79
 8003364:	08007979 	.word	0x08007979
 8003368:	080079e9 	.word	0x080079e9
 800336c:	08007a35 	.word	0x08007a35
 8003370:	08007a63 	.word	0x08007a63
 8003374:	08007b0d 	.word	0x08007b0d
 8003378:	08007b2b 	.word	0x08007b2b
 800337c:	08007e79 	.word	0x08007e79
 8003380:	08007b37 	.word	0x08007b37
 8003384:	08007bc1 	.word	0x08007bc1
 8003388:	08007c31 	.word	0x08007c31
 800338c:	08007c7d 	.word	0x08007c7d
 8003390:	08007d17 	.word	0x08007d17
 8003394:	08007d21 	.word	0x08007d21
 8003398:	08007d79 	.word	0x08007d79
 800339c:	08007e79 	.word	0x08007e79
 80033a0:	08007e79 	.word	0x08007e79
 80033a4:	08007d85 	.word	0x08007d85
 80033a8:	08007e2d 	.word	0x08007e2d
	{
	case 0x00: /* NOP */
		break;

	case 0x01: /* LD BC, imm */
		gb->cpu_reg.c = __gb_read(gb, gb->cpu_reg.pc++);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	b291      	uxth	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	8791      	strh	r1, [r2, #60]	; 0x3c
 80033b8:	4619      	mov	r1, r3
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd fe9a 	bl	80010f4 <__gb_read>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		gb->cpu_reg.b = __gb_read(gb, gb->cpu_reg.pc++);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	b291      	uxth	r1, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	8791      	strh	r1, [r2, #60]	; 0x3c
 80033d6:	4619      	mov	r1, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7fd fe8b 	bl	80010f4 <__gb_read>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 80033e8:	f004 bd58 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x02: /* LD (BC), A */
		__gb_write(gb, gb->cpu_reg.bc, gb->cpu_reg.a);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80033f0:	4619      	mov	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033f8:	461a      	mov	r2, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe f8b4 	bl	8001568 <__gb_write>
		break;
 8003400:	f004 bd4c 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x03: /* INC BC */
		gb->cpu_reg.bc++;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003408:	3301      	adds	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	869a      	strh	r2, [r3, #52]	; 0x34
		break;
 8003410:	f004 bd44 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x04: /* INC B */
		gb->cpu_reg.b++;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341a:	3301      	adds	r3, #1
 800341c:	b2da      	uxtb	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.b == 0x00);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2d9      	uxtb	r1, r3
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800343a:	f361 13c7 	bfi	r3, r1, #7, #1
 800343e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003448:	f36f 1386 	bfc	r3, #6, #1
 800344c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.b & 0x0F) == 0x00);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2d9      	uxtb	r1, r3
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800346a:	f361 1345 	bfi	r3, r1, #5, #1
 800346e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003472:	f004 bd13 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x05: /* DEC B */
		gb->cpu_reg.b--;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800347c:	3b01      	subs	r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.b == 0x00);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2d9      	uxtb	r1, r3
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800349c:	f361 13c7 	bfi	r3, r1, #7, #1
 80034a0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80034aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ae:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.b & 0x0F) == 0x0F);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2d9      	uxtb	r1, r3
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80034cc:	f361 1345 	bfi	r3, r1, #5, #1
 80034d0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80034d4:	f004 bce2 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x06: /* LD B, imm */
		gb->cpu_reg.b = __gb_read(gb, gb->cpu_reg.pc++);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	b291      	uxth	r1, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	8791      	strh	r1, [r2, #60]	; 0x3c
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fe04 	bl	80010f4 <__gb_read>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 80034f6:	f004 bcd1 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x07: /* RLCA */
		gb->cpu_reg.a = (gb->cpu_reg.a << 1) | (gb->cpu_reg.a >> 7);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	b25a      	sxtb	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800350a:	09db      	lsrs	r3, r3, #7
 800350c:	b2db      	uxtb	r3, r3
 800350e:	b25b      	sxtb	r3, r3
 8003510:	4313      	orrs	r3, r2
 8003512:	b25b      	sxtb	r3, r3
 8003514:	b2da      	uxtb	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = 0;
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003522:	f36f 13c7 	bfc	r3, #7, #1
 8003526:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003530:	f36f 1386 	bfc	r3, #6, #1
 8003534:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800353e:	f36f 1345 	bfc	r3, #5, #1
 8003542:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (gb->cpu_reg.a & 0x01);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	b2d9      	uxtb	r1, r3
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003558:	f361 1304 	bfi	r3, r1, #4, #1
 800355c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003560:	f004 bc9c 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x08: /* LD (imm), SP */
	{
		uint16_t temp = __gb_read(gb, gb->cpu_reg.pc++);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	b291      	uxth	r1, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fdbe 	bl	80010f4 <__gb_read>
 8003578:	4603      	mov	r3, r0
 800357a:	817b      	strh	r3, [r7, #10]
		temp |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	b291      	uxth	r1, r2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fd fdb2 	bl	80010f4 <__gb_read>
 8003590:	4603      	mov	r3, r0
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	b21a      	sxth	r2, r3
 8003596:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800359a:	4313      	orrs	r3, r2
 800359c:	b21b      	sxth	r3, r3
 800359e:	817b      	strh	r3, [r7, #10]
		__gb_write(gb, temp++, gb->cpu_reg.sp & 0xFF);
 80035a0:	897b      	ldrh	r3, [r7, #10]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	817a      	strh	r2, [r7, #10]
 80035a6:	4619      	mov	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7fd ffd9 	bl	8001568 <__gb_write>
		__gb_write(gb, temp, gb->cpu_reg.sp >> 8);
 80035b6:	8979      	ldrh	r1, [r7, #10]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	b29b      	uxth	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7fd ffcf 	bl	8001568 <__gb_write>
		break;
 80035ca:	f004 bc67 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x09: /* ADD HL, BC */
	{
		uint_fast32_t temp = gb->cpu_reg.hl + gb->cpu_reg.bc;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80035d2:	461a      	mov	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80035d8:	4413      	add	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
		gb->cpu_reg.f_bits.n = 0;
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80035e2:	f36f 1386 	bfc	r3, #6, #1
 80035e6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(temp ^ gb->cpu_reg.hl ^ gb->cpu_reg.bc) & 0x1000 ? 1 : 0;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4053      	eors	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 80035f8:	4053      	eors	r3, r2
 80035fa:	0b1b      	lsrs	r3, r3, #12
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003608:	f361 1345 	bfi	r3, r1, #5, #1
 800360c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFFFF0000) ? 1 : 0;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2d9      	uxtb	r1, r3
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003626:	f361 1304 	bfi	r3, r1, #4, #1
 800362a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.hl = (temp & 0x0000FFFF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	871a      	strh	r2, [r3, #56]	; 0x38
		break;
 8003636:	f004 bc31 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x0A: /* LD A, (BC) */
		gb->cpu_reg.a = __gb_read(gb, gb->cpu_reg.bc);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fd fd57 	bl	80010f4 <__gb_read>
 8003646:	4603      	mov	r3, r0
 8003648:	461a      	mov	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8003650:	f004 bc24 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x0B: /* DEC BC */
		gb->cpu_reg.bc--;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	869a      	strh	r2, [r3, #52]	; 0x34
		break;
 8003660:	f004 bc1c 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x0C: /* INC C */
		gb->cpu_reg.c++;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800366a:	3301      	adds	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.c == 0x00);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf0c      	ite	eq
 800367e:	2301      	moveq	r3, #1
 8003680:	2300      	movne	r3, #0
 8003682:	b2d9      	uxtb	r1, r3
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800368a:	f361 13c7 	bfi	r3, r1, #7, #1
 800368e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003698:	f36f 1386 	bfc	r3, #6, #1
 800369c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.c & 0x0F) == 0x00);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2d9      	uxtb	r1, r3
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80036ba:	f361 1345 	bfi	r3, r1, #5, #1
 80036be:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80036c2:	f004 bbeb 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x0D: /* DEC C */
		gb->cpu_reg.c--;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.c == 0x00);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2d9      	uxtb	r1, r3
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80036ec:	f361 13c7 	bfi	r3, r1, #7, #1
 80036f0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80036fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036fe:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.c & 0x0F) == 0x0F);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	2b0f      	cmp	r3, #15
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2d9      	uxtb	r1, r3
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800371c:	f361 1345 	bfi	r3, r1, #5, #1
 8003720:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003724:	f004 bbba 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x0E: /* LD C, imm */
		gb->cpu_reg.c = __gb_read(gb, gb->cpu_reg.pc++);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	b291      	uxth	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd fcdc 	bl	80010f4 <__gb_read>
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
 8003746:	f004 bba9 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x0F: /* RRCA */
		gb->cpu_reg.f_bits.c = gb->cpu_reg.a & 0x01;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	b2d9      	uxtb	r1, r3
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800375c:	f361 1304 	bfi	r3, r1, #4, #1
 8003760:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (gb->cpu_reg.a >> 1) | (gb->cpu_reg.a << 7);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	b25a      	sxtb	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003776:	01db      	lsls	r3, r3, #7
 8003778:	b25b      	sxtb	r3, r3
 800377a:	4313      	orrs	r3, r2
 800377c:	b25b      	sxtb	r3, r3
 800377e:	b2da      	uxtb	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = 0;
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800378c:	f36f 13c7 	bfc	r3, #7, #1
 8003790:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800379a:	f36f 1386 	bfc	r3, #6, #1
 800379e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80037a8:	f36f 1345 	bfc	r3, #5, #1
 80037ac:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80037b0:	f004 bb74 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	case 0x10: /* STOP */
		//gb->gb_halt = 1;
		break;

	case 0x11: /* LD DE, imm */
		gb->cpu_reg.e = __gb_read(gb, gb->cpu_reg.pc++);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	b291      	uxth	r1, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	8791      	strh	r1, [r2, #60]	; 0x3c
 80037c0:	4619      	mov	r1, r3
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fc96 	bl	80010f4 <__gb_read>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461a      	mov	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		gb->cpu_reg.d = __gb_read(gb, gb->cpu_reg.pc++);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	b291      	uxth	r1, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	8791      	strh	r1, [r2, #60]	; 0x3c
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fd fc87 	bl	80010f4 <__gb_read>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 80037f0:	f004 bb54 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x12: /* LD (DE), A */
		__gb_write(gb, gb->cpu_reg.de, gb->cpu_reg.a);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f8:	4619      	mov	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003800:	461a      	mov	r2, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd feb0 	bl	8001568 <__gb_write>
		break;
 8003808:	f004 bb48 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x13: /* INC DE */
		gb->cpu_reg.de++;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003810:	3301      	adds	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	86da      	strh	r2, [r3, #54]	; 0x36
		break;
 8003818:	f004 bb40 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x14: /* INC D */
		gb->cpu_reg.d++;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003822:	3301      	adds	r3, #1
 8003824:	b2da      	uxtb	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.d == 0x00);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2d9      	uxtb	r1, r3
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003842:	f361 13c7 	bfi	r3, r1, #7, #1
 8003846:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003850:	f36f 1386 	bfc	r3, #6, #1
 8003854:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.d & 0x0F) == 0x00);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2d9      	uxtb	r1, r3
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003872:	f361 1345 	bfi	r3, r1, #5, #1
 8003876:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 800387a:	f004 bb0f 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x15: /* DEC D */
		gb->cpu_reg.d--;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003884:	3b01      	subs	r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.d == 0x00);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2d9      	uxtb	r1, r3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80038a4:	f361 13c7 	bfi	r3, r1, #7, #1
 80038a8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80038b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.d & 0x0F) == 0x0F);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80038c0:	f003 030f 	and.w	r3, r3, #15
 80038c4:	2b0f      	cmp	r3, #15
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2d9      	uxtb	r1, r3
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80038d4:	f361 1345 	bfi	r3, r1, #5, #1
 80038d8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80038dc:	f004 bade 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x16: /* LD D, imm */
		gb->cpu_reg.d = __gb_read(gb, gb->cpu_reg.pc++);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	b291      	uxth	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	8791      	strh	r1, [r2, #60]	; 0x3c
 80038ec:	4619      	mov	r1, r3
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fc00 	bl	80010f4 <__gb_read>
 80038f4:	4603      	mov	r3, r0
 80038f6:	461a      	mov	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 80038fe:	f004 bacd 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x17: /* RLA */
	{
		uint8_t temp = gb->cpu_reg.a;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003908:	74bb      	strb	r3, [r7, #18]
		gb->cpu_reg.a = (gb->cpu_reg.a << 1) | gb->cpu_reg.f_bits.c;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	b25a      	sxtb	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800391a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800391e:	b2db      	uxtb	r3, r3
 8003920:	b25b      	sxtb	r3, r3
 8003922:	4313      	orrs	r3, r2
 8003924:	b25b      	sxtb	r3, r3
 8003926:	b2da      	uxtb	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = 0;
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003934:	f36f 13c7 	bfc	r3, #7, #1
 8003938:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003942:	f36f 1386 	bfc	r3, #6, #1
 8003946:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003950:	f36f 1345 	bfc	r3, #5, #1
 8003954:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp >> 7) & 0x01;
 8003958:	7cbb      	ldrb	r3, [r7, #18]
 800395a:	09db      	lsrs	r3, r3, #7
 800395c:	b2db      	uxtb	r3, r3
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	b2d9      	uxtb	r1, r3
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800396a:	f361 1304 	bfi	r3, r1, #4, #1
 800396e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003972:	f004 ba93 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x18: /* JR imm */
	{
		int8_t temp = (int8_t) __gb_read(gb, gb->cpu_reg.pc++);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	b291      	uxth	r1, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7fd fbb5 	bl	80010f4 <__gb_read>
 800398a:	4603      	mov	r3, r0
 800398c:	74fb      	strb	r3, [r7, #19]
		gb->cpu_reg.pc += temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003992:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003996:	b29b      	uxth	r3, r3
 8003998:	4413      	add	r3, r2
 800399a:	b29a      	uxth	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 80039a0:	f004 ba7c 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x19: /* ADD HL, DE */
	{
		uint_fast32_t temp = gb->cpu_reg.hl + gb->cpu_reg.de;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80039a8:	461a      	mov	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ae:	4413      	add	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]
		gb->cpu_reg.f_bits.n = 0;
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80039b8:	f36f 1386 	bfc	r3, #6, #1
 80039bc:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(temp ^ gb->cpu_reg.hl ^ gb->cpu_reg.de) & 0x1000 ? 1 : 0;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80039c4:	461a      	mov	r2, r3
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	4053      	eors	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 80039ce:	4053      	eors	r3, r2
 80039d0:	0b1b      	lsrs	r3, r3, #12
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80039de:	f361 1345 	bfi	r3, r1, #5, #1
 80039e2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFFFF0000) ? 1 : 0;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2d9      	uxtb	r1, r3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80039fc:	f361 1304 	bfi	r3, r1, #4, #1
 8003a00:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.hl = (temp & 0x0000FFFF);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	871a      	strh	r2, [r3, #56]	; 0x38
		break;
 8003a0c:	f004 ba46 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x1A: /* LD A, (DE) */
		gb->cpu_reg.a = __gb_read(gb, gb->cpu_reg.de);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd fb6c 	bl	80010f4 <__gb_read>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	461a      	mov	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8003a26:	f004 ba39 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x1B: /* DEC DE */
		gb->cpu_reg.de--;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	86da      	strh	r2, [r3, #54]	; 0x36
		break;
 8003a36:	f004 ba31 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x1C: /* INC E */
		gb->cpu_reg.e++;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a40:	3301      	adds	r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.e == 0x00);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2d9      	uxtb	r1, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003a60:	f361 13c7 	bfi	r3, r1, #7, #1
 8003a64:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003a6e:	f36f 1386 	bfc	r3, #6, #1
 8003a72:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.e & 0x0F) == 0x00);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2d9      	uxtb	r1, r3
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003a90:	f361 1345 	bfi	r3, r1, #5, #1
 8003a94:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003a98:	f004 ba00 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x1D: /* DEC E */
		gb->cpu_reg.e--;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.e == 0x00);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2d9      	uxtb	r1, r3
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003ac2:	f361 13c7 	bfi	r3, r1, #7, #1
 8003ac6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.e & 0x0F) == 0x0F);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	2b0f      	cmp	r3, #15
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	2300      	movne	r3, #0
 8003aea:	b2d9      	uxtb	r1, r3
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003af2:	f361 1345 	bfi	r3, r1, #5, #1
 8003af6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003afa:	f004 b9cf 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x1E: /* LD E, imm */
		gb->cpu_reg.e = __gb_read(gb, gb->cpu_reg.pc++);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	b291      	uxth	r1, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7fd faf1 	bl	80010f4 <__gb_read>
 8003b12:	4603      	mov	r3, r0
 8003b14:	461a      	mov	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		break;
 8003b1c:	f004 b9be 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x1F: /* RRA */
	{
		uint8_t temp = gb->cpu_reg.a;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b26:	767b      	strb	r3, [r7, #25]
		gb->cpu_reg.a = gb->cpu_reg.a >> 1 | (gb->cpu_reg.f_bits.c << 7);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	b25a      	sxtb	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b3a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	01db      	lsls	r3, r3, #7
 8003b42:	b25b      	sxtb	r3, r3
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = 0;
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003b56:	f36f 13c7 	bfc	r3, #7, #1
 8003b5a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003b64:	f36f 1386 	bfc	r3, #6, #1
 8003b68:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003b72:	f36f 1345 	bfc	r3, #5, #1
 8003b76:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = temp & 0x1;
 8003b7a:	7e7b      	ldrb	r3, [r7, #25]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	b2d9      	uxtb	r1, r3
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003b88:	f361 1304 	bfi	r3, r1, #4, #1
 8003b8c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003b90:	f004 b984 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x20: /* JP NZ, imm */
		if(!gb->cpu_reg.f_bits.z)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d11b      	bne.n	8003bdc <__gb_step_cpu+0xe20>
		{
			int8_t temp = (int8_t) __gb_read(gb, gb->cpu_reg.pc++);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	b291      	uxth	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd fa9e 	bl	80010f4 <__gb_read>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	76bb      	strb	r3, [r7, #26]
			gb->cpu_reg.pc += temp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003bc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 4;
 8003bce:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc++;

		break;
 8003bd8:	f004 b960 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc++;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003be0:	3301      	adds	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8003be8:	f004 b958 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x21: /* LD HL, imm */
		gb->cpu_reg.l = __gb_read(gb, gb->cpu_reg.pc++);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	b291      	uxth	r1, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fa7a 	bl	80010f4 <__gb_read>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		gb->cpu_reg.h = __gb_read(gb, gb->cpu_reg.pc++);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	b291      	uxth	r1, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fd fa6b 	bl	80010f4 <__gb_read>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 8003c28:	f004 b938 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x22: /* LDI (HL), A */
		__gb_write(gb, gb->cpu_reg.hl, gb->cpu_reg.a);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003c30:	4619      	mov	r1, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fc94 	bl	8001568 <__gb_write>
		gb->cpu_reg.hl++;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003c44:	3301      	adds	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	871a      	strh	r2, [r3, #56]	; 0x38
		break;
 8003c4c:	f004 b926 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x23: /* INC HL */
		gb->cpu_reg.hl++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003c54:	3301      	adds	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	871a      	strh	r2, [r3, #56]	; 0x38
		break;
 8003c5c:	f004 b91e 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x24: /* INC H */
		gb->cpu_reg.h++;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c66:	3301      	adds	r3, #1
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.h == 0x00);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bf0c      	ite	eq
 8003c7a:	2301      	moveq	r3, #1
 8003c7c:	2300      	movne	r3, #0
 8003c7e:	b2d9      	uxtb	r1, r3
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003c86:	f361 13c7 	bfi	r3, r1, #7, #1
 8003c8a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003c94:	f36f 1386 	bfc	r3, #6, #1
 8003c98:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.h & 0x0F) == 0x00);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bf0c      	ite	eq
 8003caa:	2301      	moveq	r3, #1
 8003cac:	2300      	movne	r3, #0
 8003cae:	b2d9      	uxtb	r1, r3
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003cb6:	f361 1345 	bfi	r3, r1, #5, #1
 8003cba:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003cbe:	f004 b8ed 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x25: /* DEC H */
		gb->cpu_reg.h--;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.h == 0x00);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf0c      	ite	eq
 8003cdc:	2301      	moveq	r3, #1
 8003cde:	2300      	movne	r3, #0
 8003ce0:	b2d9      	uxtb	r1, r3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003ce8:	f361 13c7 	bfi	r3, r1, #7, #1
 8003cec:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.h & 0x0F) == 0x0F);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	2b0f      	cmp	r3, #15
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2d9      	uxtb	r1, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003d18:	f361 1345 	bfi	r3, r1, #5, #1
 8003d1c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003d20:	f004 b8bc 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x26: /* LD H, imm */
		gb->cpu_reg.h = __gb_read(gb, gb->cpu_reg.pc++);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	b291      	uxth	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003d30:	4619      	mov	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd f9de 	bl	80010f4 <__gb_read>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 8003d42:	f004 b8ab 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x27: /* DAA */
	{
		uint16_t a = gb->cpu_reg.a;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d4c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

		if(gb->cpu_reg.f_bits.n)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01c      	beq.n	8003d9a <__gb_step_cpu+0xfde>
		{
			if(gb->cpu_reg.f_bits.h)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d006      	beq.n	8003d7e <__gb_step_cpu+0xfc2>
				a = (a - 0x06) & 0xFF;
 8003d70:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003d74:	3b06      	subs	r3, #6
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

			if(gb->cpu_reg.f_bits.c)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d029      	beq.n	8003de2 <__gb_step_cpu+0x1026>
				a -= 0x60;
 8003d8e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003d92:	3b60      	subs	r3, #96	; 0x60
 8003d94:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8003d98:	e023      	b.n	8003de2 <__gb_step_cpu+0x1026>
		}
		else
		{
			if(gb->cpu_reg.f_bits.h || (a & 0x0F) > 9)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d105      	bne.n	8003db6 <__gb_step_cpu+0xffa>
 8003daa:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	2b09      	cmp	r3, #9
 8003db4:	dd04      	ble.n	8003dc0 <__gb_step_cpu+0x1004>
				a += 0x06;
 8003db6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003dba:	3306      	adds	r3, #6
 8003dbc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

			if(gb->cpu_reg.f_bits.c || a > 0x9F)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <__gb_step_cpu+0x101c>
 8003dd0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003dd4:	2b9f      	cmp	r3, #159	; 0x9f
 8003dd6:	d904      	bls.n	8003de2 <__gb_step_cpu+0x1026>
				a += 0x60;
 8003dd8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003ddc:	3360      	adds	r3, #96	; 0x60
 8003dde:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		}

		if((a & 0x100) == 0x100)
 8003de2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <__gb_step_cpu+0x1040>
			gb->cpu_reg.f_bits.c = 1;
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003df4:	f043 0310 	orr.w	r3, r3, #16
 8003df8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

		gb->cpu_reg.a = a;
 8003dfc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bf0c      	ite	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	2300      	movne	r3, #0
 8003e16:	b2d9      	uxtb	r1, r3
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003e1e:	f361 13c7 	bfi	r3, r1, #7, #1
 8003e22:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003e2c:	f36f 1345 	bfc	r3, #5, #1
 8003e30:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c

		break;
 8003e34:	f004 b832 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x28: /* JP Z, imm */
		if(gb->cpu_reg.f_bits.z)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01b      	beq.n	8003e80 <__gb_step_cpu+0x10c4>
		{
			int8_t temp = (int8_t) __gb_read(gb, gb->cpu_reg.pc++);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	b291      	uxth	r1, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003e54:	4619      	mov	r1, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd f94c 	bl	80010f4 <__gb_read>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	76fb      	strb	r3, [r7, #27]
			gb->cpu_reg.pc += temp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003e64:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 4;
 8003e72:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003e76:	3304      	adds	r3, #4
 8003e78:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc++;

		break;
 8003e7c:	f004 b80e 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc++;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003e84:	3301      	adds	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8003e8c:	f004 b806 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x29: /* ADD HL, HL */
	{
		uint_fast32_t temp = gb->cpu_reg.hl + gb->cpu_reg.hl;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
		gb->cpu_reg.f_bits.n = 0;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003e9e:	f36f 1386 	bfc	r3, #6, #1
 8003ea2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = (temp & 0x1000) ? 1 : 0;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	0b1b      	lsrs	r3, r3, #12
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	b2d9      	uxtb	r1, r3
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003eb6:	f361 1345 	bfi	r3, r1, #5, #1
 8003eba:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFFFF0000) ? 1 : 0;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2d9      	uxtb	r1, r3
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003ed4:	f361 1304 	bfi	r3, r1, #4, #1
 8003ed8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.hl = (temp & 0x0000FFFF);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	871a      	strh	r2, [r3, #56]	; 0x38
		break;
 8003ee4:	f003 bfda 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x2A: /* LD A, (HL+) */
		gb->cpu_reg.a = __gb_read(gb, gb->cpu_reg.hl++);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	b291      	uxth	r1, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	8711      	strh	r1, [r2, #56]	; 0x38
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd f8fc 	bl	80010f4 <__gb_read>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8003f06:	f003 bfc9 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x2B: /* DEC HL */
		gb->cpu_reg.hl--;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	871a      	strh	r2, [r3, #56]	; 0x38
		break;
 8003f16:	f003 bfc1 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x2C: /* INC L */
		gb->cpu_reg.l++;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f20:	3301      	adds	r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.l == 0x00);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2d9      	uxtb	r1, r3
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003f40:	f361 13c7 	bfi	r3, r1, #7, #1
 8003f44:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003f4e:	f36f 1386 	bfc	r3, #6, #1
 8003f52:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.l & 0x0F) == 0x00);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2d9      	uxtb	r1, r3
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003f70:	f361 1345 	bfi	r3, r1, #5, #1
 8003f74:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003f78:	f003 bf90 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x2D: /* DEC L */
		gb->cpu_reg.l--;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.l == 0x00);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bf0c      	ite	eq
 8003f96:	2301      	moveq	r3, #1
 8003f98:	2300      	movne	r3, #0
 8003f9a:	b2d9      	uxtb	r1, r3
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003fa2:	f361 13c7 	bfi	r3, r1, #7, #1
 8003fa6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.l & 0x0F) == 0x0F);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2d9      	uxtb	r1, r3
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8003fd2:	f361 1345 	bfi	r3, r1, #5, #1
 8003fd6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8003fda:	f003 bf5f 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x2E: /* LD L, imm */
		gb->cpu_reg.l = __gb_read(gb, gb->cpu_reg.pc++);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	b291      	uxth	r1, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	8791      	strh	r1, [r2, #60]	; 0x3c
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7fd f881 	bl	80010f4 <__gb_read>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
 8003ffc:	f003 bf4e 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x2F: /* CPL */
		gb->cpu_reg.a = ~gb->cpu_reg.a;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004006:	43db      	mvns	r3, r3
 8004008:	b2da      	uxtb	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.n = 1;
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004024:	f043 0320 	orr.w	r3, r3, #32
 8004028:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 800402c:	f003 bf36 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x30: /* JP NC, imm */
		if(!gb->cpu_reg.f_bits.c)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d11c      	bne.n	800407a <__gb_step_cpu+0x12be>
		{
			int8_t temp = (int8_t) __gb_read(gb, gb->cpu_reg.pc++);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	b291      	uxth	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	8791      	strh	r1, [r2, #60]	; 0x3c
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd f850 	bl	80010f4 <__gb_read>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 3020 	strb.w	r3, [r7, #32]
			gb->cpu_reg.pc += temp;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800405e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8004062:	b29b      	uxth	r3, r3
 8004064:	4413      	add	r3, r2
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 4;
 800406c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8004070:	3304      	adds	r3, #4
 8004072:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc++;

		break;
 8004076:	f003 bf11 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc++;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800407e:	3301      	adds	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8004086:	f003 bf09 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x31: /* LD SP, imm */
		gb->cpu_reg.sp = __gb_read(gb, gb->cpu_reg.pc++);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	b291      	uxth	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	8791      	strh	r1, [r2, #60]	; 0x3c
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7fd f82b 	bl	80010f4 <__gb_read>
 800409e:	4603      	mov	r3, r0
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	875a      	strh	r2, [r3, #58]	; 0x3a
		gb->cpu_reg.sp |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	b291      	uxth	r1, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	8791      	strh	r1, [r2, #60]	; 0x3c
 80040b2:	4619      	mov	r1, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fd f81d 	bl	80010f4 <__gb_read>
 80040ba:	4603      	mov	r3, r0
 80040bc:	0219      	lsls	r1, r3, #8
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80040c2:	b21a      	sxth	r2, r3
 80040c4:	b20b      	sxth	r3, r1
 80040c6:	4313      	orrs	r3, r2
 80040c8:	b21b      	sxth	r3, r3
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	875a      	strh	r2, [r3, #58]	; 0x3a
		break;
 80040d0:	f003 bee4 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x32: /* LD (HL), A */
		__gb_write(gb, gb->cpu_reg.hl, gb->cpu_reg.a);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80040d8:	4619      	mov	r1, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040e0:	461a      	mov	r2, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fd fa40 	bl	8001568 <__gb_write>
		gb->cpu_reg.hl--;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	871a      	strh	r2, [r3, #56]	; 0x38
		break;
 80040f4:	f003 bed2 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x33: /* INC SP */
		gb->cpu_reg.sp++;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80040fc:	3301      	adds	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	875a      	strh	r2, [r3, #58]	; 0x3a
		break;
 8004104:	f003 beca 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x34: /* INC (HL) */
	{
		uint8_t temp = __gb_read(gb, gb->cpu_reg.hl) + 1;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc fff0 	bl	80010f4 <__gb_read>
 8004114:	4603      	mov	r3, r0
 8004116:	3301      	adds	r3, #1
 8004118:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		gb->cpu_reg.f_bits.z = (temp == 0x00);
 800411c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2d9      	uxtb	r1, r3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004130:	f361 13c7 	bfi	r3, r1, #7, #1
 8004134:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800413e:	f36f 1386 	bfc	r3, #6, #1
 8004142:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((temp & 0x0F) == 0x00);
 8004146:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2d9      	uxtb	r1, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800415e:	f361 1345 	bfi	r3, r1, #5, #1
 8004162:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		__gb_write(gb, gb->cpu_reg.hl, temp);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800416a:	4619      	mov	r1, r3
 800416c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004170:	461a      	mov	r2, r3
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fd f9f8 	bl	8001568 <__gb_write>
		break;
 8004178:	f003 be90 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x35: /* DEC (HL) */
	{
		uint8_t temp = __gb_read(gb, gb->cpu_reg.hl) - 1;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004180:	4619      	mov	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fc ffb6 	bl	80010f4 <__gb_read>
 8004188:	4603      	mov	r3, r0
 800418a:	3b01      	subs	r3, #1
 800418c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		gb->cpu_reg.f_bits.z = (temp == 0x00);
 8004190:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2d9      	uxtb	r1, r3
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80041a4:	f361 13c7 	bfi	r3, r1, #7, #1
 80041a8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80041b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((temp & 0x0F) == 0x0F);
 80041ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	bf0c      	ite	eq
 80041c6:	2301      	moveq	r3, #1
 80041c8:	2300      	movne	r3, #0
 80041ca:	b2d9      	uxtb	r1, r3
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80041d2:	f361 1345 	bfi	r3, r1, #5, #1
 80041d6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		__gb_write(gb, gb->cpu_reg.hl, temp);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80041de:	4619      	mov	r1, r3
 80041e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80041e4:	461a      	mov	r2, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fd f9be 	bl	8001568 <__gb_write>
		break;
 80041ec:	f003 be56 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x36: /* LD (HL), imm */
		__gb_write(gb, gb->cpu_reg.hl, __gb_read(gb, gb->cpu_reg.pc++));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80041f4:	461c      	mov	r4, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	b291      	uxth	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	8791      	strh	r1, [r2, #60]	; 0x3c
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fc ff75 	bl	80010f4 <__gb_read>
 800420a:	4603      	mov	r3, r0
 800420c:	461a      	mov	r2, r3
 800420e:	4621      	mov	r1, r4
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7fd f9a9 	bl	8001568 <__gb_write>
		break;
 8004216:	f003 be41 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x37: /* SCF */
		gb->cpu_reg.f_bits.n = 0;
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004220:	f36f 1386 	bfc	r3, #6, #1
 8004224:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800422e:	f36f 1345 	bfc	r3, #5, #1
 8004232:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 1;
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800423c:	f043 0310 	orr.w	r3, r3, #16
 8004240:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8004244:	f003 be2a 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x38: /* JP C, imm */
		if(gb->cpu_reg.f_bits.c)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01c      	beq.n	8004292 <__gb_step_cpu+0x14d6>
		{
			int8_t temp = (int8_t) __gb_read(gb, gb->cpu_reg.pc++);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	b291      	uxth	r1, r2
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	8791      	strh	r1, [r2, #60]	; 0x3c
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fc ff44 	bl	80010f4 <__gb_read>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			gb->cpu_reg.pc += temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8004276:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800427a:	b29b      	uxth	r3, r3
 800427c:	4413      	add	r3, r2
 800427e:	b29a      	uxth	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 4;
 8004284:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8004288:	3304      	adds	r3, #4
 800428a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc++;

		break;
 800428e:	f003 be05 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc++;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004296:	3301      	adds	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 800429e:	f003 bdfd 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x39: /* ADD HL, SP */
	{
		uint_fast32_t temp = gb->cpu_reg.hl + gb->cpu_reg.sp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80042a6:	461a      	mov	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80042ac:	4413      	add	r3, r2
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
		gb->cpu_reg.f_bits.n = 0;
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80042b6:	f36f 1386 	bfc	r3, #6, #1
 80042ba:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			((gb->cpu_reg.hl & 0xFFF) + (gb->cpu_reg.sp & 0xFFF)) & 0x1000 ? 1 : 0;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80042c2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80042ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ce:	4413      	add	r3, r2
 80042d0:	131b      	asrs	r3, r3, #12
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80042de:	f361 1345 	bfi	r3, r1, #5, #1
 80042e2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = temp & 0x10000 ? 1 : 0;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	0c1b      	lsrs	r3, r3, #16
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	b2d9      	uxtb	r1, r3
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80042f6:	f361 1304 	bfi	r3, r1, #4, #1
 80042fa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.hl = (uint16_t)temp;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	b29a      	uxth	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	871a      	strh	r2, [r3, #56]	; 0x38
		break;
 8004306:	f003 bdc9 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x3A: /* LD A, (HL) */
		gb->cpu_reg.a = __gb_read(gb, gb->cpu_reg.hl--);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800430e:	1e5a      	subs	r2, r3, #1
 8004310:	b291      	uxth	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	8711      	strh	r1, [r2, #56]	; 0x38
 8004316:	4619      	mov	r1, r3
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7fc feeb 	bl	80010f4 <__gb_read>
 800431e:	4603      	mov	r3, r0
 8004320:	461a      	mov	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004328:	f003 bdb8 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x3B: /* DEC SP */
		gb->cpu_reg.sp--;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	875a      	strh	r2, [r3, #58]	; 0x3a
		break;
 8004338:	f003 bdb0 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x3C: /* INC A */
		gb->cpu_reg.a++;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004342:	3301      	adds	r3, #1
 8004344:	b2da      	uxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004352:	2b00      	cmp	r3, #0
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2d9      	uxtb	r1, r3
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004362:	f361 13c7 	bfi	r3, r1, #7, #1
 8004366:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004370:	f36f 1386 	bfc	r3, #6, #1
 8004374:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.a & 0x0F) == 0x00);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	2b00      	cmp	r3, #0
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2d9      	uxtb	r1, r3
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004392:	f361 1345 	bfi	r3, r1, #5, #1
 8004396:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 800439a:	f003 bd7f 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x3D: /* DEC A */
		gb->cpu_reg.a--;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2d9      	uxtb	r1, r3
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80043c4:	f361 13c7 	bfi	r3, r1, #7, #1
 80043c8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80043d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.a & 0x0F) == 0x0F);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	2b0f      	cmp	r3, #15
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2d9      	uxtb	r1, r3
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80043f4:	f361 1345 	bfi	r3, r1, #5, #1
 80043f8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80043fc:	f003 bd4e 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x3E: /* LD A, imm */
		gb->cpu_reg.a = __gb_read(gb, gb->cpu_reg.pc++);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	b291      	uxth	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	8791      	strh	r1, [r2, #60]	; 0x3c
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fe70 	bl	80010f4 <__gb_read>
 8004414:	4603      	mov	r3, r0
 8004416:	461a      	mov	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 800441e:	f003 bd3d 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x3F: /* CCF */
		gb->cpu_reg.f_bits.n = 0;
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004428:	f36f 1386 	bfc	r3, #6, #1
 800442c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004436:	f36f 1345 	bfc	r3, #5, #1
 800443a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = ~gb->cpu_reg.f_bits.c;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004444:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	b2d9      	uxtb	r1, r3
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800445a:	f361 1304 	bfi	r3, r1, #4, #1
 800445e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8004462:	f003 bd1b 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x40: /* LD B, B */
		break;

	case 0x41: /* LD B, C */
		gb->cpu_reg.b = gb->cpu_reg.c;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8004472:	f003 bd13 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x42: /* LD B, D */
		gb->cpu_reg.b = gb->cpu_reg.d;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8004482:	f003 bd0b 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x43: /* LD B, E */
		gb->cpu_reg.b = gb->cpu_reg.e;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8004492:	f003 bd03 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x44: /* LD B, H */
		gb->cpu_reg.b = gb->cpu_reg.h;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 80044a2:	f003 bcfb 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x45: /* LD B, L */
		gb->cpu_reg.b = gb->cpu_reg.l;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 80044b2:	f003 bcf3 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x46: /* LD B, (HL) */
		gb->cpu_reg.b = __gb_read(gb, gb->cpu_reg.hl);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80044ba:	4619      	mov	r1, r3
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fc fe19 	bl	80010f4 <__gb_read>
 80044c2:	4603      	mov	r3, r0
 80044c4:	461a      	mov	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 80044cc:	f003 bce6 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x47: /* LD B, A */
		gb->cpu_reg.b = gb->cpu_reg.a;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 80044dc:	f003 bcde 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x48: /* LD C, B */
		gb->cpu_reg.c = gb->cpu_reg.b;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
 80044ec:	f003 bcd6 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x49: /* LD C, C */
		break;

	case 0x4A: /* LD C, D */
		gb->cpu_reg.c = gb->cpu_reg.d;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
 80044fc:	f003 bcce 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x4B: /* LD C, E */
		gb->cpu_reg.c = gb->cpu_reg.e;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
 800450c:	f003 bcc6 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x4C: /* LD C, H */
		gb->cpu_reg.c = gb->cpu_reg.h;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
 800451c:	f003 bcbe 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x4D: /* LD C, L */
		gb->cpu_reg.c = gb->cpu_reg.l;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
 800452c:	f003 bcb6 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x4E: /* LD C, (HL) */
		gb->cpu_reg.c = __gb_read(gb, gb->cpu_reg.hl);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004534:	4619      	mov	r1, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7fc fddc 	bl	80010f4 <__gb_read>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
 8004546:	f003 bca9 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x4F: /* LD C, A */
		gb->cpu_reg.c = gb->cpu_reg.a;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		break;
 8004556:	f003 bca1 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x50: /* LD D, B */
		gb->cpu_reg.d = gb->cpu_reg.b;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 8004566:	f003 bc99 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x51: /* LD D, C */
		gb->cpu_reg.d = gb->cpu_reg.c;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 8004576:	f003 bc91 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x52: /* LD D, D */
		break;

	case 0x53: /* LD D, E */
		gb->cpu_reg.d = gb->cpu_reg.e;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 8004586:	f003 bc89 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x54: /* LD D, H */
		gb->cpu_reg.d = gb->cpu_reg.h;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 8004596:	f003 bc81 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x55: /* LD D, L */
		gb->cpu_reg.d = gb->cpu_reg.l;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 80045a6:	f003 bc79 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x56: /* LD D, (HL) */
		gb->cpu_reg.d = __gb_read(gb, gb->cpu_reg.hl);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fc fd9f 	bl	80010f4 <__gb_read>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 80045c0:	f003 bc6c 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x57: /* LD D, A */
		gb->cpu_reg.d = gb->cpu_reg.a;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 80045d0:	f003 bc64 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x58: /* LD E, B */
		gb->cpu_reg.e = gb->cpu_reg.b;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		break;
 80045e0:	f003 bc5c 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x59: /* LD E, C */
		gb->cpu_reg.e = gb->cpu_reg.c;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		break;
 80045f0:	f003 bc54 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x5A: /* LD E, D */
		gb->cpu_reg.e = gb->cpu_reg.d;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		break;
 8004600:	f003 bc4c 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x5B: /* LD E, E */
		break;

	case 0x5C: /* LD E, H */
		gb->cpu_reg.e = gb->cpu_reg.h;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		break;
 8004610:	f003 bc44 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x5D: /* LD E, L */
		gb->cpu_reg.e = gb->cpu_reg.l;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		break;
 8004620:	f003 bc3c 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x5E: /* LD E, (HL) */
		gb->cpu_reg.e = __gb_read(gb, gb->cpu_reg.hl);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004628:	4619      	mov	r1, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fd62 	bl	80010f4 <__gb_read>
 8004630:	4603      	mov	r3, r0
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		break;
 800463a:	f003 bc2f 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x5F: /* LD E, A */
		gb->cpu_reg.e = gb->cpu_reg.a;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		break;
 800464a:	f003 bc27 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x60: /* LD H, B */
		gb->cpu_reg.h = gb->cpu_reg.b;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 800465a:	f003 bc1f 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x61: /* LD H, C */
		gb->cpu_reg.h = gb->cpu_reg.c;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 800466a:	f003 bc17 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x62: /* LD H, D */
		gb->cpu_reg.h = gb->cpu_reg.d;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 800467a:	f003 bc0f 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x63: /* LD H, E */
		gb->cpu_reg.h = gb->cpu_reg.e;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 800468a:	f003 bc07 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x64: /* LD H, H */
		break;

	case 0x65: /* LD H, L */
		gb->cpu_reg.h = gb->cpu_reg.l;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 800469a:	f003 bbff 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x66: /* LD H, (HL) */
		gb->cpu_reg.h = __gb_read(gb, gb->cpu_reg.hl);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80046a2:	4619      	mov	r1, r3
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fc fd25 	bl	80010f4 <__gb_read>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 80046b4:	f003 bbf2 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x67: /* LD H, A */
		gb->cpu_reg.h = gb->cpu_reg.a;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 80046c4:	f003 bbea 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x68: /* LD L, B */
		gb->cpu_reg.l = gb->cpu_reg.b;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
 80046d4:	f003 bbe2 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x69: /* LD L, C */
		gb->cpu_reg.l = gb->cpu_reg.c;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
 80046e4:	f003 bbda 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x6A: /* LD L, D */
		gb->cpu_reg.l = gb->cpu_reg.d;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
 80046f4:	f003 bbd2 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x6B: /* LD L, E */
		gb->cpu_reg.l = gb->cpu_reg.e;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
 8004704:	f003 bbca 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x6C: /* LD L, H */
		gb->cpu_reg.l = gb->cpu_reg.h;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
 8004714:	f003 bbc2 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x6D: /* LD L, L */
		break;

	case 0x6E: /* LD L, (HL) */
		gb->cpu_reg.l = __gb_read(gb, gb->cpu_reg.hl);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800471c:	4619      	mov	r1, r3
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fce8 	bl	80010f4 <__gb_read>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
 800472e:	f003 bbb5 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x6F: /* LD L, A */
		gb->cpu_reg.l = gb->cpu_reg.a;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		break;
 800473e:	f003 bbad 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x70: /* LD (HL), B */
		__gb_write(gb, gb->cpu_reg.hl, gb->cpu_reg.b);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004746:	4619      	mov	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800474e:	461a      	mov	r2, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7fc ff09 	bl	8001568 <__gb_write>
		break;
 8004756:	f003 bba1 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x71: /* LD (HL), C */
		__gb_write(gb, gb->cpu_reg.hl, gb->cpu_reg.c);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800475e:	4619      	mov	r1, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004766:	461a      	mov	r2, r3
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7fc fefd 	bl	8001568 <__gb_write>
		break;
 800476e:	f003 bb95 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x72: /* LD (HL), D */
		__gb_write(gb, gb->cpu_reg.hl, gb->cpu_reg.d);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004776:	4619      	mov	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800477e:	461a      	mov	r2, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fc fef1 	bl	8001568 <__gb_write>
		break;
 8004786:	f003 bb89 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x73: /* LD (HL), E */
		__gb_write(gb, gb->cpu_reg.hl, gb->cpu_reg.e);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800478e:	4619      	mov	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004796:	461a      	mov	r2, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fc fee5 	bl	8001568 <__gb_write>
		break;
 800479e:	f003 bb7d 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x74: /* LD (HL), H */
		__gb_write(gb, gb->cpu_reg.hl, gb->cpu_reg.h);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80047a6:	4619      	mov	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047ae:	461a      	mov	r2, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fc fed9 	bl	8001568 <__gb_write>
		break;
 80047b6:	f003 bb71 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x75: /* LD (HL), L */
		__gb_write(gb, gb->cpu_reg.hl, gb->cpu_reg.l);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80047be:	4619      	mov	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047c6:	461a      	mov	r2, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7fc fecd 	bl	8001568 <__gb_write>
		break;
 80047ce:	f003 bb65 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x76: /* HALT */
		/* TODO: Emulate HALT bug? */
		gb->gb_halt = 1;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	7e13      	ldrb	r3, [r2, #24]
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	7613      	strb	r3, [r2, #24]
		break;
 80047dc:	f003 bb5e 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x77: /* LD (HL), A */
		__gb_write(gb, gb->cpu_reg.hl, gb->cpu_reg.a);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80047e4:	4619      	mov	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047ec:	461a      	mov	r2, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc feba 	bl	8001568 <__gb_write>
		break;
 80047f4:	f003 bb52 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x78: /* LD A, B */
		gb->cpu_reg.a = gb->cpu_reg.b;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004804:	f003 bb4a 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x79: /* LD A, C */
		gb->cpu_reg.a = gb->cpu_reg.c;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004814:	f003 bb42 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x7A: /* LD A, D */
		gb->cpu_reg.a = gb->cpu_reg.d;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004824:	f003 bb3a 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x7B: /* LD A, E */
		gb->cpu_reg.a = gb->cpu_reg.e;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004834:	f003 bb32 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x7C: /* LD A, H */
		gb->cpu_reg.a = gb->cpu_reg.h;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004844:	f003 bb2a 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x7D: /* LD A, L */
		gb->cpu_reg.a = gb->cpu_reg.l;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004854:	f003 bb22 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x7E: /* LD A, (HL) */
		gb->cpu_reg.a = __gb_read(gb, gb->cpu_reg.hl);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc fc48 	bl	80010f4 <__gb_read>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 800486e:	f003 bb15 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	case 0x7F: /* LD A, A */
		break;

	case 0x80: /* ADD A, B */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.b;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004880:	b29b      	uxth	r3, r3
 8004882:	4413      	add	r3, r2
 8004884:	853b      	strh	r3, [r7, #40]	; 0x28
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004886:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2d9      	uxtb	r1, r3
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800489a:	f361 13c7 	bfi	r3, r1, #7, #1
 800489e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80048a8:	f36f 1386 	bfc	r3, #6, #1
 80048ac:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.b ^ temp) & 0x10 ? 1 : 0;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048bc:	4053      	eors	r3, r2
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048c4:	4053      	eors	r3, r2
 80048c6:	111b      	asrs	r3, r3, #4
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80048d4:	f361 1345 	bfi	r3, r1, #5, #1
 80048d8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80048dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2d9      	uxtb	r1, r3
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80048f2:	f361 1304 	bfi	r3, r1, #4, #1
 80048f6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 80048fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004904:	f003 baca 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x81: /* ADD A, C */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.c;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004916:	b29b      	uxth	r3, r3
 8004918:	4413      	add	r3, r2
 800491a:	857b      	strh	r3, [r7, #42]	; 0x2a
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 800491c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2d9      	uxtb	r1, r3
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004930:	f361 13c7 	bfi	r3, r1, #7, #1
 8004934:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800493e:	f36f 1386 	bfc	r3, #6, #1
 8004942:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.c ^ temp) & 0x10 ? 1 : 0;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004952:	4053      	eors	r3, r2
 8004954:	b2db      	uxtb	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800495a:	4053      	eors	r3, r2
 800495c:	111b      	asrs	r3, r3, #4
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800496a:	f361 1345 	bfi	r3, r1, #5, #1
 800496e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004972:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004974:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf14      	ite	ne
 800497c:	2301      	movne	r3, #1
 800497e:	2300      	moveq	r3, #0
 8004980:	b2d9      	uxtb	r1, r3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004988:	f361 1304 	bfi	r3, r1, #4, #1
 800498c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004990:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004992:	b2da      	uxtb	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 800499a:	f003 ba7f 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x82: /* ADD A, D */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.d;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	4413      	add	r3, r2
 80049b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 80049b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf0c      	ite	eq
 80049ba:	2301      	moveq	r3, #1
 80049bc:	2300      	movne	r3, #0
 80049be:	b2d9      	uxtb	r1, r3
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80049c6:	f361 13c7 	bfi	r3, r1, #7, #1
 80049ca:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80049d4:	f36f 1386 	bfc	r3, #6, #1
 80049d8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.d ^ temp) & 0x10 ? 1 : 0;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80049e8:	4053      	eors	r3, r2
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049f0:	4053      	eors	r3, r2
 80049f2:	111b      	asrs	r3, r3, #4
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004a00:	f361 1345 	bfi	r3, r1, #5, #1
 8004a04:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004a08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2d9      	uxtb	r1, r3
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004a1e:	f361 1304 	bfi	r3, r1, #4, #1
 8004a22:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004a26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004a30:	f003 ba34 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x83: /* ADD A, E */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.e;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	85fb      	strh	r3, [r7, #46]	; 0x2e
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004a48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2d9      	uxtb	r1, r3
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004a5c:	f361 13c7 	bfi	r3, r1, #7, #1
 8004a60:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004a6a:	f36f 1386 	bfc	r3, #6, #1
 8004a6e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.e ^ temp) & 0x10 ? 1 : 0;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004a7e:	4053      	eors	r3, r2
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a86:	4053      	eors	r3, r2
 8004a88:	111b      	asrs	r3, r3, #4
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004a96:	f361 1345 	bfi	r3, r1, #5, #1
 8004a9a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004a9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004aa0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf14      	ite	ne
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	2300      	moveq	r3, #0
 8004aac:	b2d9      	uxtb	r1, r3
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004ab4:	f361 1304 	bfi	r3, r1, #4, #1
 8004ab8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004abc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004ac6:	f003 b9e9 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x84: /* ADD A, H */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.h;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	863b      	strh	r3, [r7, #48]	; 0x30
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004ade:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	bf0c      	ite	eq
 8004ae6:	2301      	moveq	r3, #1
 8004ae8:	2300      	movne	r3, #0
 8004aea:	b2d9      	uxtb	r1, r3
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004af2:	f361 13c7 	bfi	r3, r1, #7, #1
 8004af6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004b00:	f36f 1386 	bfc	r3, #6, #1
 8004b04:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.h ^ temp) & 0x10 ? 1 : 0;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b14:	4053      	eors	r3, r2
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b1c:	4053      	eors	r3, r2
 8004b1e:	111b      	asrs	r3, r3, #4
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004b2c:	f361 1345 	bfi	r3, r1, #5, #1
 8004b30:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004b34:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	bf14      	ite	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	2300      	moveq	r3, #0
 8004b42:	b2d9      	uxtb	r1, r3
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004b4a:	f361 1304 	bfi	r3, r1, #4, #1
 8004b4e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004b52:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004b5c:	f003 b99e 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x85: /* ADD A, L */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.l;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	867b      	strh	r3, [r7, #50]	; 0x32
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004b74:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2d9      	uxtb	r1, r3
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004b88:	f361 13c7 	bfi	r3, r1, #7, #1
 8004b8c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004b96:	f36f 1386 	bfc	r3, #6, #1
 8004b9a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.l ^ temp) & 0x10 ? 1 : 0;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004baa:	4053      	eors	r3, r2
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bb2:	4053      	eors	r3, r2
 8004bb4:	111b      	asrs	r3, r3, #4
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004bc2:	f361 1345 	bfi	r3, r1, #5, #1
 8004bc6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004bca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bf14      	ite	ne
 8004bd4:	2301      	movne	r3, #1
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	b2d9      	uxtb	r1, r3
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004be0:	f361 1304 	bfi	r3, r1, #4, #1
 8004be4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004be8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004bf2:	f003 b953 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x86: /* ADD A, (HL) */
	{
		uint8_t hl = __gb_read(gb, gb->cpu_reg.hl);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fc fa79 	bl	80010f4 <__gb_read>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint16_t temp = gb->cpu_reg.a + hl;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4413      	add	r3, r2
 8004c18:	86bb      	strh	r3, [r7, #52]	; 0x34
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004c1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf0c      	ite	eq
 8004c22:	2301      	moveq	r3, #1
 8004c24:	2300      	movne	r3, #0
 8004c26:	b2d9      	uxtb	r1, r3
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004c2e:	f361 13c7 	bfi	r3, r1, #7, #1
 8004c32:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004c3c:	f36f 1386 	bfc	r3, #6, #1
 8004c40:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ hl ^ temp) & 0x10 ? 1 : 0;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004c4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004c4e:	4053      	eors	r3, r2
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c56:	4053      	eors	r3, r2
 8004c58:	111b      	asrs	r3, r3, #4
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004c66:	f361 1345 	bfi	r3, r1, #5, #1
 8004c6a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004c6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	bf14      	ite	ne
 8004c78:	2301      	movne	r3, #1
 8004c7a:	2300      	moveq	r3, #0
 8004c7c:	b2d9      	uxtb	r1, r3
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004c84:	f361 1304 	bfi	r3, r1, #4, #1
 8004c88:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004c8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004c96:	f003 b901 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x87: /* ADD A, A */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.a;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	873b      	strh	r3, [r7, #56]	; 0x38
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004ca6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf0c      	ite	eq
 8004cae:	2301      	moveq	r3, #1
 8004cb0:	2300      	movne	r3, #0
 8004cb2:	b2d9      	uxtb	r1, r3
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004cba:	f361 13c7 	bfi	r3, r1, #7, #1
 8004cbe:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004cc8:	f36f 1386 	bfc	r3, #6, #1
 8004ccc:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = temp & 0x10 ? 1 : 0;
 8004cd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004cd2:	111b      	asrs	r3, r3, #4
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	b2d9      	uxtb	r1, r3
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004ce0:	f361 1345 	bfi	r3, r1, #5, #1
 8004ce4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004ce8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004cea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bf14      	ite	ne
 8004cf2:	2301      	movne	r3, #1
 8004cf4:	2300      	moveq	r3, #0
 8004cf6:	b2d9      	uxtb	r1, r3
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004cfe:	f361 1304 	bfi	r3, r1, #4, #1
 8004d02:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004d06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004d10:	f003 b8c4 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x88: /* ADC A, B */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.b + gb->cpu_reg.f_bits.c;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d2e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	877b      	strh	r3, [r7, #58]	; 0x3a
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004d3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bf0c      	ite	eq
 8004d42:	2301      	moveq	r3, #1
 8004d44:	2300      	movne	r3, #0
 8004d46:	b2d9      	uxtb	r1, r3
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004d4e:	f361 13c7 	bfi	r3, r1, #7, #1
 8004d52:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004d5c:	f36f 1386 	bfc	r3, #6, #1
 8004d60:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.b ^ temp) & 0x10 ? 1 : 0;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d70:	4053      	eors	r3, r2
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d78:	4053      	eors	r3, r2
 8004d7a:	111b      	asrs	r3, r3, #4
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004d88:	f361 1345 	bfi	r3, r1, #5, #1
 8004d8c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004d90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004d92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2d9      	uxtb	r1, r3
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004da6:	f361 1304 	bfi	r3, r1, #4, #1
 8004daa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004dae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004db8:	f003 b870 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x89: /* ADC A, C */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.c + gb->cpu_reg.f_bits.c;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004dd6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	4413      	add	r3, r2
 8004de0:	87bb      	strh	r3, [r7, #60]	; 0x3c
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004de2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2d9      	uxtb	r1, r3
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004df6:	f361 13c7 	bfi	r3, r1, #7, #1
 8004dfa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004e04:	f36f 1386 	bfc	r3, #6, #1
 8004e08:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.c ^ temp) & 0x10 ? 1 : 0;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e18:	4053      	eors	r3, r2
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e20:	4053      	eors	r3, r2
 8004e22:	111b      	asrs	r3, r3, #4
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004e30:	f361 1345 	bfi	r3, r1, #5, #1
 8004e34:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004e38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf14      	ite	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	2300      	moveq	r3, #0
 8004e46:	b2d9      	uxtb	r1, r3
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004e4e:	f361 1304 	bfi	r3, r1, #4, #1
 8004e52:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004e56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004e60:	f003 b81c 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x8A: /* ADC A, D */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.d + gb->cpu_reg.f_bits.c;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	4413      	add	r3, r2
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e7e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	87fb      	strh	r3, [r7, #62]	; 0x3e
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004e8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2d9      	uxtb	r1, r3
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004e9e:	f361 13c7 	bfi	r3, r1, #7, #1
 8004ea2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004eac:	f36f 1386 	bfc	r3, #6, #1
 8004eb0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.d ^ temp) & 0x10 ? 1 : 0;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004ec0:	4053      	eors	r3, r2
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ec8:	4053      	eors	r3, r2
 8004eca:	111b      	asrs	r3, r3, #4
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004ed8:	f361 1345 	bfi	r3, r1, #5, #1
 8004edc:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004ee0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ee2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bf14      	ite	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	2300      	moveq	r3, #0
 8004eee:	b2d9      	uxtb	r1, r3
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004ef6:	f361 1304 	bfi	r3, r1, #4, #1
 8004efa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004efe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004f08:	f002 bfc8 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x8B: /* ADC A, E */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.e + gb->cpu_reg.f_bits.c;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4413      	add	r3, r2
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f26:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004f34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2d9      	uxtb	r1, r3
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004f4a:	f361 13c7 	bfi	r3, r1, #7, #1
 8004f4e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004f58:	f36f 1386 	bfc	r3, #6, #1
 8004f5c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.e ^ temp) & 0x10 ? 1 : 0;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f6c:	4053      	eors	r3, r2
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f76:	4053      	eors	r3, r2
 8004f78:	111b      	asrs	r3, r3, #4
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004f86:	f361 1345 	bfi	r3, r1, #5, #1
 8004f8a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8004f8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	bf14      	ite	ne
 8004f9a:	2301      	movne	r3, #1
 8004f9c:	2300      	moveq	r3, #0
 8004f9e:	b2d9      	uxtb	r1, r3
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004fa6:	f361 1304 	bfi	r3, r1, #4, #1
 8004faa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8004fae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8004fba:	f002 bf6f 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x8C: /* ADC A, H */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.h + gb->cpu_reg.f_bits.c;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004fd8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8004fe6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	bf0c      	ite	eq
 8004ff0:	2301      	moveq	r3, #1
 8004ff2:	2300      	movne	r3, #0
 8004ff4:	b2d9      	uxtb	r1, r3
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8004ffc:	f361 13c7 	bfi	r3, r1, #7, #1
 8005000:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800500a:	f36f 1386 	bfc	r3, #6, #1
 800500e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.h ^ temp) & 0x10 ? 1 : 0;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800501e:	4053      	eors	r3, r2
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005028:	4053      	eors	r3, r2
 800502a:	111b      	asrs	r3, r3, #4
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005038:	f361 1345 	bfi	r3, r1, #5, #1
 800503c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8005040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005044:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf14      	ite	ne
 800504c:	2301      	movne	r3, #1
 800504e:	2300      	moveq	r3, #0
 8005050:	b2d9      	uxtb	r1, r3
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005058:	f361 1304 	bfi	r3, r1, #4, #1
 800505c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005060:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005064:	b2da      	uxtb	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 800506c:	f002 bf16 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x8D: /* ADC A, L */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.l + gb->cpu_reg.f_bits.c;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005076:	b29a      	uxth	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800507e:	b29b      	uxth	r3, r3
 8005080:	4413      	add	r3, r2
 8005082:	b29a      	uxth	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800508a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800508e:	b2db      	uxtb	r3, r3
 8005090:	b29b      	uxth	r3, r3
 8005092:	4413      	add	r3, r2
 8005094:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8005098:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	bf0c      	ite	eq
 80050a2:	2301      	moveq	r3, #1
 80050a4:	2300      	movne	r3, #0
 80050a6:	b2d9      	uxtb	r1, r3
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80050ae:	f361 13c7 	bfi	r3, r1, #7, #1
 80050b2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80050bc:	f36f 1386 	bfc	r3, #6, #1
 80050c0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.l ^ temp) & 0x10 ? 1 : 0;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050d0:	4053      	eors	r3, r2
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	461a      	mov	r2, r3
 80050d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050da:	4053      	eors	r3, r2
 80050dc:	111b      	asrs	r3, r3, #4
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80050ea:	f361 1345 	bfi	r3, r1, #5, #1
 80050ee:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80050f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80050f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bf14      	ite	ne
 80050fe:	2301      	movne	r3, #1
 8005100:	2300      	moveq	r3, #0
 8005102:	b2d9      	uxtb	r1, r3
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800510a:	f361 1304 	bfi	r3, r1, #4, #1
 800510e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005112:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005116:	b2da      	uxtb	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 800511e:	f002 bebd 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x8E: /* ADC A, (HL) */
	{
		uint8_t val = __gb_read(gb, gb->cpu_reg.hl);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005126:	4619      	mov	r1, r3
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fb ffe3 	bl	80010f4 <__gb_read>
 800512e:	4603      	mov	r3, r0
 8005130:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		uint16_t temp = gb->cpu_reg.a + val + gb->cpu_reg.f_bits.c;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800513a:	b29a      	uxth	r2, r3
 800513c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005140:	b29b      	uxth	r3, r3
 8005142:	4413      	add	r3, r2
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800514c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005150:	b2db      	uxtb	r3, r3
 8005152:	b29b      	uxth	r3, r3
 8005154:	4413      	add	r3, r2
 8005156:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 800515a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf0c      	ite	eq
 8005164:	2301      	moveq	r3, #1
 8005166:	2300      	movne	r3, #0
 8005168:	b2d9      	uxtb	r1, r3
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005170:	f361 13c7 	bfi	r3, r1, #7, #1
 8005174:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800517e:	f36f 1386 	bfc	r3, #6, #1
 8005182:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ val ^ temp) & 0x10 ? 1 : 0;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800518c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005190:	4053      	eors	r3, r2
 8005192:	b2db      	uxtb	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800519a:	4053      	eors	r3, r2
 800519c:	111b      	asrs	r3, r3, #4
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80051aa:	f361 1345 	bfi	r3, r1, #5, #1
 80051ae:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80051b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80051b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bf14      	ite	ne
 80051be:	2301      	movne	r3, #1
 80051c0:	2300      	moveq	r3, #0
 80051c2:	b2d9      	uxtb	r1, r3
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80051ca:	f361 1304 	bfi	r3, r1, #4, #1
 80051ce:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 80051d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 80051de:	f002 be5d 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x8F: /* ADC A, A */
	{
		uint16_t temp = gb->cpu_reg.a + gb->cpu_reg.a + gb->cpu_reg.f_bits.c;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80051f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	4413      	add	r3, r2
 80051fe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8005202:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2d9      	uxtb	r1, r3
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005218:	f361 13c7 	bfi	r3, r1, #7, #1
 800521c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005226:	f36f 1386 	bfc	r3, #6, #1
 800522a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		/* TODO: Optimisation here? */
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.a ^ temp) & 0x10 ? 1 : 0;
 800522e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005232:	111b      	asrs	r3, r3, #4
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005240:	f361 1345 	bfi	r3, r1, #5, #1
 8005244:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8005248:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800524c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2d9      	uxtb	r1, r3
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005260:	f361 1304 	bfi	r3, r1, #4, #1
 8005264:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005268:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800526c:	b2da      	uxtb	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8005274:	f002 be12 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x90: /* SUB B */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.b;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800527e:	b29a      	uxth	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005286:	b29b      	uxth	r3, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 800528e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2d9      	uxtb	r1, r3
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80052a4:	f361 13c7 	bfi	r3, r1, #7, #1
 80052a8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80052b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.b ^ temp) & 0x10 ? 1 : 0;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052c6:	4053      	eors	r3, r2
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80052d0:	4053      	eors	r3, r2
 80052d2:	111b      	asrs	r3, r3, #4
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80052e0:	f361 1345 	bfi	r3, r1, #5, #1
 80052e4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80052e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80052ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf14      	ite	ne
 80052f4:	2301      	movne	r3, #1
 80052f6:	2300      	moveq	r3, #0
 80052f8:	b2d9      	uxtb	r1, r3
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005300:	f361 1304 	bfi	r3, r1, #4, #1
 8005304:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005308:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800530c:	b2da      	uxtb	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8005314:	f002 bdc2 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x91: /* SUB C */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.c;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800531e:	b29a      	uxth	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005326:	b29b      	uxth	r3, r3
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 800532e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	b2d9      	uxtb	r1, r3
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005344:	f361 13c7 	bfi	r3, r1, #7, #1
 8005348:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005356:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.c ^ temp) & 0x10 ? 1 : 0;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005366:	4053      	eors	r3, r2
 8005368:	b2db      	uxtb	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005370:	4053      	eors	r3, r2
 8005372:	111b      	asrs	r3, r3, #4
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005380:	f361 1345 	bfi	r3, r1, #5, #1
 8005384:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8005388:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800538c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf14      	ite	ne
 8005394:	2301      	movne	r3, #1
 8005396:	2300      	moveq	r3, #0
 8005398:	b2d9      	uxtb	r1, r3
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80053a0:	f361 1304 	bfi	r3, r1, #4, #1
 80053a4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 80053a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 80053b4:	f002 bd72 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x92: /* SUB D */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.d;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053be:	b29a      	uxth	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 80053ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf0c      	ite	eq
 80053d8:	2301      	moveq	r3, #1
 80053da:	2300      	movne	r3, #0
 80053dc:	b2d9      	uxtb	r1, r3
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80053e4:	f361 13c7 	bfi	r3, r1, #7, #1
 80053e8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80053f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.d ^ temp) & 0x10 ? 1 : 0;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005406:	4053      	eors	r3, r2
 8005408:	b2db      	uxtb	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005410:	4053      	eors	r3, r2
 8005412:	111b      	asrs	r3, r3, #4
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005420:	f361 1345 	bfi	r3, r1, #5, #1
 8005424:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8005428:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800542c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2d9      	uxtb	r1, r3
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005440:	f361 1304 	bfi	r3, r1, #4, #1
 8005444:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005448:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800544c:	b2da      	uxtb	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8005454:	f002 bd22 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x93: /* SUB E */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.e;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800545e:	b29a      	uxth	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005466:	b29b      	uxth	r3, r3
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 800546e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	bf0c      	ite	eq
 8005478:	2301      	moveq	r3, #1
 800547a:	2300      	movne	r3, #0
 800547c:	b2d9      	uxtb	r1, r3
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005484:	f361 13c7 	bfi	r3, r1, #7, #1
 8005488:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005496:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.e ^ temp) & 0x10 ? 1 : 0;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80054a6:	4053      	eors	r3, r2
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80054b0:	4053      	eors	r3, r2
 80054b2:	111b      	asrs	r3, r3, #4
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80054c0:	f361 1345 	bfi	r3, r1, #5, #1
 80054c4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80054c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80054cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2d9      	uxtb	r1, r3
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80054e0:	f361 1304 	bfi	r3, r1, #4, #1
 80054e4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 80054e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 80054f4:	f002 bcd2 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x94: /* SUB H */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.h;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054fe:	b29a      	uxth	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005506:	b29b      	uxth	r3, r3
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 800550e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2d9      	uxtb	r1, r3
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005524:	f361 13c7 	bfi	r3, r1, #7, #1
 8005528:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005536:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.h ^ temp) & 0x10 ? 1 : 0;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005546:	4053      	eors	r3, r2
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005550:	4053      	eors	r3, r2
 8005552:	111b      	asrs	r3, r3, #4
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005560:	f361 1345 	bfi	r3, r1, #5, #1
 8005564:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8005568:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800556c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2d9      	uxtb	r1, r3
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005580:	f361 1304 	bfi	r3, r1, #4, #1
 8005584:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005588:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800558c:	b2da      	uxtb	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8005594:	f002 bc82 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x95: /* SUB L */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.l;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800559e:	b29a      	uxth	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 80055ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bf0c      	ite	eq
 80055b8:	2301      	moveq	r3, #1
 80055ba:	2300      	movne	r3, #0
 80055bc:	b2d9      	uxtb	r1, r3
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80055c4:	f361 13c7 	bfi	r3, r1, #7, #1
 80055c8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80055d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.l ^ temp) & 0x10 ? 1 : 0;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055e6:	4053      	eors	r3, r2
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055f0:	4053      	eors	r3, r2
 80055f2:	111b      	asrs	r3, r3, #4
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005600:	f361 1345 	bfi	r3, r1, #5, #1
 8005604:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8005608:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800560c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005610:	2b00      	cmp	r3, #0
 8005612:	bf14      	ite	ne
 8005614:	2301      	movne	r3, #1
 8005616:	2300      	moveq	r3, #0
 8005618:	b2d9      	uxtb	r1, r3
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005620:	f361 1304 	bfi	r3, r1, #4, #1
 8005624:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005628:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800562c:	b2da      	uxtb	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8005634:	f002 bc32 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x96: /* SUB (HL) */
	{
		uint8_t val = __gb_read(gb, gb->cpu_reg.hl);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fb fd58 	bl	80010f4 <__gb_read>
 8005644:	4603      	mov	r3, r0
 8005646:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		uint16_t temp = gb->cpu_reg.a - val;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005650:	b29a      	uxth	r2, r3
 8005652:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005656:	b29b      	uxth	r3, r3
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 800565e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2d9      	uxtb	r1, r3
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005674:	f361 13c7 	bfi	r3, r1, #7, #1
 8005678:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005686:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ val ^ temp) & 0x10 ? 1 : 0;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005690:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005694:	4053      	eors	r3, r2
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800569e:	4053      	eors	r3, r2
 80056a0:	111b      	asrs	r3, r3, #4
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80056ae:	f361 1345 	bfi	r3, r1, #5, #1
 80056b2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80056b6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80056ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056be:	2b00      	cmp	r3, #0
 80056c0:	bf14      	ite	ne
 80056c2:	2301      	movne	r3, #1
 80056c4:	2300      	moveq	r3, #0
 80056c6:	b2d9      	uxtb	r1, r3
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80056ce:	f361 1304 	bfi	r3, r1, #4, #1
 80056d2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 80056d6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 80056e2:	f002 bbdb 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x97: /* SUB A */
		gb->cpu_reg.a = 0;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = 1;
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80056f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005706:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005710:	f36f 1345 	bfc	r3, #5, #1
 8005714:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800571e:	f36f 1304 	bfc	r3, #4, #1
 8005722:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005726:	f002 bbb9 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0x98: /* SBC A, B */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.b - gb->cpu_reg.f_bits.c;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005730:	b29a      	uxth	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005738:	b29b      	uxth	r3, r3
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005744:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	b29b      	uxth	r3, r3
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8005752:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2d9      	uxtb	r1, r3
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005768:	f361 13c7 	bfi	r3, r1, #7, #1
 800576c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800577a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.b ^ temp) & 0x10 ? 1 : 0;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800578a:	4053      	eors	r3, r2
 800578c:	b2db      	uxtb	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005794:	4053      	eors	r3, r2
 8005796:	111b      	asrs	r3, r3, #4
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80057a4:	f361 1345 	bfi	r3, r1, #5, #1
 80057a8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80057ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80057b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	bf14      	ite	ne
 80057b8:	2301      	movne	r3, #1
 80057ba:	2300      	moveq	r3, #0
 80057bc:	b2d9      	uxtb	r1, r3
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80057c4:	f361 1304 	bfi	r3, r1, #4, #1
 80057c8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 80057cc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 80057d8:	f002 bb60 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x99: /* SBC A, C */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.c - gb->cpu_reg.f_bits.c;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8005804:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	bf0c      	ite	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	2300      	movne	r3, #0
 8005812:	b2d9      	uxtb	r1, r3
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800581a:	f361 13c7 	bfi	r3, r1, #7, #1
 800581e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800582c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.c ^ temp) & 0x10 ? 1 : 0;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800583c:	4053      	eors	r3, r2
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005846:	4053      	eors	r3, r2
 8005848:	111b      	asrs	r3, r3, #4
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005856:	f361 1345 	bfi	r3, r1, #5, #1
 800585a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 800585e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005862:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2d9      	uxtb	r1, r3
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005876:	f361 1304 	bfi	r3, r1, #4, #1
 800587a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 800587e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005882:	b2da      	uxtb	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 800588a:	f002 bb07 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x9A: /* SBC A, D */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.d - gb->cpu_reg.f_bits.c;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005894:	b29a      	uxth	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800589c:	b29b      	uxth	r3, r3
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 80058b6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf0c      	ite	eq
 80058c0:	2301      	moveq	r3, #1
 80058c2:	2300      	movne	r3, #0
 80058c4:	b2d9      	uxtb	r1, r3
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80058cc:	f361 13c7 	bfi	r3, r1, #7, #1
 80058d0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80058da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058de:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.d ^ temp) & 0x10 ? 1 : 0;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80058ee:	4053      	eors	r3, r2
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80058f8:	4053      	eors	r3, r2
 80058fa:	111b      	asrs	r3, r3, #4
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005908:	f361 1345 	bfi	r3, r1, #5, #1
 800590c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8005910:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005914:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf14      	ite	ne
 800591c:	2301      	movne	r3, #1
 800591e:	2300      	moveq	r3, #0
 8005920:	b2d9      	uxtb	r1, r3
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005928:	f361 1304 	bfi	r3, r1, #4, #1
 800592c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005930:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8005934:	b2da      	uxtb	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 800593c:	f002 baae 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x9B: /* SBC A, E */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.e - gb->cpu_reg.f_bits.c;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005946:	b29a      	uxth	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	b29a      	uxth	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800595a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800595e:	b2db      	uxtb	r3, r3
 8005960:	b29b      	uxth	r3, r3
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8005968:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	bf0c      	ite	eq
 8005972:	2301      	moveq	r3, #1
 8005974:	2300      	movne	r3, #0
 8005976:	b2d9      	uxtb	r1, r3
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800597e:	f361 13c7 	bfi	r3, r1, #7, #1
 8005982:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800598c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005990:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.e ^ temp) & 0x10 ? 1 : 0;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80059a0:	4053      	eors	r3, r2
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059aa:	4053      	eors	r3, r2
 80059ac:	111b      	asrs	r3, r3, #4
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80059ba:	f361 1345 	bfi	r3, r1, #5, #1
 80059be:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80059c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bf14      	ite	ne
 80059ce:	2301      	movne	r3, #1
 80059d0:	2300      	moveq	r3, #0
 80059d2:	b2d9      	uxtb	r1, r3
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80059da:	f361 1304 	bfi	r3, r1, #4, #1
 80059de:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 80059e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 80059ee:	f002 ba55 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x9C: /* SBC A, H */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.h - gb->cpu_reg.f_bits.c;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8005a1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2d9      	uxtb	r1, r3
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005a30:	f361 13c7 	bfi	r3, r1, #7, #1
 8005a34:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a42:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.h ^ temp) & 0x10 ? 1 : 0;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a52:	4053      	eors	r3, r2
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a5c:	4053      	eors	r3, r2
 8005a5e:	111b      	asrs	r3, r3, #4
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005a6c:	f361 1345 	bfi	r3, r1, #5, #1
 8005a70:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8005a74:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf14      	ite	ne
 8005a80:	2301      	movne	r3, #1
 8005a82:	2300      	moveq	r3, #0
 8005a84:	b2d9      	uxtb	r1, r3
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005a8c:	f361 1304 	bfi	r3, r1, #4, #1
 8005a90:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005a94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8005aa0:	f002 b9fc 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x9D: /* SBC A, L */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.l - gb->cpu_reg.f_bits.c;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005abe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8005acc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2301      	moveq	r3, #1
 8005ad8:	2300      	movne	r3, #0
 8005ada:	b2d9      	uxtb	r1, r3
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005ae2:	f361 13c7 	bfi	r3, r1, #7, #1
 8005ae6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005af4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.l ^ temp) & 0x10 ? 1 : 0;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b04:	4053      	eors	r3, r2
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b0e:	4053      	eors	r3, r2
 8005b10:	111b      	asrs	r3, r3, #4
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005b1e:	f361 1345 	bfi	r3, r1, #5, #1
 8005b22:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8005b26:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bf14      	ite	ne
 8005b32:	2301      	movne	r3, #1
 8005b34:	2300      	moveq	r3, #0
 8005b36:	b2d9      	uxtb	r1, r3
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005b3e:	f361 1304 	bfi	r3, r1, #4, #1
 8005b42:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005b46:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8005b52:	f002 b9a3 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x9E: /* SBC A, (HL) */
	{
		uint8_t val = __gb_read(gb, gb->cpu_reg.hl);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7fb fac9 	bl	80010f4 <__gb_read>
 8005b62:	4603      	mov	r3, r0
 8005b64:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		uint16_t temp = gb->cpu_reg.a - val - gb->cpu_reg.f_bits.c;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8005b8e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	bf0c      	ite	eq
 8005b98:	2301      	moveq	r3, #1
 8005b9a:	2300      	movne	r3, #0
 8005b9c:	b2d9      	uxtb	r1, r3
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005ba4:	f361 13c7 	bfi	r3, r1, #7, #1
 8005ba8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ val ^ temp) & 0x10 ? 1 : 0;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005bc0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005bc4:	4053      	eors	r3, r2
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005bce:	4053      	eors	r3, r2
 8005bd0:	111b      	asrs	r3, r3, #4
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005bde:	f361 1345 	bfi	r3, r1, #5, #1
 8005be2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8005be6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005bea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bf14      	ite	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	2300      	moveq	r3, #0
 8005bf6:	b2d9      	uxtb	r1, r3
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005bfe:	f361 1304 	bfi	r3, r1, #4, #1
 8005c02:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 8005c06:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8005c12:	f002 b943 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0x9F: /* SBC A, A */
		gb->cpu_reg.a = gb->cpu_reg.f_bits.c ? 0xFF : 0x00;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <__gb_step_cpu+0x2e6e>
 8005c26:	22ff      	movs	r2, #255	; 0xff
 8005c28:	e000      	b.n	8005c2c <__gb_step_cpu+0x2e70>
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = gb->cpu_reg.f_bits.c ? 0x00 : 0x01;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bf0c      	ite	eq
 8005c42:	2301      	moveq	r3, #1
 8005c44:	2300      	movne	r3, #0
 8005c46:	b2d9      	uxtb	r1, r3
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005c4e:	f361 13c7 	bfi	r3, r1, #7, #1
 8005c52:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c60:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = gb->cpu_reg.f_bits.c;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c6a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005c6e:	b2d9      	uxtb	r1, r3
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005c76:	f361 1345 	bfi	r3, r1, #5, #1
 8005c7a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005c7e:	f002 b90d 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xA0: /* AND B */
		gb->cpu_reg.a = gb->cpu_reg.a & gb->cpu_reg.b;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c8e:	4013      	ands	r3, r2
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	2300      	movne	r3, #0
 8005ca6:	b2d9      	uxtb	r1, r3
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005cae:	f361 13c7 	bfi	r3, r1, #7, #1
 8005cb2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005cbc:	f36f 1386 	bfc	r3, #6, #1
 8005cc0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005cca:	f043 0320 	orr.w	r3, r3, #32
 8005cce:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005cd8:	f36f 1304 	bfc	r3, #4, #1
 8005cdc:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005ce0:	f002 b8dc 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xA1: /* AND C */
		gb->cpu_reg.a = gb->cpu_reg.a & gb->cpu_reg.c;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2d9      	uxtb	r1, r3
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005d10:	f361 13c7 	bfi	r3, r1, #7, #1
 8005d14:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005d1e:	f36f 1386 	bfc	r3, #6, #1
 8005d22:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005d2c:	f043 0320 	orr.w	r3, r3, #32
 8005d30:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005d3a:	f36f 1304 	bfc	r3, #4, #1
 8005d3e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005d42:	f002 b8ab 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xA2: /* AND D */
		gb->cpu_reg.a = gb->cpu_reg.a & gb->cpu_reg.d;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005d52:	4013      	ands	r3, r2
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bf0c      	ite	eq
 8005d66:	2301      	moveq	r3, #1
 8005d68:	2300      	movne	r3, #0
 8005d6a:	b2d9      	uxtb	r1, r3
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005d72:	f361 13c7 	bfi	r3, r1, #7, #1
 8005d76:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005d80:	f36f 1386 	bfc	r3, #6, #1
 8005d84:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005d8e:	f043 0320 	orr.w	r3, r3, #32
 8005d92:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005d9c:	f36f 1304 	bfc	r3, #4, #1
 8005da0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005da4:	f002 b87a 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xA3: /* AND E */
		gb->cpu_reg.a = gb->cpu_reg.a & gb->cpu_reg.e;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005db4:	4013      	ands	r3, r2
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2301      	moveq	r3, #1
 8005dca:	2300      	movne	r3, #0
 8005dcc:	b2d9      	uxtb	r1, r3
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005dd4:	f361 13c7 	bfi	r3, r1, #7, #1
 8005dd8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005de2:	f36f 1386 	bfc	r3, #6, #1
 8005de6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005df0:	f043 0320 	orr.w	r3, r3, #32
 8005df4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005dfe:	f36f 1304 	bfc	r3, #4, #1
 8005e02:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005e06:	f002 b849 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xA4: /* AND H */
		gb->cpu_reg.a = gb->cpu_reg.a & gb->cpu_reg.h;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e16:	4013      	ands	r3, r2
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2d9      	uxtb	r1, r3
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005e36:	f361 13c7 	bfi	r3, r1, #7, #1
 8005e3a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005e44:	f36f 1386 	bfc	r3, #6, #1
 8005e48:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005e52:	f043 0320 	orr.w	r3, r3, #32
 8005e56:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005e60:	f36f 1304 	bfc	r3, #4, #1
 8005e64:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005e68:	f002 b818 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xA5: /* AND L */
		gb->cpu_reg.a = gb->cpu_reg.a & gb->cpu_reg.l;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e78:	4013      	ands	r3, r2
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2d9      	uxtb	r1, r3
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005e98:	f361 13c7 	bfi	r3, r1, #7, #1
 8005e9c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005ea6:	f36f 1386 	bfc	r3, #6, #1
 8005eaa:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005eb4:	f043 0320 	orr.w	r3, r3, #32
 8005eb8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005ec2:	f36f 1304 	bfc	r3, #4, #1
 8005ec6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005eca:	f001 bfe7 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xA6: /* AND B */
		gb->cpu_reg.a = gb->cpu_reg.a & __gb_read(gb, gb->cpu_reg.hl);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fb f90a 	bl	80010f4 <__gb_read>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	4023      	ands	r3, r4
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf0c      	ite	eq
 8005ef6:	2301      	moveq	r3, #1
 8005ef8:	2300      	movne	r3, #0
 8005efa:	b2d9      	uxtb	r1, r3
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005f02:	f361 13c7 	bfi	r3, r1, #7, #1
 8005f06:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005f10:	f36f 1386 	bfc	r3, #6, #1
 8005f14:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005f1e:	f043 0320 	orr.w	r3, r3, #32
 8005f22:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005f2c:	f36f 1304 	bfc	r3, #4, #1
 8005f30:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005f34:	f001 bfb2 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xA7: /* AND A */
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bf0c      	ite	eq
 8005f42:	2301      	moveq	r3, #1
 8005f44:	2300      	movne	r3, #0
 8005f46:	b2d9      	uxtb	r1, r3
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005f4e:	f361 13c7 	bfi	r3, r1, #7, #1
 8005f52:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005f5c:	f36f 1386 	bfc	r3, #6, #1
 8005f60:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005f6a:	f043 0320 	orr.w	r3, r3, #32
 8005f6e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005f78:	f36f 1304 	bfc	r3, #4, #1
 8005f7c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005f80:	f001 bf8c 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xA8: /* XOR B */
		gb->cpu_reg.a = gb->cpu_reg.a ^ gb->cpu_reg.b;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f90:	4053      	eors	r3, r2
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2d9      	uxtb	r1, r3
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005fb0:	f361 13c7 	bfi	r3, r1, #7, #1
 8005fb4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005fbe:	f36f 1386 	bfc	r3, #6, #1
 8005fc2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005fcc:	f36f 1345 	bfc	r3, #5, #1
 8005fd0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8005fda:	f36f 1304 	bfc	r3, #4, #1
 8005fde:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8005fe2:	f001 bf5b 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xA9: /* XOR C */
		gb->cpu_reg.a = gb->cpu_reg.a ^ gb->cpu_reg.c;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ff2:	4053      	eors	r3, r2
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006002:	2b00      	cmp	r3, #0
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2d9      	uxtb	r1, r3
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006012:	f361 13c7 	bfi	r3, r1, #7, #1
 8006016:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006020:	f36f 1386 	bfc	r3, #6, #1
 8006024:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800602e:	f36f 1345 	bfc	r3, #5, #1
 8006032:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800603c:	f36f 1304 	bfc	r3, #4, #1
 8006040:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8006044:	f001 bf2a 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xAA: /* XOR D */
		gb->cpu_reg.a = gb->cpu_reg.a ^ gb->cpu_reg.d;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8006054:	4053      	eors	r3, r2
 8006056:	b2da      	uxtb	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf0c      	ite	eq
 8006068:	2301      	moveq	r3, #1
 800606a:	2300      	movne	r3, #0
 800606c:	b2d9      	uxtb	r1, r3
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006074:	f361 13c7 	bfi	r3, r1, #7, #1
 8006078:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006082:	f36f 1386 	bfc	r3, #6, #1
 8006086:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006090:	f36f 1345 	bfc	r3, #5, #1
 8006094:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800609e:	f36f 1304 	bfc	r3, #4, #1
 80060a2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80060a6:	f001 bef9 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xAB: /* XOR E */
		gb->cpu_reg.a = gb->cpu_reg.a ^ gb->cpu_reg.e;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80060b6:	4053      	eors	r3, r2
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bf0c      	ite	eq
 80060ca:	2301      	moveq	r3, #1
 80060cc:	2300      	movne	r3, #0
 80060ce:	b2d9      	uxtb	r1, r3
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80060d6:	f361 13c7 	bfi	r3, r1, #7, #1
 80060da:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80060e4:	f36f 1386 	bfc	r3, #6, #1
 80060e8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80060f2:	f36f 1345 	bfc	r3, #5, #1
 80060f6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006100:	f36f 1304 	bfc	r3, #4, #1
 8006104:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8006108:	f001 bec8 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xAC: /* XOR H */
		gb->cpu_reg.a = gb->cpu_reg.a ^ gb->cpu_reg.h;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006118:	4053      	eors	r3, r2
 800611a:	b2da      	uxtb	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2d9      	uxtb	r1, r3
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006138:	f361 13c7 	bfi	r3, r1, #7, #1
 800613c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006146:	f36f 1386 	bfc	r3, #6, #1
 800614a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006154:	f36f 1345 	bfc	r3, #5, #1
 8006158:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006162:	f36f 1304 	bfc	r3, #4, #1
 8006166:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 800616a:	f001 be97 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xAD: /* XOR L */
		gb->cpu_reg.a = gb->cpu_reg.a ^ gb->cpu_reg.l;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800617a:	4053      	eors	r3, r2
 800617c:	b2da      	uxtb	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800618a:	2b00      	cmp	r3, #0
 800618c:	bf0c      	ite	eq
 800618e:	2301      	moveq	r3, #1
 8006190:	2300      	movne	r3, #0
 8006192:	b2d9      	uxtb	r1, r3
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800619a:	f361 13c7 	bfi	r3, r1, #7, #1
 800619e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80061a8:	f36f 1386 	bfc	r3, #6, #1
 80061ac:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80061b6:	f36f 1345 	bfc	r3, #5, #1
 80061ba:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80061c4:	f36f 1304 	bfc	r3, #4, #1
 80061c8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80061cc:	f001 be66 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xAE: /* XOR (HL) */
		gb->cpu_reg.a = gb->cpu_reg.a ^ __gb_read(gb, gb->cpu_reg.hl);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7fa ff89 	bl	80010f4 <__gb_read>
 80061e2:	4603      	mov	r3, r0
 80061e4:	4063      	eors	r3, r4
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2d9      	uxtb	r1, r3
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006204:	f361 13c7 	bfi	r3, r1, #7, #1
 8006208:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006212:	f36f 1386 	bfc	r3, #6, #1
 8006216:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006220:	f36f 1345 	bfc	r3, #5, #1
 8006224:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800622e:	f36f 1304 	bfc	r3, #4, #1
 8006232:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8006236:	f001 be31 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xAF: /* XOR A */
		gb->cpu_reg.a = 0x00;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = 1;
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800624c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006256:	f36f 1386 	bfc	r3, #6, #1
 800625a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006264:	f36f 1345 	bfc	r3, #5, #1
 8006268:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006272:	f36f 1304 	bfc	r3, #4, #1
 8006276:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 800627a:	f001 be0f 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xB0: /* OR B */
		gb->cpu_reg.a = gb->cpu_reg.a | gb->cpu_reg.b;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800628a:	4313      	orrs	r3, r2
 800628c:	b2da      	uxtb	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf0c      	ite	eq
 800629e:	2301      	moveq	r3, #1
 80062a0:	2300      	movne	r3, #0
 80062a2:	b2d9      	uxtb	r1, r3
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80062aa:	f361 13c7 	bfi	r3, r1, #7, #1
 80062ae:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80062b8:	f36f 1386 	bfc	r3, #6, #1
 80062bc:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80062c6:	f36f 1345 	bfc	r3, #5, #1
 80062ca:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80062d4:	f36f 1304 	bfc	r3, #4, #1
 80062d8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80062dc:	f001 bdde 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xB1: /* OR C */
		gb->cpu_reg.a = gb->cpu_reg.a | gb->cpu_reg.c;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062ec:	4313      	orrs	r3, r2
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	bf0c      	ite	eq
 8006300:	2301      	moveq	r3, #1
 8006302:	2300      	movne	r3, #0
 8006304:	b2d9      	uxtb	r1, r3
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800630c:	f361 13c7 	bfi	r3, r1, #7, #1
 8006310:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800631a:	f36f 1386 	bfc	r3, #6, #1
 800631e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006328:	f36f 1345 	bfc	r3, #5, #1
 800632c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006336:	f36f 1304 	bfc	r3, #4, #1
 800633a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 800633e:	f001 bdad 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xB2: /* OR D */
		gb->cpu_reg.a = gb->cpu_reg.a | gb->cpu_reg.d;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800634e:	4313      	orrs	r3, r2
 8006350:	b2da      	uxtb	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800635e:	2b00      	cmp	r3, #0
 8006360:	bf0c      	ite	eq
 8006362:	2301      	moveq	r3, #1
 8006364:	2300      	movne	r3, #0
 8006366:	b2d9      	uxtb	r1, r3
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800636e:	f361 13c7 	bfi	r3, r1, #7, #1
 8006372:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800637c:	f36f 1386 	bfc	r3, #6, #1
 8006380:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800638a:	f36f 1345 	bfc	r3, #5, #1
 800638e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006398:	f36f 1304 	bfc	r3, #4, #1
 800639c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80063a0:	f001 bd7c 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xB3: /* OR E */
		gb->cpu_reg.a = gb->cpu_reg.a | gb->cpu_reg.e;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2d9      	uxtb	r1, r3
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80063d0:	f361 13c7 	bfi	r3, r1, #7, #1
 80063d4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80063de:	f36f 1386 	bfc	r3, #6, #1
 80063e2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80063ec:	f36f 1345 	bfc	r3, #5, #1
 80063f0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80063fa:	f36f 1304 	bfc	r3, #4, #1
 80063fe:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8006402:	f001 bd4b 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xB4: /* OR H */
		gb->cpu_reg.a = gb->cpu_reg.a | gb->cpu_reg.h;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006412:	4313      	orrs	r3, r2
 8006414:	b2da      	uxtb	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006422:	2b00      	cmp	r3, #0
 8006424:	bf0c      	ite	eq
 8006426:	2301      	moveq	r3, #1
 8006428:	2300      	movne	r3, #0
 800642a:	b2d9      	uxtb	r1, r3
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006432:	f361 13c7 	bfi	r3, r1, #7, #1
 8006436:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006440:	f36f 1386 	bfc	r3, #6, #1
 8006444:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800644e:	f36f 1345 	bfc	r3, #5, #1
 8006452:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800645c:	f36f 1304 	bfc	r3, #4, #1
 8006460:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8006464:	f001 bd1a 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xB5: /* OR L */
		gb->cpu_reg.a = gb->cpu_reg.a | gb->cpu_reg.l;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006474:	4313      	orrs	r3, r2
 8006476:	b2da      	uxtb	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006484:	2b00      	cmp	r3, #0
 8006486:	bf0c      	ite	eq
 8006488:	2301      	moveq	r3, #1
 800648a:	2300      	movne	r3, #0
 800648c:	b2d9      	uxtb	r1, r3
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006494:	f361 13c7 	bfi	r3, r1, #7, #1
 8006498:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80064a2:	f36f 1386 	bfc	r3, #6, #1
 80064a6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80064b0:	f36f 1345 	bfc	r3, #5, #1
 80064b4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80064be:	f36f 1304 	bfc	r3, #4, #1
 80064c2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80064c6:	f001 bce9 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xB6: /* OR (HL) */
		gb->cpu_reg.a = gb->cpu_reg.a | __gb_read(gb, gb->cpu_reg.hl);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fa fe0c 	bl	80010f4 <__gb_read>
 80064dc:	4603      	mov	r3, r0
 80064de:	4323      	orrs	r3, r4
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bf0c      	ite	eq
 80064f2:	2301      	moveq	r3, #1
 80064f4:	2300      	movne	r3, #0
 80064f6:	b2d9      	uxtb	r1, r3
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80064fe:	f361 13c7 	bfi	r3, r1, #7, #1
 8006502:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800650c:	f36f 1386 	bfc	r3, #6, #1
 8006510:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800651a:	f36f 1345 	bfc	r3, #5, #1
 800651e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006528:	f36f 1304 	bfc	r3, #4, #1
 800652c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8006530:	f001 bcb4 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xB7: /* OR A */
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800653a:	2b00      	cmp	r3, #0
 800653c:	bf0c      	ite	eq
 800653e:	2301      	moveq	r3, #1
 8006540:	2300      	movne	r3, #0
 8006542:	b2d9      	uxtb	r1, r3
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800654a:	f361 13c7 	bfi	r3, r1, #7, #1
 800654e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006558:	f36f 1386 	bfc	r3, #6, #1
 800655c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006566:	f36f 1345 	bfc	r3, #5, #1
 800656a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006574:	f36f 1304 	bfc	r3, #4, #1
 8006578:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 800657c:	f001 bc8e 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xB8: /* CP B */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.b;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006586:	b29a      	uxth	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800658e:	b29b      	uxth	r3, r3
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8006596:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	bf0c      	ite	eq
 80065a0:	2301      	moveq	r3, #1
 80065a2:	2300      	movne	r3, #0
 80065a4:	b2d9      	uxtb	r1, r3
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80065ac:	f361 13c7 	bfi	r3, r1, #7, #1
 80065b0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80065ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065be:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.b ^ temp) & 0x10 ? 1 : 0;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065ce:	4053      	eors	r3, r2
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80065d8:	4053      	eors	r3, r2
 80065da:	111b      	asrs	r3, r3, #4
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80065e8:	f361 1345 	bfi	r3, r1, #5, #1
 80065ec:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80065f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80065f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bf14      	ite	ne
 80065fc:	2301      	movne	r3, #1
 80065fe:	2300      	moveq	r3, #0
 8006600:	b2d9      	uxtb	r1, r3
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006608:	f361 1304 	bfi	r3, r1, #4, #1
 800660c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8006610:	f001 bc44 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xB9: /* CP C */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.c;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006622:	b29b      	uxth	r3, r3
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 800662a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf0c      	ite	eq
 8006634:	2301      	moveq	r3, #1
 8006636:	2300      	movne	r3, #0
 8006638:	b2d9      	uxtb	r1, r3
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006640:	f361 13c7 	bfi	r3, r1, #7, #1
 8006644:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800664e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006652:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.c ^ temp) & 0x10 ? 1 : 0;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006662:	4053      	eors	r3, r2
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800666c:	4053      	eors	r3, r2
 800666e:	111b      	asrs	r3, r3, #4
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800667c:	f361 1345 	bfi	r3, r1, #5, #1
 8006680:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8006684:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006688:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf14      	ite	ne
 8006690:	2301      	movne	r3, #1
 8006692:	2300      	moveq	r3, #0
 8006694:	b2d9      	uxtb	r1, r3
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800669c:	f361 1304 	bfi	r3, r1, #4, #1
 80066a0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80066a4:	f001 bbfa 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xBA: /* CP D */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.d;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 80066be:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bf0c      	ite	eq
 80066c8:	2301      	moveq	r3, #1
 80066ca:	2300      	movne	r3, #0
 80066cc:	b2d9      	uxtb	r1, r3
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80066d4:	f361 13c7 	bfi	r3, r1, #7, #1
 80066d8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80066e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.d ^ temp) & 0x10 ? 1 : 0;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80066f6:	4053      	eors	r3, r2
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8006700:	4053      	eors	r3, r2
 8006702:	111b      	asrs	r3, r3, #4
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006710:	f361 1345 	bfi	r3, r1, #5, #1
 8006714:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8006718:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800671c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006720:	2b00      	cmp	r3, #0
 8006722:	bf14      	ite	ne
 8006724:	2301      	movne	r3, #1
 8006726:	2300      	moveq	r3, #0
 8006728:	b2d9      	uxtb	r1, r3
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006730:	f361 1304 	bfi	r3, r1, #4, #1
 8006734:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8006738:	f001 bbb0 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xBB: /* CP E */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.e;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006742:	b29a      	uxth	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800674a:	b29b      	uxth	r3, r3
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8006752:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2d9      	uxtb	r1, r3
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006768:	f361 13c7 	bfi	r3, r1, #7, #1
 800676c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800677a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.e ^ temp) & 0x10 ? 1 : 0;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800678a:	4053      	eors	r3, r2
 800678c:	b2db      	uxtb	r3, r3
 800678e:	461a      	mov	r2, r3
 8006790:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8006794:	4053      	eors	r3, r2
 8006796:	111b      	asrs	r3, r3, #4
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80067a4:	f361 1345 	bfi	r3, r1, #5, #1
 80067a8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80067ac:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80067b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	bf14      	ite	ne
 80067b8:	2301      	movne	r3, #1
 80067ba:	2300      	moveq	r3, #0
 80067bc:	b2d9      	uxtb	r1, r3
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80067c4:	f361 1304 	bfi	r3, r1, #4, #1
 80067c8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80067cc:	f001 bb66 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xBC: /* CP H */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.h;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80067de:	b29b      	uxth	r3, r3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 80067e6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf0c      	ite	eq
 80067f0:	2301      	moveq	r3, #1
 80067f2:	2300      	movne	r3, #0
 80067f4:	b2d9      	uxtb	r1, r3
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80067fc:	f361 13c7 	bfi	r3, r1, #7, #1
 8006800:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800680a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.h ^ temp) & 0x10 ? 1 : 0;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800681e:	4053      	eors	r3, r2
 8006820:	b2db      	uxtb	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006828:	4053      	eors	r3, r2
 800682a:	111b      	asrs	r3, r3, #4
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006838:	f361 1345 	bfi	r3, r1, #5, #1
 800683c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8006840:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8006844:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006848:	2b00      	cmp	r3, #0
 800684a:	bf14      	ite	ne
 800684c:	2301      	movne	r3, #1
 800684e:	2300      	moveq	r3, #0
 8006850:	b2d9      	uxtb	r1, r3
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006858:	f361 1304 	bfi	r3, r1, #4, #1
 800685c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8006860:	f001 bb1c 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xBD: /* CP L */
	{
		uint16_t temp = gb->cpu_reg.a - gb->cpu_reg.l;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800686a:	b29a      	uxth	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006872:	b29b      	uxth	r3, r3
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 800687a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	bf0c      	ite	eq
 8006884:	2301      	moveq	r3, #1
 8006886:	2300      	movne	r3, #0
 8006888:	b2d9      	uxtb	r1, r3
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006890:	f361 13c7 	bfi	r3, r1, #7, #1
 8006894:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800689e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ gb->cpu_reg.l ^ temp) & 0x10 ? 1 : 0;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068b2:	4053      	eors	r3, r2
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80068bc:	4053      	eors	r3, r2
 80068be:	111b      	asrs	r3, r3, #4
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80068cc:	f361 1345 	bfi	r3, r1, #5, #1
 80068d0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 80068d4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80068d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068dc:	2b00      	cmp	r3, #0
 80068de:	bf14      	ite	ne
 80068e0:	2301      	movne	r3, #1
 80068e2:	2300      	moveq	r3, #0
 80068e4:	b2d9      	uxtb	r1, r3
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80068ec:	f361 1304 	bfi	r3, r1, #4, #1
 80068f0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80068f4:	f001 bad2 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	/* TODO: Optimsation by combining similar opcode routines. */
	case 0xBE: /* CP B */
	{
		uint8_t val = __gb_read(gb, gb->cpu_reg.hl);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fa fbf8 	bl	80010f4 <__gb_read>
 8006904:	4603      	mov	r3, r0
 8006906:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		uint16_t temp = gb->cpu_reg.a - val;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006910:	b29a      	uxth	r2, r3
 8006912:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006916:	b29b      	uxth	r3, r3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 800691e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	bf0c      	ite	eq
 8006928:	2301      	moveq	r3, #1
 800692a:	2300      	movne	r3, #0
 800692c:	b2d9      	uxtb	r1, r3
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006934:	f361 13c7 	bfi	r3, r1, #7, #1
 8006938:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006946:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ val ^ temp) & 0x10 ? 1 : 0;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006950:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006954:	4053      	eors	r3, r2
 8006956:	b2db      	uxtb	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800695e:	4053      	eors	r3, r2
 8006960:	111b      	asrs	r3, r3, #4
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800696e:	f361 1345 	bfi	r3, r1, #5, #1
 8006972:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 8006976:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800697a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800697e:	2b00      	cmp	r3, #0
 8006980:	bf14      	ite	ne
 8006982:	2301      	movne	r3, #1
 8006984:	2300      	moveq	r3, #0
 8006986:	b2d9      	uxtb	r1, r3
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800698e:	f361 1304 	bfi	r3, r1, #4, #1
 8006992:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8006996:	f001 ba81 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xBF: /* CP A */
		gb->cpu_reg.f_bits.z = 1;
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80069a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80069ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80069bc:	f36f 1345 	bfc	r3, #5, #1
 80069c0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80069ca:	f36f 1304 	bfc	r3, #4, #1
 80069ce:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80069d2:	f001 ba63 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xC0: /* RET NZ */
		if(!gb->cpu_reg.f_bits.z)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f041 8253 	bne.w	8007e8e <__gb_step_cpu+0x50d2>
		{
			gb->cpu_reg.pc = __gb_read(gb, gb->cpu_reg.sp++);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	b291      	uxth	r1, r2
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	8751      	strh	r1, [r2, #58]	; 0x3a
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fa fb7c 	bl	80010f4 <__gb_read>
 80069fc:	4603      	mov	r3, r0
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	879a      	strh	r2, [r3, #60]	; 0x3c
			gb->cpu_reg.pc |= __gb_read(gb, gb->cpu_reg.sp++) << 8;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	b291      	uxth	r1, r2
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	8751      	strh	r1, [r2, #58]	; 0x3a
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fa fb6e 	bl	80010f4 <__gb_read>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	0219      	lsls	r1, r3, #8
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006a20:	b21a      	sxth	r2, r3
 8006a22:	b20b      	sxth	r3, r1
 8006a24:	4313      	orrs	r3, r2
 8006a26:	b21b      	sxth	r3, r3
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 12;
 8006a2e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006a32:	330c      	adds	r3, #12
 8006a34:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}

		break;
 8006a38:	f001 ba29 	b.w	8007e8e <__gb_step_cpu+0x50d2>

	case 0xC1: /* POP BC */
		gb->cpu_reg.c = __gb_read(gb, gb->cpu_reg.sp++);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	b291      	uxth	r1, r2
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	8751      	strh	r1, [r2, #58]	; 0x3a
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fa fb52 	bl	80010f4 <__gb_read>
 8006a50:	4603      	mov	r3, r0
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		gb->cpu_reg.b = __gb_read(gb, gb->cpu_reg.sp++);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	b291      	uxth	r1, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	8751      	strh	r1, [r2, #58]	; 0x3a
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7fa fb43 	bl	80010f4 <__gb_read>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		break;
 8006a78:	f001 ba10 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xC2: /* JP NZ, imm */
		if(!gb->cpu_reg.f_bits.z)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d12a      	bne.n	8006ae2 <__gb_step_cpu+0x3d26>
		{
			uint16_t temp = __gb_read(gb, gb->cpu_reg.pc++);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	b291      	uxth	r1, r2
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fa fb2a 	bl	80010f4 <__gb_read>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
			temp |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	b291      	uxth	r1, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7fa fb1d 	bl	80010f4 <__gb_read>
 8006aba:	4603      	mov	r3, r0
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	b21a      	sxth	r2, r3
 8006ac0:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	b21b      	sxth	r3, r3
 8006ac8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
			gb->cpu_reg.pc = temp;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8006ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 4;
 8006ad4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006ad8:	3304      	adds	r3, #4
 8006ada:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc += 2;

		break;
 8006ade:	f001 b9dd 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc += 2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8006aee:	f001 b9d5 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xC3: /* JP imm */
	{
		uint16_t temp = __gb_read(gb, gb->cpu_reg.pc++);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	b291      	uxth	r1, r2
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7fa faf7 	bl	80010f4 <__gb_read>
 8006b06:	4603      	mov	r3, r0
 8006b08:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		temp |= __gb_read(gb, gb->cpu_reg.pc) << 8;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fa faee 	bl	80010f4 <__gb_read>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	021b      	lsls	r3, r3, #8
 8006b1c:	b21a      	sxth	r2, r3
 8006b1e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8006b22:	4313      	orrs	r3, r2
 8006b24:	b21b      	sxth	r3, r3
 8006b26:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		gb->cpu_reg.pc = temp;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8006b30:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8006b32:	f001 b9b3 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xC4: /* CALL NZ imm */
		if(!gb->cpu_reg.f_bits.z)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d14c      	bne.n	8006be0 <__gb_step_cpu+0x3e24>
		{
			uint16_t temp = __gb_read(gb, gb->cpu_reg.pc++);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	b291      	uxth	r1, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7fa facd 	bl	80010f4 <__gb_read>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			temp |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	b291      	uxth	r1, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7fa fac0 	bl	80010f4 <__gb_read>
 8006b74:	4603      	mov	r3, r0
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	b21a      	sxth	r2, r3
 8006b7a:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	b21b      	sxth	r3, r3
 8006b82:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
			__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006b96:	4619      	mov	r1, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006b9c:	0a1b      	lsrs	r3, r3, #8
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7fa fcdf 	bl	8001568 <__gb_write>
			__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006bba:	4619      	mov	r1, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7fa fccf 	bl	8001568 <__gb_write>
			gb->cpu_reg.pc = temp;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8006bd0:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 12;
 8006bd2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006bd6:	330c      	adds	r3, #12
 8006bd8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc += 2;

		break;
 8006bdc:	f001 b95e 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc += 2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006be4:	3302      	adds	r3, #2
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8006bec:	f001 b956 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xC5: /* PUSH BC */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.b);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006c00:	4619      	mov	r1, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fa fcac 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.c);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006c20:	4619      	mov	r1, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fa fc9c 	bl	8001568 <__gb_write>
		break;
 8006c30:	f001 b934 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xC6: /* ADD A, imm */
	{
		/* Taken from SameBoy, which is released under MIT Licence. */
		uint8_t value = __gb_read(gb, gb->cpu_reg.pc++);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006c38:	1c5a      	adds	r2, r3, #1
 8006c3a:	b291      	uxth	r1, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fa fa56 	bl	80010f4 <__gb_read>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		uint16_t calc = gb->cpu_reg.a + value;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
		gb->cpu_reg.f_bits.z = ((uint8_t)calc == 0) ? 1 : 0;
 8006c62:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	bf0c      	ite	eq
 8006c6c:	2301      	moveq	r3, #1
 8006c6e:	2300      	movne	r3, #0
 8006c70:	b2d9      	uxtb	r1, r3
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006c78:	f361 13c7 	bfi	r3, r1, #7, #1
 8006c7c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			((gb->cpu_reg.a & 0xF) + (value & 0xF) > 0x0F) ? 1 : 0;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c86:	f003 020f 	and.w	r2, r3, #15
 8006c8a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	4413      	add	r3, r2
 8006c94:	2b0f      	cmp	r3, #15
 8006c96:	bfcc      	ite	gt
 8006c98:	2301      	movgt	r3, #1
 8006c9a:	2300      	movle	r3, #0
 8006c9c:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006ca4:	f361 1345 	bfi	r3, r1, #5, #1
 8006ca8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = calc > 0xFF ? 1 : 0;
 8006cac:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006cb0:	2bff      	cmp	r3, #255	; 0xff
 8006cb2:	bf8c      	ite	hi
 8006cb4:	2301      	movhi	r3, #1
 8006cb6:	2300      	movls	r3, #0
 8006cb8:	b2d9      	uxtb	r1, r3
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006cc0:	f361 1304 	bfi	r3, r1, #4, #1
 8006cc4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8006cce:	f36f 1386 	bfc	r3, #6, #1
 8006cd2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (uint8_t)calc;
 8006cd6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8006ce2:	f001 b8db 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xC7: /* RST 0x0000 */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006cfc:	0a1b      	lsrs	r3, r3, #8
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fa fc2f 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7fa fc1f 	bl	8001568 <__gb_write>
		gb->cpu_reg.pc = 0x0000;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8006d30:	f001 b8b4 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xC8: /* RET Z */
		if(gb->cpu_reg.f_bits.z)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f001 80a6 	beq.w	8007e92 <__gb_step_cpu+0x50d6>
		{
			uint16_t temp = __gb_read(gb, gb->cpu_reg.sp++);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	b291      	uxth	r1, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	8751      	strh	r1, [r2, #58]	; 0x3a
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7fa f9cd 	bl	80010f4 <__gb_read>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			temp |= __gb_read(gb, gb->cpu_reg.sp++) << 8;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	b291      	uxth	r1, r2
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	8751      	strh	r1, [r2, #58]	; 0x3a
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fa f9c0 	bl	80010f4 <__gb_read>
 8006d74:	4603      	mov	r3, r0
 8006d76:	021b      	lsls	r3, r3, #8
 8006d78:	b21a      	sxth	r2, r3
 8006d7a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	b21b      	sxth	r3, r3
 8006d82:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			gb->cpu_reg.pc = temp;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8006d8c:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 12;
 8006d8e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006d92:	330c      	adds	r3, #12
 8006d94:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}

		break;
 8006d98:	f001 b87b 	b.w	8007e92 <__gb_step_cpu+0x50d6>

	case 0xC9: /* RET */
	{
		uint16_t temp = __gb_read(gb, gb->cpu_reg.sp++);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	b291      	uxth	r1, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	8751      	strh	r1, [r2, #58]	; 0x3a
 8006da8:	4619      	mov	r1, r3
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fa f9a2 	bl	80010f4 <__gb_read>
 8006db0:	4603      	mov	r3, r0
 8006db2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		temp |= __gb_read(gb, gb->cpu_reg.sp++) << 8;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	b291      	uxth	r1, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	8751      	strh	r1, [r2, #58]	; 0x3a
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7fa f995 	bl	80010f4 <__gb_read>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	b21a      	sxth	r2, r3
 8006dd0:	f9b7 3088 	ldrsh.w	r3, [r7, #136]	; 0x88
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	b21b      	sxth	r3, r3
 8006dd8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		gb->cpu_reg.pc = temp;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8006de2:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8006de4:	f001 b85a 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xCA: /* JP Z, imm */
		if(gb->cpu_reg.f_bits.z)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006dee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d02a      	beq.n	8006e4e <__gb_step_cpu+0x4092>
		{
			uint16_t temp = __gb_read(gb, gb->cpu_reg.pc++);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	b291      	uxth	r1, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fa f974 	bl	80010f4 <__gb_read>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			temp |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	b291      	uxth	r1, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7fa f967 	bl	80010f4 <__gb_read>
 8006e26:	4603      	mov	r3, r0
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	b21a      	sxth	r2, r3
 8006e2c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006e30:	4313      	orrs	r3, r2
 8006e32:	b21b      	sxth	r3, r3
 8006e34:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
			gb->cpu_reg.pc = temp;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006e3e:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 4;
 8006e40:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006e44:	3304      	adds	r3, #4
 8006e46:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc += 2;

		break;
 8006e4a:	f001 b827 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc += 2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006e52:	3302      	adds	r3, #2
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8006e5a:	f001 b81f 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xCB: /* CB INST */
		inst_cycles = __gb_execute_cb(gb);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fa ffb2 	bl	8001dc8 <__gb_execute_cb>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		break;
 8006e6a:	f001 b817 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xCC: /* CALL Z, imm */
		if(gb->cpu_reg.f_bits.z)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d04c      	beq.n	8006f18 <__gb_step_cpu+0x415c>
		{
			uint16_t temp = __gb_read(gb, gb->cpu_reg.pc++);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	b291      	uxth	r1, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fa f931 	bl	80010f4 <__gb_read>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			temp |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	b291      	uxth	r1, r2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fa f924 	bl	80010f4 <__gb_read>
 8006eac:	4603      	mov	r3, r0
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	b21a      	sxth	r2, r3
 8006eb2:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	b21b      	sxth	r3, r3
 8006eba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
			__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006ece:	4619      	mov	r1, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006ed4:	0a1b      	lsrs	r3, r3, #8
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fa fb43 	bl	8001568 <__gb_write>
			__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7fa fb33 	bl	8001568 <__gb_write>
			gb->cpu_reg.pc = temp;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006f08:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 12;
 8006f0a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006f0e:	330c      	adds	r3, #12
 8006f10:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc += 2;

		break;
 8006f14:	f000 bfc2 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc += 2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006f1c:	3302      	adds	r3, #2
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8006f24:	f000 bfba 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xCD: /* CALL imm */
	{
		uint16_t addr = __gb_read(gb, gb->cpu_reg.pc++);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	b291      	uxth	r1, r2
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fa f8dc 	bl	80010f4 <__gb_read>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		addr |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	b291      	uxth	r1, r2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fa f8cf 	bl	80010f4 <__gb_read>
 8006f56:	4603      	mov	r3, r0
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	b21a      	sxth	r2, r3
 8006f5c:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8006f60:	4313      	orrs	r3, r2
 8006f62:	b21b      	sxth	r3, r3
 8006f64:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006f78:	4619      	mov	r1, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fa faee 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	875a      	strh	r2, [r3, #58]	; 0x3a
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fa fade 	bl	8001568 <__gb_write>
		gb->cpu_reg.pc = addr;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006fb2:	879a      	strh	r2, [r3, #60]	; 0x3c
	}
	break;
 8006fb4:	f000 bf72 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xCE: /* ADC A, imm */
	{
		uint8_t value, a, carry;
		value = __gb_read(gb, gb->cpu_reg.pc++);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	b291      	uxth	r1, r2
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	8791      	strh	r1, [r2, #60]	; 0x3c
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7fa f894 	bl	80010f4 <__gb_read>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		a = gb->cpu_reg.a;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fd8:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		carry = gb->cpu_reg.f_bits.c;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fe2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		gb->cpu_reg.a = a + value + carry;
 8006fec:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 8006ff0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006ff4:	4413      	add	r3, r2
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8006ffc:	4413      	add	r3, r2
 8006ffe:	b2da      	uxtb	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

		gb->cpu_reg.f_bits.z = gb->cpu_reg.a == 0 ? 1 : 0;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800700c:	2b00      	cmp	r3, #0
 800700e:	bf0c      	ite	eq
 8007010:	2301      	moveq	r3, #1
 8007012:	2300      	movne	r3, #0
 8007014:	b2d9      	uxtb	r1, r3
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800701c:	f361 13c7 	bfi	r3, r1, #7, #1
 8007020:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			((a & 0xF) + (value & 0xF) + carry > 0x0F) ? 1 : 0;
 8007024:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8007028:	f003 020f 	and.w	r2, r3, #15
 800702c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	441a      	add	r2, r3
 8007036:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800703a:	4413      	add	r3, r2
 800703c:	2b0f      	cmp	r3, #15
 800703e:	bfcc      	ite	gt
 8007040:	2301      	movgt	r3, #1
 8007042:	2300      	movle	r3, #0
 8007044:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800704c:	f361 1345 	bfi	r3, r1, #5, #1
 8007050:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c =
			(((uint16_t) a) + ((uint16_t) value) + carry > 0xFF) ? 1 : 0;
 8007054:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 8007058:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800705c:	441a      	add	r2, r3
 800705e:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8007062:	4413      	add	r3, r2
 8007064:	2bff      	cmp	r3, #255	; 0xff
 8007066:	bfcc      	ite	gt
 8007068:	2301      	movgt	r3, #1
 800706a:	2300      	movle	r3, #0
 800706c:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.c =
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007074:	f361 1304 	bfi	r3, r1, #4, #1
 8007078:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007082:	f36f 1386 	bfc	r3, #6, #1
 8007086:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 800708a:	f000 bf07 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xCF: /* RST 0x0008 */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	875a      	strh	r2, [r3, #58]	; 0x3a
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800709e:	4619      	mov	r1, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80070a4:	0a1b      	lsrs	r3, r3, #8
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	461a      	mov	r2, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fa fa5b 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	875a      	strh	r2, [r3, #58]	; 0x3a
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80070c2:	4619      	mov	r1, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7fa fa4b 	bl	8001568 <__gb_write>
		gb->cpu_reg.pc = 0x0008;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2208      	movs	r2, #8
 80070d6:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 80070d8:	f000 bee0 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xD0: /* RET NC */
		if(!gb->cpu_reg.f_bits.c)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 86d4 	bne.w	8007e96 <__gb_step_cpu+0x50da>
		{
			uint16_t temp = __gb_read(gb, gb->cpu_reg.sp++);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	b291      	uxth	r1, r2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	8751      	strh	r1, [r2, #58]	; 0x3a
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7f9 fff9 	bl	80010f4 <__gb_read>
 8007102:	4603      	mov	r3, r0
 8007104:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
			temp |= __gb_read(gb, gb->cpu_reg.sp++) << 8;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	b291      	uxth	r1, r2
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	8751      	strh	r1, [r2, #58]	; 0x3a
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7f9 ffec 	bl	80010f4 <__gb_read>
 800711c:	4603      	mov	r3, r0
 800711e:	021b      	lsls	r3, r3, #8
 8007120:	b21a      	sxth	r2, r3
 8007122:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8007126:	4313      	orrs	r3, r2
 8007128:	b21b      	sxth	r3, r3
 800712a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
			gb->cpu_reg.pc = temp;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8007134:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 12;
 8007136:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800713a:	330c      	adds	r3, #12
 800713c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}

		break;
 8007140:	f000 bea9 	b.w	8007e96 <__gb_step_cpu+0x50da>

	case 0xD1: /* POP DE */
		gb->cpu_reg.e = __gb_read(gb, gb->cpu_reg.sp++);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	b291      	uxth	r1, r2
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	8751      	strh	r1, [r2, #58]	; 0x3a
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7f9 ffce 	bl	80010f4 <__gb_read>
 8007158:	4603      	mov	r3, r0
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		gb->cpu_reg.d = __gb_read(gb, gb->cpu_reg.sp++);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	b291      	uxth	r1, r2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	8751      	strh	r1, [r2, #58]	; 0x3a
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7f9 ffbf 	bl	80010f4 <__gb_read>
 8007176:	4603      	mov	r3, r0
 8007178:	461a      	mov	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		break;
 8007180:	f000 be8c 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xD2: /* JP NC, imm */
		if(!gb->cpu_reg.f_bits.c)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800718a:	f003 0310 	and.w	r3, r3, #16
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d12a      	bne.n	80071ea <__gb_step_cpu+0x442e>
		{
			uint16_t temp =  __gb_read(gb, gb->cpu_reg.pc++);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	b291      	uxth	r1, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	8791      	strh	r1, [r2, #60]	; 0x3c
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7f9 ffa6 	bl	80010f4 <__gb_read>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			temp |=  __gb_read(gb, gb->cpu_reg.pc++) << 8;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	b291      	uxth	r1, r2
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	8791      	strh	r1, [r2, #60]	; 0x3c
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7f9 ff99 	bl	80010f4 <__gb_read>
 80071c2:	4603      	mov	r3, r0
 80071c4:	021b      	lsls	r3, r3, #8
 80071c6:	b21a      	sxth	r2, r3
 80071c8:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80071cc:	4313      	orrs	r3, r2
 80071ce:	b21b      	sxth	r3, r3
 80071d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
			gb->cpu_reg.pc = temp;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071da:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 4;
 80071dc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80071e0:	3304      	adds	r3, #4
 80071e2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc += 2;

		break;
 80071e6:	f000 be59 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc += 2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80071ee:	3302      	adds	r3, #2
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 80071f6:	f000 be51 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xD4: /* CALL NC, imm */
		if(!gb->cpu_reg.f_bits.c)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007200:	f003 0310 	and.w	r3, r3, #16
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d14c      	bne.n	80072a4 <__gb_step_cpu+0x44e8>
		{
			uint16_t temp = __gb_read(gb, gb->cpu_reg.pc++);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	b291      	uxth	r1, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7f9 ff6b 	bl	80010f4 <__gb_read>
 800721e:	4603      	mov	r3, r0
 8007220:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
			temp |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	b291      	uxth	r1, r2
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7f9 ff5e 	bl	80010f4 <__gb_read>
 8007238:	4603      	mov	r3, r0
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	b21a      	sxth	r2, r3
 800723e:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8007242:	4313      	orrs	r3, r2
 8007244:	b21b      	sxth	r3, r3
 8007246:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
			__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800724e:	3b01      	subs	r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800725a:	4619      	mov	r1, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007260:	0a1b      	lsrs	r3, r3, #8
 8007262:	b29b      	uxth	r3, r3
 8007264:	b2db      	uxtb	r3, r3
 8007266:	461a      	mov	r2, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7fa f97d 	bl	8001568 <__gb_write>
			__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	875a      	strh	r2, [r3, #58]	; 0x3a
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800727e:	4619      	mov	r1, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	461a      	mov	r2, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7fa f96d 	bl	8001568 <__gb_write>
			gb->cpu_reg.pc = temp;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8007294:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 12;
 8007296:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800729a:	330c      	adds	r3, #12
 800729c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc += 2;

		break;
 80072a0:	f000 bdfc 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc += 2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80072a8:	3302      	adds	r3, #2
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 80072b0:	f000 bdf4 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xD5: /* PUSH DE */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.d);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	875a      	strh	r2, [r3, #58]	; 0x3a
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80072c4:	4619      	mov	r1, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80072cc:	461a      	mov	r2, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fa f94a 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.e);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	875a      	strh	r2, [r3, #58]	; 0x3a
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80072e4:	4619      	mov	r1, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80072ec:	461a      	mov	r2, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fa f93a 	bl	8001568 <__gb_write>
		break;
 80072f4:	f000 bdd2 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xD6: /* SUB imm */
	{
		uint8_t val = __gb_read(gb, gb->cpu_reg.pc++);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	b291      	uxth	r1, r2
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7f9 fef4 	bl	80010f4 <__gb_read>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		uint16_t temp = gb->cpu_reg.a - val;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007318:	b29a      	uxth	r2, r3
 800731a:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800731e:	b29b      	uxth	r3, r3
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
		gb->cpu_reg.f_bits.z = ((temp & 0xFF) == 0x00);
 8007326:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	bf0c      	ite	eq
 8007330:	2301      	moveq	r3, #1
 8007332:	2300      	movne	r3, #0
 8007334:	b2d9      	uxtb	r1, r3
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800733c:	f361 13c7 	bfi	r3, r1, #7, #1
 8007340:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800734a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800734e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ val ^ temp) & 0x10 ? 1 : 0;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007358:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800735c:	4053      	eors	r3, r2
 800735e:	b2db      	uxtb	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007366:	4053      	eors	r3, r2
 8007368:	111b      	asrs	r3, r3, #4
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007376:	f361 1345 	bfi	r3, r1, #5, #1
 800737a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp & 0xFF00) ? 1 : 0;
 800737e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007382:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf14      	ite	ne
 800738a:	2301      	movne	r3, #1
 800738c:	2300      	moveq	r3, #0
 800738e:	b2d9      	uxtb	r1, r3
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007396:	f361 1304 	bfi	r3, r1, #4, #1
 800739a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp & 0xFF);
 800739e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 80073aa:	f000 bd77 	b.w	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xD7: /* RST 0x0010 */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	875a      	strh	r2, [r3, #58]	; 0x3a
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80073be:	4619      	mov	r1, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80073c4:	0a1b      	lsrs	r3, r3, #8
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7fa f8cb 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	875a      	strh	r2, [r3, #58]	; 0x3a
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80073e2:	4619      	mov	r1, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7fa f8bb 	bl	8001568 <__gb_write>
		gb->cpu_reg.pc = 0x0010;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2210      	movs	r2, #16
 80073f6:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 80073f8:	f000 bd50 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xD8: /* RET C */
		if(gb->cpu_reg.f_bits.c)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8546 	beq.w	8007e9a <__gb_step_cpu+0x50de>
		{
			uint16_t temp = __gb_read(gb, gb->cpu_reg.sp++);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	b291      	uxth	r1, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	8751      	strh	r1, [r2, #58]	; 0x3a
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7f9 fe69 	bl	80010f4 <__gb_read>
 8007422:	4603      	mov	r3, r0
 8007424:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
			temp |= __gb_read(gb, gb->cpu_reg.sp++) << 8;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	b291      	uxth	r1, r2
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	8751      	strh	r1, [r2, #58]	; 0x3a
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7f9 fe5c 	bl	80010f4 <__gb_read>
 800743c:	4603      	mov	r3, r0
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	b21a      	sxth	r2, r3
 8007442:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8007446:	4313      	orrs	r3, r2
 8007448:	b21b      	sxth	r3, r3
 800744a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
			gb->cpu_reg.pc = temp;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8007454:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 12;
 8007456:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800745a:	330c      	adds	r3, #12
 800745c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}

		break;
 8007460:	f000 bd1b 	b.w	8007e9a <__gb_step_cpu+0x50de>

	case 0xD9: /* RETI */
	{
		uint16_t temp = __gb_read(gb, gb->cpu_reg.sp++);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	b291      	uxth	r1, r2
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	8751      	strh	r1, [r2, #58]	; 0x3a
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7f9 fe3e 	bl	80010f4 <__gb_read>
 8007478:	4603      	mov	r3, r0
 800747a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		temp |= __gb_read(gb, gb->cpu_reg.sp++) << 8;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	b291      	uxth	r1, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	8751      	strh	r1, [r2, #58]	; 0x3a
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7f9 fe31 	bl	80010f4 <__gb_read>
 8007492:	4603      	mov	r3, r0
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	b21a      	sxth	r2, r3
 8007498:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 800749c:	4313      	orrs	r3, r2
 800749e:	b21b      	sxth	r3, r3
 80074a0:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		gb->cpu_reg.pc = temp;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80074aa:	879a      	strh	r2, [r3, #60]	; 0x3c
		gb->gb_ime = 1;
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	7e13      	ldrb	r3, [r2, #24]
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	7613      	strb	r3, [r2, #24]
	}
	break;
 80074b6:	f000 bcf1 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xDA: /* JP C, imm */
		if(gb->cpu_reg.f_bits.c)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d02a      	beq.n	8007520 <__gb_step_cpu+0x4764>
		{
			uint16_t addr = __gb_read(gb, gb->cpu_reg.pc++);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	b291      	uxth	r1, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	8791      	strh	r1, [r2, #60]	; 0x3c
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7f9 fe0b 	bl	80010f4 <__gb_read>
 80074de:	4603      	mov	r3, r0
 80074e0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			addr |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	b291      	uxth	r1, r2
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	8791      	strh	r1, [r2, #60]	; 0x3c
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7f9 fdfe 	bl	80010f4 <__gb_read>
 80074f8:	4603      	mov	r3, r0
 80074fa:	021b      	lsls	r3, r3, #8
 80074fc:	b21a      	sxth	r2, r3
 80074fe:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 8007502:	4313      	orrs	r3, r2
 8007504:	b21b      	sxth	r3, r3
 8007506:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			gb->cpu_reg.pc = addr;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8007510:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 4;
 8007512:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8007516:	3304      	adds	r3, #4
 8007518:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc += 2;

		break;
 800751c:	f000 bcbe 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc += 2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007524:	3302      	adds	r3, #2
 8007526:	b29a      	uxth	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 800752c:	f000 bcb6 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xDC: /* CALL C, imm */
		if(gb->cpu_reg.f_bits.c)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007536:	f003 0310 	and.w	r3, r3, #16
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b00      	cmp	r3, #0
 800753e:	d04c      	beq.n	80075da <__gb_step_cpu+0x481e>
		{
			uint16_t temp = __gb_read(gb, gb->cpu_reg.pc++);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	b291      	uxth	r1, r2
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	8791      	strh	r1, [r2, #60]	; 0x3c
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7f9 fdd0 	bl	80010f4 <__gb_read>
 8007554:	4603      	mov	r3, r0
 8007556:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			temp |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	b291      	uxth	r1, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7f9 fdc3 	bl	80010f4 <__gb_read>
 800756e:	4603      	mov	r3, r0
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	b21a      	sxth	r2, r3
 8007574:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8007578:	4313      	orrs	r3, r2
 800757a:	b21b      	sxth	r3, r3
 800757c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007590:	4619      	mov	r1, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007596:	0a1b      	lsrs	r3, r3, #8
 8007598:	b29b      	uxth	r3, r3
 800759a:	b2db      	uxtb	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7f9 ffe2 	bl	8001568 <__gb_write>
			__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	875a      	strh	r2, [r3, #58]	; 0x3a
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80075b4:	4619      	mov	r1, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7f9 ffd2 	bl	8001568 <__gb_write>
			gb->cpu_reg.pc = temp;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80075ca:	879a      	strh	r2, [r3, #60]	; 0x3c
			inst_cycles += 12;
 80075cc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80075d0:	330c      	adds	r3, #12
 80075d2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		}
		else
			gb->cpu_reg.pc += 2;

		break;
 80075d6:	f000 bc61 	b.w	8007e9c <__gb_step_cpu+0x50e0>
			gb->cpu_reg.pc += 2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80075de:	3302      	adds	r3, #2
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 80075e6:	f000 bc59 	b.w	8007e9c <__gb_step_cpu+0x50e0>

	case 0xDE: /* SBC A, imm */
	{
		uint8_t temp_8 = __gb_read(gb, gb->cpu_reg.pc++);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80075ee:	1c5a      	adds	r2, r3, #1
 80075f0:	b291      	uxth	r1, r2
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	8791      	strh	r1, [r2, #60]	; 0x3c
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7f9 fd7b 	bl	80010f4 <__gb_read>
 80075fe:	4603      	mov	r3, r0
 8007600:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
		uint16_t temp_16 = gb->cpu_reg.a - temp_8 - gb->cpu_reg.f_bits.c;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800760a:	b29a      	uxth	r2, r3
 800760c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8007610:	b29b      	uxth	r3, r3
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	b29a      	uxth	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800761c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007620:	b2db      	uxtb	r3, r3
 8007622:	b29b      	uxth	r3, r3
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
		gb->cpu_reg.f_bits.z = ((temp_16 & 0xFF) == 0x00);
 800762a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	bf0c      	ite	eq
 8007634:	2301      	moveq	r3, #1
 8007636:	2300      	movne	r3, #0
 8007638:	b2d9      	uxtb	r1, r3
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007640:	f361 13c7 	bfi	r3, r1, #7, #1
 8007644:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800764e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007652:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h =
			(gb->cpu_reg.a ^ temp_8 ^ temp_16) & 0x10 ? 1 : 0;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800765c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8007660:	4053      	eors	r3, r2
 8007662:	b2db      	uxtb	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800766a:	4053      	eors	r3, r2
 800766c:	111b      	asrs	r3, r3, #4
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	b2d9      	uxtb	r1, r3
		gb->cpu_reg.f_bits.h =
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800767a:	f361 1345 	bfi	r3, r1, #5, #1
 800767e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp_16 & 0xFF00) ? 1 : 0;
 8007682:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007686:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800768a:	2b00      	cmp	r3, #0
 800768c:	bf14      	ite	ne
 800768e:	2301      	movne	r3, #1
 8007690:	2300      	moveq	r3, #0
 8007692:	b2d9      	uxtb	r1, r3
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800769a:	f361 1304 	bfi	r3, r1, #4, #1
 800769e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = (temp_16 & 0xFF);
 80076a2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80076a6:	b2da      	uxtb	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 80076ae:	e3f5      	b.n	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xDF: /* RST 0x0018 */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	875a      	strh	r2, [r3, #58]	; 0x3a
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80076c0:	4619      	mov	r1, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7f9 ff4a 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	875a      	strh	r2, [r3, #58]	; 0x3a
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80076e4:	4619      	mov	r1, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	461a      	mov	r2, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7f9 ff3a 	bl	8001568 <__gb_write>
		gb->cpu_reg.pc = 0x0018;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2218      	movs	r2, #24
 80076f8:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 80076fa:	e3cf      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xE0: /* LD (0xFF00+imm), A */
		__gb_write(gb, 0xFF00 | __gb_read(gb, gb->cpu_reg.pc++),
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	b291      	uxth	r1, r2
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7f9 fcf2 	bl	80010f4 <__gb_read>
 8007710:	4603      	mov	r3, r0
 8007712:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8007716:	4619      	mov	r1, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800771e:	461a      	mov	r2, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f7f9 ff21 	bl	8001568 <__gb_write>
			   gb->cpu_reg.a);
		break;
 8007726:	e3b9      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xE1: /* POP HL */
		gb->cpu_reg.l = __gb_read(gb, gb->cpu_reg.sp++);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	b291      	uxth	r1, r2
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	8751      	strh	r1, [r2, #58]	; 0x3a
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7f9 fcdc 	bl	80010f4 <__gb_read>
 800773c:	4603      	mov	r3, r0
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		gb->cpu_reg.h = __gb_read(gb, gb->cpu_reg.sp++);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	b291      	uxth	r1, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	8751      	strh	r1, [r2, #58]	; 0x3a
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7f9 fccd 	bl	80010f4 <__gb_read>
 800775a:	4603      	mov	r3, r0
 800775c:	461a      	mov	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		break;
 8007764:	e39a      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xE2: /* LD (C), A */
		__gb_write(gb, 0xFF00 | gb->cpu_reg.c, gb->cpu_reg.a);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800776c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8007770:	4619      	mov	r1, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007778:	461a      	mov	r2, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f7f9 fef4 	bl	8001568 <__gb_write>
		break;
 8007780:	e38c      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xE5: /* PUSH HL */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.h);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007792:	4619      	mov	r1, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800779a:	461a      	mov	r2, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7f9 fee3 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.l);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	875a      	strh	r2, [r3, #58]	; 0x3a
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80077b2:	4619      	mov	r1, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077ba:	461a      	mov	r2, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7f9 fed3 	bl	8001568 <__gb_write>
		break;
 80077c2:	e36b      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xE6: /* AND imm */
		/* TODO: Optimisation? */
		gb->cpu_reg.a = gb->cpu_reg.a & __gb_read(gb, gb->cpu_reg.pc++);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	b291      	uxth	r1, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	8791      	strh	r1, [r2, #60]	; 0x3c
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7f9 fc8b 	bl	80010f4 <__gb_read>
 80077de:	4603      	mov	r3, r0
 80077e0:	4023      	ands	r3, r4
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2d9      	uxtb	r1, r3
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007800:	f361 13c7 	bfi	r3, r1, #7, #1
 8007804:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800780e:	f36f 1386 	bfc	r3, #6, #1
 8007812:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 1;
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800781c:	f043 0320 	orr.w	r3, r3, #32
 8007820:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800782a:	f36f 1304 	bfc	r3, #4, #1
 800782e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8007832:	e333      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xE7: /* RST 0x0020 */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007844:	4619      	mov	r1, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	b29b      	uxth	r3, r3
 800784e:	b2db      	uxtb	r3, r3
 8007850:	461a      	mov	r2, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7f9 fe88 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007868:	4619      	mov	r1, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800786e:	b2db      	uxtb	r3, r3
 8007870:	461a      	mov	r2, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7f9 fe78 	bl	8001568 <__gb_write>
		gb->cpu_reg.pc = 0x0020;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2220      	movs	r2, #32
 800787c:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 800787e:	e30d      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xE8: /* ADD SP, imm */
	{
		int8_t offset = (int8_t) __gb_read(gb, gb->cpu_reg.pc++);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	b291      	uxth	r1, r2
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	8791      	strh	r1, [r2, #60]	; 0x3c
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7f9 fc30 	bl	80010f4 <__gb_read>
 8007894:	4603      	mov	r3, r0
 8007896:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
		/* TODO: Move flag assignments for optimisation. */
		gb->cpu_reg.f_bits.z = 0;
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80078a0:	f36f 13c7 	bfc	r3, #7, #1
 80078a4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80078ae:	f36f 1386 	bfc	r3, #6, #1
 80078b2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.sp & 0xF) + (offset & 0xF) > 0xF) ? 1 : 0;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80078ba:	f003 020f 	and.w	r2, r3, #15
 80078be:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	4413      	add	r3, r2
 80078c8:	2b0f      	cmp	r3, #15
 80078ca:	bfcc      	ite	gt
 80078cc:	2301      	movgt	r3, #1
 80078ce:	2300      	movle	r3, #0
 80078d0:	b2d9      	uxtb	r1, r3
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80078d8:	f361 1345 	bfi	r3, r1, #5, #1
 80078dc:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = ((gb->cpu_reg.sp & 0xFF) + (offset & 0xFF) > 0xFF);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	f997 30a9 	ldrsb.w	r3, [r7, #169]	; 0xa9
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	4413      	add	r3, r2
 80078ee:	2bff      	cmp	r3, #255	; 0xff
 80078f0:	bfcc      	ite	gt
 80078f2:	2301      	movgt	r3, #1
 80078f4:	2300      	movle	r3, #0
 80078f6:	b2d9      	uxtb	r1, r3
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80078fe:	f361 1304 	bfi	r3, r1, #4, #1
 8007902:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.sp += offset;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800790a:	f997 30a9 	ldrsb.w	r3, [r7, #169]	; 0xa9
 800790e:	b29b      	uxth	r3, r3
 8007910:	4413      	add	r3, r2
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	875a      	strh	r2, [r3, #58]	; 0x3a
		break;
 8007918:	e2c0      	b.n	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xE9: /* JP (HL) */
		gb->cpu_reg.pc = gb->cpu_reg.hl;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8007922:	e2bb      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xEA: /* LD (imm), A */
	{
		uint16_t addr = __gb_read(gb, gb->cpu_reg.pc++);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	b291      	uxth	r1, r2
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7f9 fbde 	bl	80010f4 <__gb_read>
 8007938:	4603      	mov	r3, r0
 800793a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		addr |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	b291      	uxth	r1, r2
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	8791      	strh	r1, [r2, #60]	; 0x3c
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7f9 fbd1 	bl	80010f4 <__gb_read>
 8007952:	4603      	mov	r3, r0
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	b21a      	sxth	r2, r3
 8007958:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 800795c:	4313      	orrs	r3, r2
 800795e:	b21b      	sxth	r3, r3
 8007960:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
		__gb_write(gb, addr, gb->cpu_reg.a);
 8007964:	f8b7 10aa 	ldrh.w	r1, [r7, #170]	; 0xaa
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800796e:	461a      	mov	r2, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7f9 fdf9 	bl	8001568 <__gb_write>
		break;
 8007976:	e291      	b.n	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xEE: /* XOR imm */
		gb->cpu_reg.a = gb->cpu_reg.a ^ __gb_read(gb, gb->cpu_reg.pc++);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	b291      	uxth	r1, r2
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	8791      	strh	r1, [r2, #60]	; 0x3c
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7f9 fbb1 	bl	80010f4 <__gb_read>
 8007992:	4603      	mov	r3, r0
 8007994:	4063      	eors	r3, r4
 8007996:	b2da      	uxtb	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bf0c      	ite	eq
 80079a8:	2301      	moveq	r3, #1
 80079aa:	2300      	movne	r3, #0
 80079ac:	b2d9      	uxtb	r1, r3
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80079b4:	f361 13c7 	bfi	r3, r1, #7, #1
 80079b8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80079c2:	f36f 1386 	bfc	r3, #6, #1
 80079c6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80079d0:	f36f 1345 	bfc	r3, #5, #1
 80079d4:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 80079de:	f36f 1304 	bfc	r3, #4, #1
 80079e2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 80079e6:	e259      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xEF: /* RST 0x0028 */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	875a      	strh	r2, [r3, #58]	; 0x3a
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80079f8:	4619      	mov	r1, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80079fe:	0a1b      	lsrs	r3, r3, #8
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	461a      	mov	r2, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7f9 fdae 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7f9 fd9e 	bl	8001568 <__gb_write>
		gb->cpu_reg.pc = 0x0028;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2228      	movs	r2, #40	; 0x28
 8007a30:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8007a32:	e233      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xF0: /* LD A, (0xFF00+imm) */
		gb->cpu_reg.a =
			__gb_read(gb, 0xFF00 | __gb_read(gb, gb->cpu_reg.pc++));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	b291      	uxth	r1, r2
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7f9 fb56 	bl	80010f4 <__gb_read>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7f9 fb4f 	bl	80010f4 <__gb_read>
 8007a56:	4603      	mov	r3, r0
 8007a58:	461a      	mov	r2, r3
		gb->cpu_reg.a =
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8007a60:	e21c      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xF1: /* POP AF */
	{
		uint8_t temp_8 = __gb_read(gb, gb->cpu_reg.sp++);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	b291      	uxth	r1, r2
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	8751      	strh	r1, [r2, #58]	; 0x3a
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7f9 fb3f 	bl	80010f4 <__gb_read>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
		gb->cpu_reg.f_bits.z = (temp_8 >> 7) & 1;
 8007a7c:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8007a80:	09db      	lsrs	r3, r3, #7
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	b2d9      	uxtb	r1, r3
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007a90:	f361 13c7 	bfi	r3, r1, #7, #1
 8007a94:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = (temp_8 >> 6) & 1;
 8007a98:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8007a9c:	099b      	lsrs	r3, r3, #6
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	b2d9      	uxtb	r1, r3
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007aac:	f361 1386 	bfi	r3, r1, #6, #1
 8007ab0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = (temp_8 >> 5) & 1;
 8007ab4:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	b2d9      	uxtb	r1, r3
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007ac8:	f361 1345 	bfi	r3, r1, #5, #1
 8007acc:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp_8 >> 4) & 1;
 8007ad0:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8007ad4:	091b      	lsrs	r3, r3, #4
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	b2d9      	uxtb	r1, r3
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007ae4:	f361 1304 	bfi	r3, r1, #4, #1
 8007ae8:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.a = __gb_read(gb, gb->cpu_reg.sp++);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	b291      	uxth	r1, r2
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	8751      	strh	r1, [r2, #58]	; 0x3a
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7f9 fafa 	bl	80010f4 <__gb_read>
 8007b00:	4603      	mov	r3, r0
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8007b0a:	e1c7      	b.n	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xF2: /* LD A, (C) */
		gb->cpu_reg.a = __gb_read(gb, 0xFF00 | gb->cpu_reg.c);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b12:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7f9 faeb 	bl	80010f4 <__gb_read>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	461a      	mov	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8007b28:	e1b8      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xF3: /* DI */
		gb->gb_ime = 0;
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	7e13      	ldrb	r3, [r2, #24]
 8007b2e:	f36f 0341 	bfc	r3, #1, #1
 8007b32:	7613      	strb	r3, [r2, #24]
		break;
 8007b34:	e1b2      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xF5: /* PUSH AF */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.a);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007b46:	4619      	mov	r1, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7f9 fd09 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp,
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007b66:	4619      	mov	r1, r3
			   gb->cpu_reg.f_bits.z << 7 | gb->cpu_reg.f_bits.n << 6 |
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	01db      	lsls	r3, r3, #7
 8007b76:	b25a      	sxtb	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	019b      	lsls	r3, r3, #6
 8007b86:	b25b      	sxtb	r3, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	b25a      	sxtb	r2, r3
			   gb->cpu_reg.f_bits.h << 5 | gb->cpu_reg.f_bits.c << 4);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b92:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	015b      	lsls	r3, r3, #5
			   gb->cpu_reg.f_bits.z << 7 | gb->cpu_reg.f_bits.n << 6 |
 8007b9a:	b25b      	sxtb	r3, r3
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	b25a      	sxtb	r2, r3
			   gb->cpu_reg.f_bits.h << 5 | gb->cpu_reg.f_bits.c << 4);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ba6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	b25b      	sxtb	r3, r3
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b25b      	sxtb	r3, r3
		__gb_write(gb, --gb->cpu_reg.sp,
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7f9 fcd5 	bl	8001568 <__gb_write>
		break;
 8007bbe:	e16d      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xF6: /* OR imm */
		gb->cpu_reg.a = gb->cpu_reg.a | __gb_read(gb, gb->cpu_reg.pc++);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	b291      	uxth	r1, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7f9 fa8d 	bl	80010f4 <__gb_read>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4323      	orrs	r3, r4
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		gb->cpu_reg.f_bits.z = (gb->cpu_reg.a == 0x00);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	bf0c      	ite	eq
 8007bf0:	2301      	moveq	r3, #1
 8007bf2:	2300      	movne	r3, #0
 8007bf4:	b2d9      	uxtb	r1, r3
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007bfc:	f361 13c7 	bfi	r3, r1, #7, #1
 8007c00:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007c0a:	f36f 1386 	bfc	r3, #6, #1
 8007c0e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = 0;
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007c18:	f36f 1345 	bfc	r3, #5, #1
 8007c1c:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = 0;
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007c26:	f36f 1304 	bfc	r3, #4, #1
 8007c2a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8007c2e:	e135      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xF7: /* PUSH AF */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007c34:	3b01      	subs	r3, #1
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007c40:	4619      	mov	r1, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007c46:	0a1b      	lsrs	r3, r3, #8
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7f9 fc8a 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007c64:	4619      	mov	r1, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7f9 fc7a 	bl	8001568 <__gb_write>
		gb->cpu_reg.pc = 0x0030;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2230      	movs	r2, #48	; 0x30
 8007c78:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8007c7a:	e10f      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xF8: /* LD HL, SP+/-imm */
	{
		/* Taken from SameBoy, which is released under MIT Licence. */
		int8_t offset = (int8_t) __gb_read(gb, gb->cpu_reg.pc++);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	b291      	uxth	r1, r2
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7f9 fa32 	bl	80010f4 <__gb_read>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
		gb->cpu_reg.hl = gb->cpu_reg.sp + offset;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8007c9a:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	4413      	add	r3, r2
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	871a      	strh	r2, [r3, #56]	; 0x38
		gb->cpu_reg.f_bits.z = 0;
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007cae:	f36f 13c7 	bfc	r3, #7, #1
 8007cb2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 0;
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007cbc:	f36f 1386 	bfc	r3, #6, #1
 8007cc0:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.sp & 0xF) + (offset & 0xF) > 0xF) ? 1 : 0;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007cc8:	f003 020f 	and.w	r2, r3, #15
 8007ccc:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	4413      	add	r3, r2
 8007cd6:	2b0f      	cmp	r3, #15
 8007cd8:	bfcc      	ite	gt
 8007cda:	2301      	movgt	r3, #1
 8007cdc:	2300      	movle	r3, #0
 8007cde:	b2d9      	uxtb	r1, r3
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007ce6:	f361 1345 	bfi	r3, r1, #5, #1
 8007cea:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = ((gb->cpu_reg.sp & 0xFF) + (offset & 0xFF) > 0xFF) ? 1 :
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	f997 30ad 	ldrsb.w	r3, [r7, #173]	; 0xad
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	2bff      	cmp	r3, #255	; 0xff
 8007cfe:	bfcc      	ite	gt
 8007d00:	2301      	movgt	r3, #1
 8007d02:	2300      	movle	r3, #0
 8007d04:	b2d9      	uxtb	r1, r3
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007d0c:	f361 1304 	bfi	r3, r1, #4, #1
 8007d10:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
				       0;
		break;
 8007d14:	e0c2      	b.n	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xF9: /* LD SP, HL */
		gb->cpu_reg.sp = gb->cpu_reg.hl;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	875a      	strh	r2, [r3, #58]	; 0x3a
		break;
 8007d1e:	e0bd      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xFA: /* LD A, (imm) */
	{
		uint16_t addr = __gb_read(gb, gb->cpu_reg.pc++);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007d24:	1c5a      	adds	r2, r3, #1
 8007d26:	b291      	uxth	r1, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7f9 f9e0 	bl	80010f4 <__gb_read>
 8007d34:	4603      	mov	r3, r0
 8007d36:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		addr |= __gb_read(gb, gb->cpu_reg.pc++) << 8;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	b291      	uxth	r1, r2
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7f9 f9d3 	bl	80010f4 <__gb_read>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	021b      	lsls	r3, r3, #8
 8007d52:	b21a      	sxth	r2, r3
 8007d54:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	b21b      	sxth	r3, r3
 8007d5c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
		gb->cpu_reg.a = __gb_read(gb, addr);
 8007d60:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7f9 f9c4 	bl	80010f4 <__gb_read>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		break;
 8007d76:	e091      	b.n	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xFB: /* EI */
		gb->gb_ime = 1;
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	7e13      	ldrb	r3, [r2, #24]
 8007d7c:	f043 0302 	orr.w	r3, r3, #2
 8007d80:	7613      	strb	r3, [r2, #24]
		break;
 8007d82:	e08b      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	case 0xFE: /* CP imm */
	{
		uint8_t temp_8 = __gb_read(gb, gb->cpu_reg.pc++);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	b291      	uxth	r1, r2
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	8791      	strh	r1, [r2, #60]	; 0x3c
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7f9 f9ae 	bl	80010f4 <__gb_read>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
		uint16_t temp_16 = gb->cpu_reg.a - temp_8;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
		gb->cpu_reg.f_bits.z = ((temp_16 & 0xFF) == 0x00);
 8007db2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	bf0c      	ite	eq
 8007dbc:	2301      	moveq	r3, #1
 8007dbe:	2300      	movne	r3, #0
 8007dc0:	b2d9      	uxtb	r1, r3
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007dc8:	f361 13c7 	bfi	r3, r1, #7, #1
 8007dcc:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.n = 1;
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dda:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.h = ((gb->cpu_reg.a ^ temp_8 ^ temp_16) & 0x10) ? 1 : 0;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007de4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8007de8:	4053      	eors	r3, r2
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	461a      	mov	r2, r3
 8007dee:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8007df2:	4053      	eors	r3, r2
 8007df4:	111b      	asrs	r3, r3, #4
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	b2d9      	uxtb	r1, r3
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007e02:	f361 1345 	bfi	r3, r1, #5, #1
 8007e06:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		gb->cpu_reg.f_bits.c = (temp_16 & 0xFF00) ? 1 : 0;
 8007e0a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8007e0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bf14      	ite	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	2300      	moveq	r3, #0
 8007e1a:	b2d9      	uxtb	r1, r3
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 8007e22:	f361 1304 	bfi	r3, r1, #4, #1
 8007e26:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
		break;
 8007e2a:	e037      	b.n	8007e9c <__gb_step_cpu+0x50e0>
	}

	case 0xFF: /* RST 0x0038 */
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc >> 8);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007e30:	3b01      	subs	r3, #1
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007e42:	0a1b      	lsrs	r3, r3, #8
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7f9 fb8c 	bl	8001568 <__gb_write>
		__gb_write(gb, --gb->cpu_reg.sp, gb->cpu_reg.pc & 0xFF);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007e54:	3b01      	subs	r3, #1
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	875a      	strh	r2, [r3, #58]	; 0x3a
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007e60:	4619      	mov	r1, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7f9 fb7c 	bl	8001568 <__gb_write>
		gb->cpu_reg.pc = 0x0038;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2238      	movs	r2, #56	; 0x38
 8007e74:	879a      	strh	r2, [r3, #60]	; 0x3c
		break;
 8007e76:	e011      	b.n	8007e9c <__gb_step_cpu+0x50e0>

	default:
		(gb->gb_error)(gb, GB_INVALID_OPCODE, opcode);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 8007e80:	b292      	uxth	r2, r2
 8007e82:	2101      	movs	r1, #1
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
 8007e88:	e008      	b.n	8007e9c <__gb_step_cpu+0x50e0>
		break;
 8007e8a:	bf00      	nop
 8007e8c:	e006      	b.n	8007e9c <__gb_step_cpu+0x50e0>
		break;
 8007e8e:	bf00      	nop
 8007e90:	e004      	b.n	8007e9c <__gb_step_cpu+0x50e0>
		break;
 8007e92:	bf00      	nop
 8007e94:	e002      	b.n	8007e9c <__gb_step_cpu+0x50e0>
		break;
 8007e96:	bf00      	nop
 8007e98:	e000      	b.n	8007e9c <__gb_step_cpu+0x50e0>
		break;
 8007e9a:	bf00      	nop
	}

	/* DIV register timing */
	gb->counter.div_count += inst_cycles;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ea0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	661a      	str	r2, [r3, #96]	; 0x60

	if(gb->counter.div_count >= DIV_CYCLES)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eae:	2bff      	cmp	r3, #255	; 0xff
 8007eb0:	d90d      	bls.n	8007ece <__gb_step_cpu+0x5112>
	{
		gb->gb_reg.DIV++;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007eb8:	3301      	adds	r3, #1
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		gb->counter.div_count -= DIV_CYCLES;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec6:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	661a      	str	r2, [r3, #96]	; 0x60
	}

	/* Check serial transmission. */
	if(gb->gb_reg.SC & SERIAL_SC_TX_START)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007ed4:	b25b      	sxtb	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	da60      	bge.n	8007f9c <__gb_step_cpu+0x51e0>
	{
		/* If new transfer, call TX function. */
		if(gb->counter.serial_count == 0 && gb->gb_serial_tx != NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10b      	bne.n	8007efa <__gb_step_cpu+0x513e>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d007      	beq.n	8007efa <__gb_step_cpu+0x513e>
			(gb->gb_serial_tx)(gb, gb->gb_reg.SB);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8007ef4:	4611      	mov	r1, r2
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3

		gb->counter.serial_count += inst_cycles;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007efe:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8007f02:	441a      	add	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	669a      	str	r2, [r3, #104]	; 0x68

		/* If it's time to receive byte, call RX function. */
		if(gb->counter.serial_count >= SERIAL_CYCLES)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f10:	d344      	bcc.n	8007f9c <__gb_step_cpu+0x51e0>
			/* If RX can be done, do it. */
			/* If RX failed, do not change SB if using external
			 * clock, or set to 0xFF if using internal clock. */
			uint8_t rx;

			if(gb->gb_serial_rx != NULL &&
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d020      	beq.n	8007f5c <__gb_step_cpu+0x51a0>
				(gb->gb_serial_rx(gb, &rx) ==
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	f107 0209 	add.w	r2, r7, #9
 8007f22:	4611      	mov	r1, r2
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	4798      	blx	r3
 8007f28:	4603      	mov	r3, r0
			if(gb->gb_serial_rx != NULL &&
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d116      	bne.n	8007f5c <__gb_step_cpu+0x51a0>
					 GB_SERIAL_RX_SUCCESS))
			{
				gb->gb_reg.SB = rx;
 8007f2e:	7a7a      	ldrb	r2, [r7, #9]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

				/* Inform game of serial TX/RX completion. */
				gb->gb_reg.SC &= 0x01;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				gb->gb_reg.IF |= SERIAL_INTR;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8007f4e:	f043 0308 	orr.w	r3, r3, #8
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8007f5a:	e01c      	b.n	8007f96 <__gb_step_cpu+0x51da>
			}
			else if(gb->gb_reg.SC & SERIAL_SC_CLOCK_SRC)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d015      	beq.n	8007f96 <__gb_step_cpu+0x51da>
			{
				/* If using internal clock, and console is not
				 * attached to any external peripheral, shifted
				 * bits are replaced with logic 1. */
				gb->gb_reg.SB = 0xFF;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	22ff      	movs	r2, #255	; 0xff
 8007f6e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

				/* Inform game of serial TX/RX completion. */
				gb->gb_reg.SC &= 0x01;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				gb->gb_reg.IF |= SERIAL_INTR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8007f8a:	f043 0308 	orr.w	r3, r3, #8
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
				/* If using external clock, and console is not
				 * attached to any external peripheral, bits are
				 * not shifted, so SB is not modified. */
			}

			gb->counter.serial_count = 0;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	669a      	str	r2, [r3, #104]	; 0x68
		}
	}

	/* TIMA register timing */
	/* TODO: Change tac_enable to struct of TAC timer control bits. */
	if(gb->gb_reg.tac_enable)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fa2:	f003 0304 	and.w	r3, r3, #4
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d040      	beq.n	800802e <__gb_step_cpu+0x5272>
	{
		static const uint_fast16_t TAC_CYCLES[4] = {1024, 16, 64, 256};

		gb->counter.tima_count += inst_cycles;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007fb0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8007fb4:	441a      	add	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	665a      	str	r2, [r3, #100]	; 0x64

		while(gb->counter.tima_count >= TAC_CYCLES[gb->gb_reg.tac_rate])
 8007fba:	e02a      	b.n	8008012 <__gb_step_cpu+0x5256>
		{
			gb->counter.tima_count -= TAC_CYCLES[gb->gb_reg.tac_rate];
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fc6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4bad      	ldr	r3, [pc, #692]	; (8008284 <__gb_step_cpu+0x54c8>)
 8007fd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fd4:	1ad2      	subs	r2, r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	665a      	str	r2, [r3, #100]	; 0x64

			if(++gb->gb_reg.TIMA == 0)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10e      	bne.n	8008012 <__gb_step_cpu+0x5256>
			{
				gb->gb_reg.IF |= TIMER_INTR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8007ffa:	f043 0304 	orr.w	r3, r3, #4
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
				/* On overflow, set TMA to TIMA. */
				gb->gb_reg.TIMA = gb->gb_reg.TMA;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		while(gb->counter.tima_count >= TAC_CYCLES[gb->gb_reg.tac_rate])
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800801c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008020:	b2db      	uxtb	r3, r3
 8008022:	4619      	mov	r1, r3
 8008024:	4b97      	ldr	r3, [pc, #604]	; (8008284 <__gb_step_cpu+0x54c8>)
 8008026:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800802a:	429a      	cmp	r2, r3
 800802c:	d2c6      	bcs.n	8007fbc <__gb_step_cpu+0x5200>
		}
	}

	/* TODO Check behaviour of LCD during LCD power off state. */
	/* If LCD is off, don't update LCD state. */
	if((gb->gb_reg.LCDC & LCDC_ENABLE) == 0)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8008034:	b25b      	sxtb	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	f280 8144 	bge.w	80082c4 <__gb_step_cpu+0x5508>
		return;

	/* LCD Timing */
	gb->counter.lcd_count += inst_cycles;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008040:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8008044:	441a      	add	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	65da      	str	r2, [r3, #92]	; 0x5c

	/* New Scanline */
	if(gb->counter.lcd_count > LCD_LINE_CYCLES)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804e:	f5b3 7fe4 	cmp.w	r3, #456	; 0x1c8
 8008052:	f240 80f4 	bls.w	800823e <__gb_step_cpu+0x5482>
	{
		gb->counter.lcd_count -= LCD_LINE_CYCLES;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	f5a3 72e4 	sub.w	r2, r3, #456	; 0x1c8
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	65da      	str	r2, [r3, #92]	; 0x5c

		/* LYC Update */
		if(gb->gb_reg.LY == gb->gb_reg.LYC)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800806e:	429a      	cmp	r2, r3
 8008070:	d119      	bne.n	80080a6 <__gb_step_cpu+0x52ea>
		{
			gb->gb_reg.STAT |= STAT_LYC_COINC;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008078:	f043 0304 	orr.w	r3, r3, #4
 800807c:	b2da      	uxtb	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

			if(gb->gb_reg.STAT & STAT_LYC_INTR)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800808a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d012      	beq.n	80080b8 <__gb_step_cpu+0x52fc>
				gb->gb_reg.IF |= LCDC_INTR;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8008098:	f043 0302 	orr.w	r3, r3, #2
 800809c:	b2da      	uxtb	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 80080a4:	e008      	b.n	80080b8 <__gb_step_cpu+0x52fc>
		}
		else
			gb->gb_reg.STAT &= 0xFB;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80080ac:	f023 0304 	bic.w	r3, r3, #4
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		/* Next line */
		gb->gb_reg.LY = (gb->gb_reg.LY + 1) % LCD_VERT_LINES;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80080be:	3301      	adds	r3, #1
 80080c0:	4a71      	ldr	r2, [pc, #452]	; (8008288 <__gb_step_cpu+0x54cc>)
 80080c2:	fb82 1203 	smull	r1, r2, r2, r3
 80080c6:	1151      	asrs	r1, r2, #5
 80080c8:	17da      	asrs	r2, r3, #31
 80080ca:	1a8a      	subs	r2, r1, r2
 80080cc:	219a      	movs	r1, #154	; 0x9a
 80080ce:	fb01 f202 	mul.w	r2, r1, r2
 80080d2:	1a9a      	subs	r2, r3, r2
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

		/* VBLANK Start */
		if(gb->gb_reg.LY == LCD_HEIGHT)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80080e2:	2b90      	cmp	r3, #144	; 0x90
 80080e4:	d17d      	bne.n	80081e2 <__gb_step_cpu+0x5426>
		{
			gb->lcd_mode = LCD_VBLANK;
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	7e13      	ldrb	r3, [r2, #24]
 80080ea:	2101      	movs	r1, #1
 80080ec:	f361 1305 	bfi	r3, r1, #4, #2
 80080f0:	7613      	strb	r3, [r2, #24]
			gb->gb_frame = 1;
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	7e13      	ldrb	r3, [r2, #24]
 80080f6:	f043 0308 	orr.w	r3, r3, #8
 80080fa:	7613      	strb	r3, [r2, #24]
			gb->gb_reg.IF |= VBLANK_INTR;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	b2da      	uxtb	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			gb->lcd_blank = 0;
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	7e13      	ldrb	r3, [r2, #24]
 8008112:	f36f 1386 	bfc	r3, #6, #1
 8008116:	7613      	strb	r3, [r2, #24]

			if(gb->gb_reg.STAT & STAT_MODE_1_INTR)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800811e:	f003 0310 	and.w	r3, r3, #16
 8008122:	2b00      	cmp	r3, #0
 8008124:	d008      	beq.n	8008138 <__gb_step_cpu+0x537c>
				gb->gb_reg.IF |= LCDC_INTR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800812c:	f043 0302 	orr.w	r3, r3, #2
 8008130:	b2da      	uxtb	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

#if ENABLE_LCD

			/* If frame skip is activated, check if we need to draw
			 * the frame or skip it. */
			if(gb->direct.frame_skip)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800813e:	3320      	adds	r3, #32
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f003 0302 	and.w	r3, r3, #2
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d014      	beq.n	8008176 <__gb_step_cpu+0x53ba>
			{
				gb->display.frame_skip_count =
					!gb->display.frame_skip_count;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8008152:	331e      	adds	r3, #30
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	b2db      	uxtb	r3, r3
 800815c:	2b00      	cmp	r3, #0
 800815e:	bf0c      	ite	eq
 8008160:	2301      	moveq	r3, #1
 8008162:	2300      	movne	r3, #0
 8008164:	b2d9      	uxtb	r1, r3
				gb->display.frame_skip_count =
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800816c:	331e      	adds	r3, #30
 800816e:	781a      	ldrb	r2, [r3, #0]
 8008170:	f361 0200 	bfi	r2, r1, #0, #1
 8008174:	701a      	strb	r2, [r3, #0]
			}

			/* If interlaced is activated, change which lines get
			 * updated. Also, only update lines on frames that are
			 * actually drawn when frame skip is enabled. */
			if(gb->direct.interlace &&
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800817c:	3320      	adds	r3, #32
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 809d 	beq.w	80082c6 <__gb_step_cpu+0x550a>
					(!gb->direct.frame_skip ||
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8008192:	3320      	adds	r3, #32
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	b2db      	uxtb	r3, r3
			if(gb->direct.interlace &&
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <__gb_step_cpu+0x53fa>
					(!gb->direct.frame_skip ||
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80081a6:	331e      	adds	r3, #30
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 8088 	beq.w	80082c6 <__gb_step_cpu+0x550a>
					 gb->display.frame_skip_count))
			{
				gb->display.interlace_count =
					!gb->display.interlace_count;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80081bc:	331e      	adds	r3, #30
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bf0c      	ite	eq
 80081ca:	2301      	moveq	r3, #1
 80081cc:	2300      	movne	r3, #0
 80081ce:	b2d9      	uxtb	r1, r3
				gb->display.interlace_count =
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80081d6:	331e      	adds	r3, #30
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	f361 0241 	bfi	r2, r1, #1, #1
 80081de:	701a      	strb	r2, [r3, #0]
 80081e0:	e071      	b.n	80082c6 <__gb_step_cpu+0x550a>
			}

#endif
		}
		/* Normal Line */
		else if(gb->gb_reg.LY < LCD_HEIGHT)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80081e8:	2b8f      	cmp	r3, #143	; 0x8f
 80081ea:	d86c      	bhi.n	80082c6 <__gb_step_cpu+0x550a>
		{
			if(gb->gb_reg.LY == 0)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10d      	bne.n	8008212 <__gb_step_cpu+0x5456>
			{
				/* Clear Screen */
				gb->display.WY = gb->gb_reg.WY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8008202:	331d      	adds	r3, #29
 8008204:	701a      	strb	r2, [r3, #0]
				gb->display.window_clear = 0;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800820c:	331c      	adds	r3, #28
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
			}

			gb->lcd_mode = LCD_HBLANK;
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	7e13      	ldrb	r3, [r2, #24]
 8008216:	f36f 1305 	bfc	r3, #4, #2
 800821a:	7613      	strb	r3, [r2, #24]

			if(gb->gb_reg.STAT & STAT_MODE_0_INTR)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008222:	f003 0308 	and.w	r3, r3, #8
 8008226:	2b00      	cmp	r3, #0
 8008228:	d04d      	beq.n	80082c6 <__gb_step_cpu+0x550a>
				gb->gb_reg.IF |= LCDC_INTR;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8008230:	f043 0302 	orr.w	r3, r3, #2
 8008234:	b2da      	uxtb	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800823c:	e043      	b.n	80082c6 <__gb_step_cpu+0x550a>
		}
	}
	/* OAM access */
	else if(gb->lcd_mode == LCD_HBLANK
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	7e1b      	ldrb	r3, [r3, #24]
 8008242:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b00      	cmp	r3, #0
 800824a:	d11f      	bne.n	800828c <__gb_step_cpu+0x54d0>
			&& gb->counter.lcd_count >= LCD_MODE_2_CYCLES)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008250:	2bcb      	cmp	r3, #203	; 0xcb
 8008252:	d91b      	bls.n	800828c <__gb_step_cpu+0x54d0>
	{
		gb->lcd_mode = LCD_SEARCH_OAM;
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	7e13      	ldrb	r3, [r2, #24]
 8008258:	2102      	movs	r1, #2
 800825a:	f361 1305 	bfi	r3, r1, #4, #2
 800825e:	7613      	strb	r3, [r2, #24]

		if(gb->gb_reg.STAT & STAT_MODE_2_INTR)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b00      	cmp	r3, #0
 800826c:	d02b      	beq.n	80082c6 <__gb_step_cpu+0x550a>
			gb->gb_reg.IF |= LCDC_INTR;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8008274:	f043 0302 	orr.w	r3, r3, #2
 8008278:	b2da      	uxtb	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		if(gb->gb_reg.STAT & STAT_MODE_2_INTR)
 8008280:	e021      	b.n	80082c6 <__gb_step_cpu+0x550a>
 8008282:	bf00      	nop
 8008284:	0800bcd4 	.word	0x0800bcd4
 8008288:	3531dec1 	.word	0x3531dec1
	}
	/* Update LCD */
	else if(gb->lcd_mode == LCD_SEARCH_OAM
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	7e1b      	ldrb	r3, [r3, #24]
 8008290:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b20      	cmp	r3, #32
 8008298:	d115      	bne.n	80082c6 <__gb_step_cpu+0x550a>
			&& gb->counter.lcd_count >= LCD_MODE_3_CYCLES)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800829e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80082a2:	d310      	bcc.n	80082c6 <__gb_step_cpu+0x550a>
	{
		gb->lcd_mode = LCD_TRANSFER;
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	7e13      	ldrb	r3, [r2, #24]
 80082a8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80082ac:	7613      	strb	r3, [r2, #24]
#if ENABLE_LCD
		if(!gb->lcd_blank)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	7e1b      	ldrb	r3, [r3, #24]
 80082b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d104      	bne.n	80082c6 <__gb_step_cpu+0x550a>
			__gb_draw_line(gb);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7fa f81d 	bl	80022fc <__gb_draw_line>
 80082c2:	e000      	b.n	80082c6 <__gb_step_cpu+0x550a>
		return;
 80082c4:	bf00      	nop
#endif
	}
}
 80082c6:	37bc      	adds	r7, #188	; 0xbc
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd90      	pop	{r4, r7, pc}

080082cc <gb_run_frame>:

void gb_run_frame(struct gb_s *gb)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
	gb->gb_frame = 0;
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	7e13      	ldrb	r3, [r2, #24]
 80082d8:	f36f 03c3 	bfc	r3, #3, #1
 80082dc:	7613      	strb	r3, [r2, #24]

	while(!gb->gb_frame)
 80082de:	e002      	b.n	80082e6 <gb_run_frame+0x1a>
		__gb_step_cpu(gb);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7fa fd6b 	bl	8002dbc <__gb_step_cpu>
	while(!gb->gb_frame)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	7e1b      	ldrb	r3, [r3, #24]
 80082ea:	f003 0308 	and.w	r3, r3, #8
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0f5      	beq.n	80082e0 <gb_run_frame+0x14>
}
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <gb_colour_hash>:
	gb->gb_serial_tx = gb_serial_tx;
	gb->gb_serial_rx = gb_serial_rx;
}

uint8_t gb_colour_hash(struct gb_s *gb)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
#define ROM_TITLE_START_ADDR	0x0134
#define ROM_TITLE_END_ADDR	0x0143

	uint8_t x = 0;
 8008306:	2300      	movs	r3, #0
 8008308:	73fb      	strb	r3, [r7, #15]

	for(uint16_t i = ROM_TITLE_START_ADDR; i <= ROM_TITLE_END_ADDR; i++)
 800830a:	f44f 739a 	mov.w	r3, #308	; 0x134
 800830e:	81bb      	strh	r3, [r7, #12]
 8008310:	e00d      	b.n	800832e <gb_colour_hash+0x30>
		x += gb->gb_rom_read(gb, i);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	89ba      	ldrh	r2, [r7, #12]
 8008318:	4611      	mov	r1, r2
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
 800831e:	4603      	mov	r3, r0
 8008320:	461a      	mov	r2, r3
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	4413      	add	r3, r2
 8008326:	73fb      	strb	r3, [r7, #15]
	for(uint16_t i = ROM_TITLE_START_ADDR; i <= ROM_TITLE_END_ADDR; i++)
 8008328:	89bb      	ldrh	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	81bb      	strh	r3, [r7, #12]
 800832e:	89bb      	ldrh	r3, [r7, #12]
 8008330:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8008334:	d3ed      	bcc.n	8008312 <gb_colour_hash+0x14>

	return x;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <gb_reset>:

/**
 * Resets the context, and initialises startup values.
 */
void gb_reset(struct gb_s *gb)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
	gb->gb_halt = 0;
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	7e13      	ldrb	r3, [r2, #24]
 800834c:	f36f 0300 	bfc	r3, #0, #1
 8008350:	7613      	strb	r3, [r2, #24]
	gb->gb_ime = 1;
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	7e13      	ldrb	r3, [r2, #24]
 8008356:	f043 0302 	orr.w	r3, r3, #2
 800835a:	7613      	strb	r3, [r2, #24]
	gb->gb_bios_enable = 0;
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7e13      	ldrb	r3, [r2, #24]
 8008360:	f36f 0382 	bfc	r3, #2, #1
 8008364:	7613      	strb	r3, [r2, #24]
	gb->lcd_mode = LCD_HBLANK;
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	7e13      	ldrb	r3, [r2, #24]
 800836a:	f36f 1305 	bfc	r3, #4, #2
 800836e:	7613      	strb	r3, [r2, #24]

	/* Initialise MBC values. */
	gb->selected_rom_bank = 1;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	845a      	strh	r2, [r3, #34]	; 0x22
	gb->cart_ram_bank = 0;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gb->enable_cart_ram = 0;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	gb->cart_mode_select = 0;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	/* Initialise CPU registers as though a DMG. */
	gb->cpu_reg.af = 0x01B0;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8008394:	859a      	strh	r2, [r3, #44]	; 0x2c
	gb->cpu_reg.bc = 0x0013;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2213      	movs	r2, #19
 800839a:	869a      	strh	r2, [r3, #52]	; 0x34
	gb->cpu_reg.de = 0x00D8;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	22d8      	movs	r2, #216	; 0xd8
 80083a0:	86da      	strh	r2, [r3, #54]	; 0x36
	gb->cpu_reg.hl = 0x014D;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f240 124d 	movw	r2, #333	; 0x14d
 80083a8:	871a      	strh	r2, [r3, #56]	; 0x38
	gb->cpu_reg.sp = 0xFFFE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80083b0:	875a      	strh	r2, [r3, #58]	; 0x3a
	/* TODO: Add BIOS support. */
	gb->cpu_reg.pc = 0x0100;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083b8:	879a      	strh	r2, [r3, #60]	; 0x3c

	gb->counter.lcd_count = 0;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	65da      	str	r2, [r3, #92]	; 0x5c
	gb->counter.div_count = 0;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	661a      	str	r2, [r3, #96]	; 0x60
	gb->counter.tima_count = 0;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	665a      	str	r2, [r3, #100]	; 0x64
	gb->counter.serial_count = 0;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	669a      	str	r2, [r3, #104]	; 0x68

	gb->gb_reg.TIMA      = 0x00;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	gb->gb_reg.TMA       = 0x00;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	gb->gb_reg.TAC       = 0xF8;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	22f8      	movs	r2, #248	; 0xf8
 80083e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	gb->gb_reg.DIV       = 0xAC;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	22ac      	movs	r2, #172	; 0xac
 80083ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	gb->gb_reg.IF        = 0xE1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	22e1      	movs	r2, #225	; 0xe1
 80083f6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	gb->gb_reg.LCDC      = 0x91;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2291      	movs	r2, #145	; 0x91
 80083fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	gb->gb_reg.SCY       = 0x00;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	gb->gb_reg.SCX       = 0x00;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	gb->gb_reg.LYC       = 0x00;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	/* Appease valgrind for invalid reads and unconditional jumps. */
	gb->gb_reg.SC = 0x7E;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	227e      	movs	r2, #126	; 0x7e
 800841e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	gb->gb_reg.STAT = 0;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	gb->gb_reg.LY = 0;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	__gb_write(gb, 0xFF47, 0xFC);    // BGP
 8008432:	22fc      	movs	r2, #252	; 0xfc
 8008434:	f64f 7147 	movw	r1, #65351	; 0xff47
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7f9 f895 	bl	8001568 <__gb_write>
	__gb_write(gb, 0xFF48, 0xFF);    // OBJP0
 800843e:	22ff      	movs	r2, #255	; 0xff
 8008440:	f64f 7148 	movw	r1, #65352	; 0xff48
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7f9 f88f 	bl	8001568 <__gb_write>
	__gb_write(gb, 0xFF49, 0x0F);    // OBJP1
 800844a:	220f      	movs	r2, #15
 800844c:	f64f 7149 	movw	r1, #65353	; 0xff49
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7f9 f889 	bl	8001568 <__gb_write>
	gb->gb_reg.WY        = 0x00;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	gb->gb_reg.WX        = 0x00;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	gb->gb_reg.IE        = 0x00;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

	gb->direct.joypad = 0xFF;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8008474:	3324      	adds	r3, #36	; 0x24
 8008476:	22ff      	movs	r2, #255	; 0xff
 8008478:	701a      	strb	r2, [r3, #0]
	gb->gb_reg.P1 = 0xCF;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	22cf      	movs	r2, #207	; 0xcf
 800847e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	memset(gb->vram, 0x00, VRAM_SIZE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f503 5301 	add.w	r3, r3, #8256	; 0x2040
 8008488:	332c      	adds	r3, #44	; 0x2c
 800848a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f002 f8af 	bl	800a5f4 <memset>
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <gb_init>:
			     uint8_t (*gb_rom_read)(struct gb_s*, const uint_fast32_t),
			     uint8_t (*gb_cart_ram_read)(struct gb_s*, const uint_fast32_t),
			     void (*gb_cart_ram_write)(struct gb_s*, const uint_fast32_t, const uint8_t),
			     void (*gb_error)(struct gb_s*, const enum gb_error_e, const uint16_t),
			     void *priv)
{
 80084a0:	b5b0      	push	{r4, r5, r7, lr}
 80084a2:	b09e      	sub	sp, #120	; 0x78
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
 80084ac:	603b      	str	r3, [r7, #0]
	const uint16_t mbc_location = 0x0147;
 80084ae:	f240 1347 	movw	r3, #327	; 0x147
 80084b2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	const uint16_t bank_count_location = 0x0148;
 80084b6:	f44f 73a4 	mov.w	r3, #328	; 0x148
 80084ba:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	const uint16_t ram_size_location = 0x0149;
 80084be:	f240 1349 	movw	r3, #329	; 0x149
 80084c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	 * TODO: POCKET CAMERA is unsupported.
	 * TODO: BANDAI TAMA5 is unsupported.
	 * TODO: HuC3 is unsupported.
	 * TODO: HuC1 is unsupported.
	 **/
	const uint8_t cart_mbc[] =
 80084c6:	4b67      	ldr	r3, [pc, #412]	; (8008664 <gb_init+0x1c4>)
 80084c8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80084cc:	461d      	mov	r5, r3
 80084ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80084d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{
		0, 1, 1, 1, -1, 2, 2, -1, 0, 0, -1, 0, 0, 0, -1, 3,
		3, 3, 3, 3, -1, -1, -1, -1, -1, 5, 5, 5, 5, 5, 5, -1
	};
	const uint8_t cart_ram[] =
 80084da:	4b63      	ldr	r3, [pc, #396]	; (8008668 <gb_init+0x1c8>)
 80084dc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80084e0:	461d      	mov	r5, r3
 80084e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80084ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{
		0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
		1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0
	};
	const uint16_t num_rom_banks_mask[] =
 80084ee:	4b5f      	ldr	r3, [pc, #380]	; (800866c <gb_init+0x1cc>)
 80084f0:	f107 0418 	add.w	r4, r7, #24
 80084f4:	461d      	mov	r5, r3
 80084f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084fa:	682b      	ldr	r3, [r5, #0]
 80084fc:	8023      	strh	r3, [r4, #0]
	{
		2, 4, 8, 16, 32, 64, 128, 256, 512
	};
	const uint8_t num_ram_banks[] = { 0, 1, 1, 4, 16, 8 };
 80084fe:	4a5c      	ldr	r2, [pc, #368]	; (8008670 <gb_init+0x1d0>)
 8008500:	f107 0310 	add.w	r3, r7, #16
 8008504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008508:	6018      	str	r0, [r3, #0]
 800850a:	3304      	adds	r3, #4
 800850c:	8019      	strh	r1, [r3, #0]

	gb->gb_rom_read = gb_rom_read;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	601a      	str	r2, [r3, #0]
	gb->gb_cart_ram_read = gb_cart_ram_read;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	605a      	str	r2, [r3, #4]
	gb->gb_cart_ram_write = gb_cart_ram_write;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	609a      	str	r2, [r3, #8]
	gb->gb_error = gb_error;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008526:	60da      	str	r2, [r3, #12]
	gb->direct.priv = priv;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800852e:	3328      	adds	r3, #40	; 0x28
 8008530:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008534:	601a      	str	r2, [r3, #0]

	/* Initialise serial transfer function to NULL. If the front-end does
	 * not provide serial support, Peanut-GB will emulate no cable connected
	 * automatically. */
	gb->gb_serial_tx = NULL;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	611a      	str	r2, [r3, #16]
	gb->gb_serial_rx = NULL;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	615a      	str	r2, [r3, #20]

	/* Check valid ROM using checksum value. */
	{
		uint8_t x = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

		for(uint16_t i = 0x0134; i <= 0x014C; i++)
 8008548:	f44f 739a 	mov.w	r3, #308	; 0x134
 800854c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8008550:	e014      	b.n	800857c <gb_init+0xdc>
			x = x - gb->gb_rom_read(gb, i) - 1;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800855a:	4611      	mov	r1, r2
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	4798      	blx	r3
 8008560:	4603      	mov	r3, r0
 8008562:	461a      	mov	r2, r3
 8008564:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008568:	1a9b      	subs	r3, r3, r2
 800856a:	b2db      	uxtb	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		for(uint16_t i = 0x0134; i <= 0x014C; i++)
 8008572:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8008576:	3301      	adds	r3, #1
 8008578:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800857c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8008580:	f5b3 7fa6 	cmp.w	r3, #332	; 0x14c
 8008584:	d9e5      	bls.n	8008552 <gb_init+0xb2>

		if(x != gb->gb_rom_read(gb, ROM_HEADER_CHECKSUM_LOC))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f240 114d 	movw	r1, #333	; 0x14d
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	4798      	blx	r3
 8008592:	4603      	mov	r3, r0
 8008594:	461a      	mov	r2, r3
 8008596:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800859a:	4293      	cmp	r3, r2
 800859c:	d001      	beq.n	80085a2 <gb_init+0x102>
			return GB_INIT_INVALID_CHECKSUM;
 800859e:	2302      	movs	r3, #2
 80085a0:	e05c      	b.n	800865c <gb_init+0x1bc>
	}

	/* Check if cartridge type is supported, and set MBC type. */
	{
		const uint8_t mbc_value = gb->gb_rom_read(gb, mbc_location);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80085aa:	4611      	mov	r1, r2
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	4798      	blx	r3
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

		if(mbc_value > sizeof(cart_mbc) - 1 ||
 80085b6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80085ba:	2b1f      	cmp	r3, #31
 80085bc:	d80c      	bhi.n	80085d8 <gb_init+0x138>
				(gb->mbc = cart_mbc[mbc_value]) == 255u)
 80085be:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80085c2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80085c6:	4413      	add	r3, r2
 80085c8:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	771a      	strb	r2, [r3, #28]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	7f1b      	ldrb	r3, [r3, #28]
		if(mbc_value > sizeof(cart_mbc) - 1 ||
 80085d4:	2bff      	cmp	r3, #255	; 0xff
 80085d6:	d101      	bne.n	80085dc <gb_init+0x13c>
			return GB_INIT_CARTRIDGE_UNSUPPORTED;
 80085d8:	2301      	movs	r3, #1
 80085da:	e03f      	b.n	800865c <gb_init+0x1bc>
	}

	gb->cart_ram = cart_ram[gb->gb_rom_read(gb, mbc_location)];
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80085e4:	4611      	mov	r1, r2
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	4798      	blx	r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80085f0:	4413      	add	r3, r2
 80085f2:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	775a      	strb	r2, [r3, #29]
	gb->num_rom_banks_mask = num_rom_banks_mask[gb->gb_rom_read(gb, bank_count_location)] - 1;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8008602:	4611      	mov	r1, r2
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	4798      	blx	r3
 8008608:	4603      	mov	r3, r0
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008610:	4413      	add	r3, r2
 8008612:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8008616:	3b01      	subs	r3, #1
 8008618:	b29a      	uxth	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	83da      	strh	r2, [r3, #30]
	gb->num_ram_banks = num_ram_banks[gb->gb_rom_read(gb, ram_size_location)];
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8008626:	4611      	mov	r1, r2
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	4798      	blx	r3
 800862c:	4603      	mov	r3, r0
 800862e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8008632:	4413      	add	r3, r2
 8008634:	f813 2c68 	ldrb.w	r2, [r3, #-104]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f883 2020 	strb.w	r2, [r3, #32]

	gb->lcd_blank = 0;
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	7e13      	ldrb	r3, [r2, #24]
 8008642:	f36f 1386 	bfc	r3, #6, #1
 8008646:	7613      	strb	r3, [r2, #24]
	gb->display.lcd_draw_line = NULL;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800864e:	330c      	adds	r3, #12
 8008650:	2200      	movs	r2, #0
 8008652:	601a      	str	r2, [r3, #0]

	gb_reset(gb);
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f7ff fe73 	bl	8008340 <gb_reset>

	return GB_INIT_NO_ERROR;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3778      	adds	r7, #120	; 0x78
 8008660:	46bd      	mov	sp, r7
 8008662:	bdb0      	pop	{r4, r5, r7, pc}
 8008664:	0800b8dc 	.word	0x0800b8dc
 8008668:	0800b8fc 	.word	0x0800b8fc
 800866c:	0800b91c 	.word	0x0800b91c
 8008670:	0800b930 	.word	0x0800b930

08008674 <gb_init_lcd>:
#if ENABLE_LCD
void gb_init_lcd(struct gb_s *gb,
		void (*lcd_draw_line)(struct gb_s *gb,
			const uint8_t *pixels,
			const uint_fast8_t line))
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
	gb->display.lcd_draw_line = lcd_draw_line;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8008684:	330c      	adds	r3, #12
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	601a      	str	r2, [r3, #0]

	gb->direct.interlace = 0;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 8008690:	3320      	adds	r3, #32
 8008692:	781a      	ldrb	r2, [r3, #0]
 8008694:	f36f 0200 	bfc	r2, #0, #1
 8008698:	701a      	strb	r2, [r3, #0]
	gb->display.interlace_count = 0;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80086a0:	331e      	adds	r3, #30
 80086a2:	781a      	ldrb	r2, [r3, #0]
 80086a4:	f36f 0241 	bfc	r2, #1, #1
 80086a8:	701a      	strb	r2, [r3, #0]
	gb->direct.frame_skip = 0;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80086b0:	3320      	adds	r3, #32
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	f36f 0241 	bfc	r2, #1, #1
 80086b8:	701a      	strb	r2, [r3, #0]
	gb->display.frame_skip_count = 0;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80086c0:	331e      	adds	r3, #30
 80086c2:	781a      	ldrb	r2, [r3, #0]
 80086c4:	f36f 0200 	bfc	r2, #0, #1
 80086c8:	701a      	strb	r2, [r3, #0]

	gb->display.window_clear = 0;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80086d0:	331c      	adds	r3, #28
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
	gb->display.WY = 0;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80086dc:	331d      	adds	r3, #29
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]

	return;
 80086e2:	bf00      	nop
}
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <Hook_ReadRom>:
	uint16_t selected_palette[3][4];
	uint16_t fb[LCD_HEIGHT][LCD_WIDTH];
};

static uint8_t Hook_ReadRom(struct gb_s *gb, const uint_fast32_t addr)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
	const struct priv_t * const p = gb->direct.priv;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80086fe:	3328      	adds	r3, #40	; 0x28
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
	return p->rom[addr];
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	4413      	add	r3, r2
 800870c:	781b      	ldrb	r3, [r3, #0]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <Hook_ReadCartridgeRam>:

static uint8_t Hook_ReadCartridgeRam(struct gb_s *gb, const uint_fast32_t addr)
{
 800871a:	b480      	push	{r7}
 800871c:	b085      	sub	sp, #20
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
	const struct priv_t * const p = gb->direct.priv;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800872a:	3328      	adds	r3, #40	; 0x28
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60fb      	str	r3, [r7, #12]
	return p->cart_ram[addr];
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	4413      	add	r3, r2
 8008738:	781b      	ldrb	r3, [r3, #0]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <Hook_WriteCartridgeRam>:

void Hook_WriteCartridgeRam(struct gb_s *gb, const uint_fast32_t addr, const uint8_t val)
{
 8008746:	b480      	push	{r7}
 8008748:	b087      	sub	sp, #28
 800874a:	af00      	add	r7, sp, #0
 800874c:	60f8      	str	r0, [r7, #12]
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	4613      	mov	r3, r2
 8008752:	71fb      	strb	r3, [r7, #7]
	const struct priv_t * const p = gb->direct.priv;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 800875a:	3328      	adds	r3, #40	; 0x28
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	617b      	str	r3, [r7, #20]
	p->cart_ram[addr] = val;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4413      	add	r3, r2
 8008768:	79fa      	ldrb	r2, [r7, #7]
 800876a:	701a      	strb	r2, [r3, #0]
}
 800876c:	bf00      	nop
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <Hook_ReportEmulationError>:

void Hook_ReportEmulationError(struct gb_s *gb, const enum gb_error_e gb_err, const uint16_t val)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
 8008784:	4613      	mov	r3, r2
 8008786:	803b      	strh	r3, [r7, #0]
	switch(gb_err)
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d005      	beq.n	800879a <Hook_ReportEmulationError+0x22>
 800878e:	2b00      	cmp	r3, #0
 8008790:	dd0d      	ble.n	80087ae <Hook_ReportEmulationError+0x36>
 8008792:	3b02      	subs	r3, #2
 8008794:	2b01      	cmp	r3, #1
 8008796:	d80a      	bhi.n	80087ae <Hook_ReportEmulationError+0x36>
			gb->cpu_reg.sp);
		break;

	case GB_INVALID_WRITE:
	case GB_INVALID_READ:
		return;
 8008798:	e010      	b.n	80087bc <Hook_ReportEmulationError+0x44>
		printf("Invalid opcode %#04x at PC: %#06x, SP: %#06x\n",
 800879a:	8839      	ldrh	r1, [r7, #0]
			gb->cpu_reg.pc - 1,
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		printf("Invalid opcode %#04x at PC: %#06x, SP: %#06x\n",
 80087a0:	1e5a      	subs	r2, r3, #1
			gb->cpu_reg.sp);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
		printf("Invalid opcode %#04x at PC: %#06x, SP: %#06x\n",
 80087a6:	4807      	ldr	r0, [pc, #28]	; (80087c4 <Hook_ReportEmulationError+0x4c>)
 80087a8:	f001 ff2c 	bl	800a604 <iprintf>
		break;
 80087ac:	e003      	b.n	80087b6 <Hook_ReportEmulationError+0x3e>

	default:
		printf("Unknown error");
 80087ae:	4806      	ldr	r0, [pc, #24]	; (80087c8 <Hook_ReportEmulationError+0x50>)
 80087b0:	f001 ff28 	bl	800a604 <iprintf>
		break;
 80087b4:	bf00      	nop
	}

	printf("Error. Press q to exit, or any other key to continue.");
 80087b6:	4805      	ldr	r0, [pc, #20]	; (80087cc <Hook_ReportEmulationError+0x54>)
 80087b8:	f001 ff24 	bl	800a604 <iprintf>
}
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	0800b938 	.word	0x0800b938
 80087c8:	0800b968 	.word	0x0800b968
 80087cc:	0800b978 	.word	0x0800b978

080087d0 <Hook_DrawDisplayLine>:

void Hook_DrawDisplayLine(struct gb_s *gb, const uint8_t pixels[160], const uint_fast8_t line)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
	struct priv_t *priv = gb->direct.priv;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
 80087e2:	3328      	adds	r3, #40	; 0x28
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	613b      	str	r3, [r7, #16]

	for(unsigned int x = 0; x < LCD_WIDTH; x++)
 80087e8:	2300      	movs	r3, #0
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	e021      	b.n	8008832 <Hook_DrawDisplayLine+0x62>
	{
		priv->fb[line][x] = priv->selected_palette
				    [(pixels[x] & LCD_PALETTE_ALL) >> 4]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	4413      	add	r3, r2
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	111b      	asrs	r3, r3, #4
 80087f8:	f003 0103 	and.w	r1, r3, #3
				    [pixels[x] & 3];
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	f003 0203 	and.w	r2, r3, #3
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	0089      	lsls	r1, r1, #2
 800880c:	440a      	add	r2, r1
 800880e:	3204      	adds	r2, #4
 8008810:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
		priv->fb[line][x] = priv->selected_palette
 8008814:	6939      	ldr	r1, [r7, #16]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	015b      	lsls	r3, r3, #5
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4413      	add	r3, r2
 8008824:	3310      	adds	r3, #16
 8008826:	4602      	mov	r2, r0
 8008828:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned int x = 0; x < LCD_WIDTH; x++)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	3301      	adds	r3, #1
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b9f      	cmp	r3, #159	; 0x9f
 8008836:	d9da      	bls.n	80087ee <Hook_DrawDisplayLine+0x1e>
	}
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
	...

08008848 <auto_assign_palette>:

void auto_assign_palette(struct priv_t *priv, uint8_t game_checksum)
{
 8008848:	b5b0      	push	{r4, r5, r7, lr}
 800884a:	b0c6      	sub	sp, #280	; 0x118
 800884c:	af00      	add	r7, sp, #0
 800884e:	1d3b      	adds	r3, r7, #4
 8008850:	6018      	str	r0, [r3, #0]
 8008852:	460a      	mov	r2, r1
 8008854:	1cfb      	adds	r3, r7, #3
 8008856:	701a      	strb	r2, [r3, #0]
	size_t palette_bytes = 3 * 4 * sizeof(uint16_t);
 8008858:	2318      	movs	r3, #24
 800885a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	switch(game_checksum)
 800885e:	1cfb      	adds	r3, r7, #3
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2bff      	cmp	r3, #255	; 0xff
 8008864:	f000 8185 	beq.w	8008b72 <auto_assign_palette+0x32a>
 8008868:	2bff      	cmp	r3, #255	; 0xff
 800886a:	f300 8254 	bgt.w	8008d16 <auto_assign_palette+0x4ce>
 800886e:	2bf6      	cmp	r3, #246	; 0xf6
 8008870:	f000 823c 	beq.w	8008cec <auto_assign_palette+0x4a4>
 8008874:	2bf6      	cmp	r3, #246	; 0xf6
 8008876:	f300 824e 	bgt.w	8008d16 <auto_assign_palette+0x4ce>
 800887a:	2bdb      	cmp	r3, #219	; 0xdb
 800887c:	f000 818e 	beq.w	8008b9c <auto_assign_palette+0x354>
 8008880:	2bdb      	cmp	r3, #219	; 0xdb
 8008882:	f300 8248 	bgt.w	8008d16 <auto_assign_palette+0x4ce>
 8008886:	2bb3      	cmp	r3, #179	; 0xb3
 8008888:	f300 8170 	bgt.w	8008b6c <auto_assign_palette+0x324>
 800888c:	2b00      	cmp	r3, #0
 800888e:	f340 8242 	ble.w	8008d16 <auto_assign_palette+0x4ce>
 8008892:	3b01      	subs	r3, #1
 8008894:	2bb2      	cmp	r3, #178	; 0xb2
 8008896:	f200 823e 	bhi.w	8008d16 <auto_assign_palette+0x4ce>
 800889a:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <auto_assign_palette+0x58>)
 800889c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a0:	08008ced 	.word	0x08008ced
 80088a4:	08008d17 	.word	0x08008d17
 80088a8:	08008d17 	.word	0x08008d17
 80088ac:	08008d17 	.word	0x08008d17
 80088b0:	08008d17 	.word	0x08008d17
 80088b4:	08008d17 	.word	0x08008d17
 80088b8:	08008d17 	.word	0x08008d17
 80088bc:	08008d17 	.word	0x08008d17
 80088c0:	08008d17 	.word	0x08008d17
 80088c4:	08008d17 	.word	0x08008d17
 80088c8:	08008d17 	.word	0x08008d17
 80088cc:	08008d17 	.word	0x08008d17
 80088d0:	08008d17 	.word	0x08008d17
 80088d4:	08008d17 	.word	0x08008d17
 80088d8:	08008d17 	.word	0x08008d17
 80088dc:	08008ced 	.word	0x08008ced
 80088e0:	08008d17 	.word	0x08008d17
 80088e4:	08008d17 	.word	0x08008d17
 80088e8:	08008d17 	.word	0x08008d17
 80088ec:	08008c1b 	.word	0x08008c1b
 80088f0:	08008b9d 	.word	0x08008b9d
 80088f4:	08008d17 	.word	0x08008d17
 80088f8:	08008d17 	.word	0x08008d17
 80088fc:	08008c99 	.word	0x08008c99
 8008900:	08008bc7 	.word	0x08008bc7
 8008904:	08008d17 	.word	0x08008d17
 8008908:	08008d17 	.word	0x08008d17
 800890c:	08008d17 	.word	0x08008d17
 8008910:	08008d17 	.word	0x08008d17
 8008914:	08008d17 	.word	0x08008d17
 8008918:	08008d17 	.word	0x08008d17
 800891c:	08008d17 	.word	0x08008d17
 8008920:	08008d17 	.word	0x08008d17
 8008924:	08008d17 	.word	0x08008d17
 8008928:	08008d17 	.word	0x08008d17
 800892c:	08008d17 	.word	0x08008d17
 8008930:	08008d17 	.word	0x08008d17
 8008934:	08008d17 	.word	0x08008d17
 8008938:	08008c6f 	.word	0x08008c6f
 800893c:	08008d17 	.word	0x08008d17
 8008940:	08008ced 	.word	0x08008ced
 8008944:	08008d17 	.word	0x08008d17
 8008948:	08008d17 	.word	0x08008d17
 800894c:	08008d17 	.word	0x08008d17
 8008950:	08008d17 	.word	0x08008d17
 8008954:	08008d17 	.word	0x08008d17
 8008958:	08008d17 	.word	0x08008d17
 800895c:	08008d17 	.word	0x08008d17
 8008960:	08008d17 	.word	0x08008d17
 8008964:	08008d17 	.word	0x08008d17
 8008968:	08008d17 	.word	0x08008d17
 800896c:	08008d17 	.word	0x08008d17
 8008970:	08008d17 	.word	0x08008d17
 8008974:	08008d17 	.word	0x08008d17
 8008978:	08008d17 	.word	0x08008d17
 800897c:	08008d17 	.word	0x08008d17
 8008980:	08008d17 	.word	0x08008d17
 8008984:	08008d17 	.word	0x08008d17
 8008988:	08008d17 	.word	0x08008d17
 800898c:	08008d17 	.word	0x08008d17
 8008990:	08008d17 	.word	0x08008d17
 8008994:	08008d17 	.word	0x08008d17
 8008998:	08008d17 	.word	0x08008d17
 800899c:	08008d17 	.word	0x08008d17
 80089a0:	08008d17 	.word	0x08008d17
 80089a4:	08008d17 	.word	0x08008d17
 80089a8:	08008d17 	.word	0x08008d17
 80089ac:	08008d17 	.word	0x08008d17
 80089b0:	08008bf1 	.word	0x08008bf1
 80089b4:	08008d17 	.word	0x08008d17
 80089b8:	08008d17 	.word	0x08008d17
 80089bc:	08008d17 	.word	0x08008d17
 80089c0:	08008c6f 	.word	0x08008c6f
 80089c4:	08008d17 	.word	0x08008d17
 80089c8:	08008c99 	.word	0x08008c99
 80089cc:	08008d17 	.word	0x08008d17
 80089d0:	08008d17 	.word	0x08008d17
 80089d4:	08008d17 	.word	0x08008d17
 80089d8:	08008d17 	.word	0x08008d17
 80089dc:	08008d17 	.word	0x08008d17
 80089e0:	08008d17 	.word	0x08008d17
 80089e4:	08008ced 	.word	0x08008ced
 80089e8:	08008d17 	.word	0x08008d17
 80089ec:	08008d17 	.word	0x08008d17
 80089f0:	08008d17 	.word	0x08008d17
 80089f4:	08008d17 	.word	0x08008d17
 80089f8:	08008d17 	.word	0x08008d17
 80089fc:	08008d17 	.word	0x08008d17
 8008a00:	08008d17 	.word	0x08008d17
 8008a04:	08008d17 	.word	0x08008d17
 8008a08:	08008d17 	.word	0x08008d17
 8008a0c:	08008c6f 	.word	0x08008c6f
 8008a10:	08008ced 	.word	0x08008ced
 8008a14:	08008d17 	.word	0x08008d17
 8008a18:	08008d17 	.word	0x08008d17
 8008a1c:	08008d17 	.word	0x08008d17
 8008a20:	08008bf1 	.word	0x08008bf1
 8008a24:	08008d17 	.word	0x08008d17
 8008a28:	08008d17 	.word	0x08008d17
 8008a2c:	08008d17 	.word	0x08008d17
 8008a30:	08008d17 	.word	0x08008d17
 8008a34:	08008d17 	.word	0x08008d17
 8008a38:	08008d17 	.word	0x08008d17
 8008a3c:	08008ced 	.word	0x08008ced
 8008a40:	08008d17 	.word	0x08008d17
 8008a44:	08008c99 	.word	0x08008c99
 8008a48:	08008c99 	.word	0x08008c99
 8008a4c:	08008d17 	.word	0x08008d17
 8008a50:	08008ced 	.word	0x08008ced
 8008a54:	08008d17 	.word	0x08008d17
 8008a58:	08008d17 	.word	0x08008d17
 8008a5c:	08008cc3 	.word	0x08008cc3
 8008a60:	08008b73 	.word	0x08008b73
 8008a64:	08008d17 	.word	0x08008d17
 8008a68:	08008d17 	.word	0x08008d17
 8008a6c:	08008d17 	.word	0x08008d17
 8008a70:	08008d17 	.word	0x08008d17
 8008a74:	08008d17 	.word	0x08008d17
 8008a78:	08008d17 	.word	0x08008d17
 8008a7c:	08008d17 	.word	0x08008d17
 8008a80:	08008d17 	.word	0x08008d17
 8008a84:	08008d17 	.word	0x08008d17
 8008a88:	08008d17 	.word	0x08008d17
 8008a8c:	08008d17 	.word	0x08008d17
 8008a90:	08008d17 	.word	0x08008d17
 8008a94:	08008d17 	.word	0x08008d17
 8008a98:	08008d17 	.word	0x08008d17
 8008a9c:	08008d17 	.word	0x08008d17
 8008aa0:	08008d17 	.word	0x08008d17
 8008aa4:	08008d17 	.word	0x08008d17
 8008aa8:	08008d17 	.word	0x08008d17
 8008aac:	08008d17 	.word	0x08008d17
 8008ab0:	08008d17 	.word	0x08008d17
 8008ab4:	08008d17 	.word	0x08008d17
 8008ab8:	08008d17 	.word	0x08008d17
 8008abc:	08008d17 	.word	0x08008d17
 8008ac0:	08008d17 	.word	0x08008d17
 8008ac4:	08008d17 	.word	0x08008d17
 8008ac8:	08008c45 	.word	0x08008c45
 8008acc:	08008d17 	.word	0x08008d17
 8008ad0:	08008d17 	.word	0x08008d17
 8008ad4:	08008d17 	.word	0x08008d17
 8008ad8:	08008d17 	.word	0x08008d17
 8008adc:	08008d17 	.word	0x08008d17
 8008ae0:	08008d17 	.word	0x08008d17
 8008ae4:	08008d17 	.word	0x08008d17
 8008ae8:	08008d17 	.word	0x08008d17
 8008aec:	08008d17 	.word	0x08008d17
 8008af0:	08008b9d 	.word	0x08008b9d
 8008af4:	08008d17 	.word	0x08008d17
 8008af8:	08008d17 	.word	0x08008d17
 8008afc:	08008d17 	.word	0x08008d17
 8008b00:	08008d17 	.word	0x08008d17
 8008b04:	08008d17 	.word	0x08008d17
 8008b08:	08008d17 	.word	0x08008d17
 8008b0c:	08008d17 	.word	0x08008d17
 8008b10:	08008d17 	.word	0x08008d17
 8008b14:	08008d17 	.word	0x08008d17
 8008b18:	08008d17 	.word	0x08008d17
 8008b1c:	08008d17 	.word	0x08008d17
 8008b20:	08008d17 	.word	0x08008d17
 8008b24:	08008d17 	.word	0x08008d17
 8008b28:	08008d17 	.word	0x08008d17
 8008b2c:	08008d17 	.word	0x08008d17
 8008b30:	08008d17 	.word	0x08008d17
 8008b34:	08008d17 	.word	0x08008d17
 8008b38:	08008d17 	.word	0x08008d17
 8008b3c:	08008d17 	.word	0x08008d17
 8008b40:	08008d17 	.word	0x08008d17
 8008b44:	08008d17 	.word	0x08008d17
 8008b48:	08008d17 	.word	0x08008d17
 8008b4c:	08008d17 	.word	0x08008d17
 8008b50:	08008d17 	.word	0x08008d17
 8008b54:	08008d17 	.word	0x08008d17
 8008b58:	08008d17 	.word	0x08008d17
 8008b5c:	08008d17 	.word	0x08008d17
 8008b60:	08008d17 	.word	0x08008d17
 8008b64:	08008d17 	.word	0x08008d17
 8008b68:	08008c6f 	.word	0x08008c6f
 8008b6c:	2bd8      	cmp	r3, #216	; 0xd8
 8008b6e:	d03f      	beq.n	8008bf0 <auto_assign_palette+0x3a8>
 8008b70:	e0d1      	b.n	8008d16 <auto_assign_palette+0x4ce>
	{
	/* Balloon Kid and Tetris Blast */
	case 0x71:
	case 0xFF:
	{
		const uint16_t palette[3][4] =
 8008b72:	4b79      	ldr	r3, [pc, #484]	; (8008d58 <auto_assign_palette+0x510>)
 8008b74:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8008b78:	461d      	mov	r5, r3
 8008b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008b82:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7FFF, 0x7E60, 0x7C00, 0x0000 }, /* OBJ0 */
			{ 0x7FFF, 0x7E60, 0x7C00, 0x0000 }, /* OBJ1 */
			{ 0x7FFF, 0x7E60, 0x7C00, 0x0000 }  /* BG */
		};
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008b86:	1d3b      	adds	r3, r7, #4
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8008b90:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 fd1f 	bl	800a5d8 <memcpy>
		break;
 8008b9a:	e0d8      	b.n	8008d4e <auto_assign_palette+0x506>
	/* Pokemon Yellow and Tetris */
	case 0x15:
	case 0xDB:
	case 0x95: /* Not officially */
	{
		const uint16_t palette[3][4] =
 8008b9c:	4b6f      	ldr	r3, [pc, #444]	; (8008d5c <auto_assign_palette+0x514>)
 8008b9e:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8008ba2:	461d      	mov	r5, r3
 8008ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ba8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008bac:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7FFF, 0x7FE0, 0x7C00, 0x0000 }, /* OBJ0 */
			{ 0x7FFF, 0x7FE0, 0x7C00, 0x0000 }, /* OBJ1 */
			{ 0x7FFF, 0x7FE0, 0x7C00, 0x0000 }  /* BG */
		};
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008bb0:	1d3b      	adds	r3, r7, #4
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3308      	adds	r3, #8
 8008bb6:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8008bba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fd0a 	bl	800a5d8 <memcpy>
		break;
 8008bc4:	e0c3      	b.n	8008d4e <auto_assign_palette+0x506>
	}

	/* Donkey Kong */
	case 0x19:
	{
		const uint16_t palette[3][4] =
 8008bc6:	4b66      	ldr	r3, [pc, #408]	; (8008d60 <auto_assign_palette+0x518>)
 8008bc8:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 8008bcc:	461d      	mov	r5, r3
 8008bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008bd6:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7FFF, 0x7E10, 0x48E7, 0x0000 }, /* OBJ0 */
			{ 0x7FFF, 0x7E10, 0x48E7, 0x0000 }, /* OBJ1 */
			{ 0x7FFF, 0x7E60, 0x7C00, 0x0000 }  /* BG */
		};
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008bda:	1d3b      	adds	r3, r7, #4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8008be4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 fcf5 	bl	800a5d8 <memcpy>
		break;
 8008bee:	e0ae      	b.n	8008d4e <auto_assign_palette+0x506>
	case 0x45:

	/* Pokemon Blue Star */
	case 0xD8:
	{
		const uint16_t palette[3][4] =
 8008bf0:	4b5c      	ldr	r3, [pc, #368]	; (8008d64 <auto_assign_palette+0x51c>)
 8008bf2:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8008bf6:	461d      	mov	r5, r3
 8008bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008c00:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7FFF, 0x7E10, 0x48E7, 0x0000 }, /* OBJ0 */
			{ 0x7FFF, 0x329F, 0x001F, 0x0000 }, /* OBJ1 */
			{ 0x7FFF, 0x329F, 0x001F, 0x0000 }  /* BG */
		};
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008c04:	1d3b      	adds	r3, r7, #4
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3308      	adds	r3, #8
 8008c0a:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8008c0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008c12:	4618      	mov	r0, r3
 8008c14:	f001 fce0 	bl	800a5d8 <memcpy>
		break;
 8008c18:	e099      	b.n	8008d4e <auto_assign_palette+0x506>
	}

	/* Pokemon Red */
	case 0x14:
	{
		const uint16_t palette[3][4] =
 8008c1a:	4b53      	ldr	r3, [pc, #332]	; (8008d68 <auto_assign_palette+0x520>)
 8008c1c:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8008c20:	461d      	mov	r5, r3
 8008c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008c2a:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7FFF, 0x3FE6, 0x0200, 0x0000 }, /* OBJ0 */
			{ 0x7FFF, 0x7E10, 0x48E7, 0x0000 }, /* OBJ1 */
			{ 0x7FFF, 0x7E10, 0x48E7, 0x0000 }  /* BG */
		};
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008c2e:	1d3b      	adds	r3, r7, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8008c38:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f001 fccb 	bl	800a5d8 <memcpy>
		break;
 8008c42:	e084      	b.n	8008d4e <auto_assign_palette+0x506>
	}

	/* Pokemon Red Star */
	case 0x8B:
	{
		const uint16_t palette[3][4] =
 8008c44:	4b49      	ldr	r3, [pc, #292]	; (8008d6c <auto_assign_palette+0x524>)
 8008c46:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8008c4a:	461d      	mov	r5, r3
 8008c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c50:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008c54:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7FFF, 0x7E10, 0x48E7, 0x0000 }, /* OBJ0 */
			{ 0x7FFF, 0x329F, 0x001F, 0x0000 }, /* OBJ1 */
			{ 0x7FFF, 0x3FE6, 0x0200, 0x0000 }  /* BG */
		};
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008c58:	1d3b      	adds	r3, r7, #4
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8008c62:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008c66:	4618      	mov	r0, r3
 8008c68:	f001 fcb6 	bl	800a5d8 <memcpy>
		break;
 8008c6c:	e06f      	b.n	8008d4e <auto_assign_palette+0x506>
	case 0x27:
	case 0x49:
	case 0x5C:
	case 0xB3:
	{
		const uint16_t palette[3][4] =
 8008c6e:	4b40      	ldr	r3, [pc, #256]	; (8008d70 <auto_assign_palette+0x528>)
 8008c70:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8008c74:	461d      	mov	r5, r3
 8008c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008c7e:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7D8A, 0x6800, 0x3000, 0x0000 }, /* OBJ0 */
			{ 0x001F, 0x7FFF, 0x7FEF, 0x021F }, /* OBJ1 */
			{ 0x527F, 0x7FE0, 0x0180, 0x0000 }  /* BG */
		};
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008c82:	1d3b      	adds	r3, r7, #4
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8008c8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008c90:	4618      	mov	r0, r3
 8008c92:	f001 fca1 	bl	800a5d8 <memcpy>
		break;
 8008c96:	e05a      	b.n	8008d4e <auto_assign_palette+0x506>
	case 0x18:
	case 0x6A:
	case 0x4B:
	case 0x6B:
	{
		const uint16_t palette[3][4] =
 8008c98:	4b36      	ldr	r3, [pc, #216]	; (8008d74 <auto_assign_palette+0x52c>)
 8008c9a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ca4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ca8:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7F08, 0x7F40, 0x48E0, 0x2400 }, /* OBJ0 */
			{ 0x7FFF, 0x2EFF, 0x7C00, 0x001F }, /* OBJ1 */
			{ 0x7FFF, 0x463B, 0x2951, 0x0000 }  /* BG */
		};
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008cac:	1d3b      	adds	r3, r7, #4
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8008cb6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 fc8c 	bl	800a5d8 <memcpy>
		break;
 8008cc0:	e045      	b.n	8008d4e <auto_assign_palette+0x506>
	}

	/* Link's Awakening */
	case 0x70:
	{
		const uint16_t palette[3][4] =
 8008cc2:	4b2d      	ldr	r3, [pc, #180]	; (8008d78 <auto_assign_palette+0x530>)
 8008cc4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8008cc8:	461d      	mov	r5, r3
 8008cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008cd2:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7FFF, 0x03E0, 0x1A00, 0x0120 }, /* OBJ0 */
			{ 0x7FFF, 0x329F, 0x001F, 0x001F }, /* OBJ1 */
			{ 0x7FFF, 0x7E10, 0x48E7, 0x0000 }  /* BG */
		};
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008cd6:	1d3b      	adds	r3, r7, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3308      	adds	r3, #8
 8008cdc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8008ce0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 fc77 	bl	800a5d8 <memcpy>
		break;
 8008cea:	e030      	b.n	8008d4e <auto_assign_palette+0x506>
	case 0x5D:
	case 0x68:
	case 0x6D:
	case 0xF6:
	{
		const uint16_t palette[3][4] =
 8008cec:	4b23      	ldr	r3, [pc, #140]	; (8008d7c <auto_assign_palette+0x534>)
 8008cee:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8008cf2:	461d      	mov	r5, r3
 8008cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008cfc:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7FFF, 0x329F, 0x001F, 0x0000 }, /* OBJ0 */
			{ 0x7FFF, 0x3FE6, 0x0200, 0x0000 }, /* OBJ1 */
			{ 0x7FFF, 0x7EAC, 0x40C0, 0x0000 }  /* BG */
		};
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008d00:	1d3b      	adds	r3, r7, #4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3308      	adds	r3, #8
 8008d06:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008d0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 fc62 	bl	800a5d8 <memcpy>
		break;
 8008d14:	e01b      	b.n	8008d4e <auto_assign_palette+0x506>
	}

	default:
	{
		const uint16_t palette[3][4] =
 8008d16:	f107 030c 	add.w	r3, r7, #12
 8008d1a:	4a19      	ldr	r2, [pc, #100]	; (8008d80 <auto_assign_palette+0x538>)
 8008d1c:	461c      	mov	r4, r3
 8008d1e:	4615      	mov	r5, r2
 8008d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008d28:	e884 0003 	stmia.w	r4, {r0, r1}
		{
			{ 0x7FFF, 0x5294, 0x294A, 0x0000 },
			{ 0x7FFF, 0x5294, 0x294A, 0x0000 },
			{ 0x7FFF, 0x5294, 0x294A, 0x0000 }
		};
		printf("No palette found for 0x%02X.\n", game_checksum);
 8008d2c:	1cfb      	adds	r3, r7, #3
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	4619      	mov	r1, r3
 8008d32:	4814      	ldr	r0, [pc, #80]	; (8008d84 <auto_assign_palette+0x53c>)
 8008d34:	f001 fc66 	bl	800a604 <iprintf>
		memcpy(priv->selected_palette, palette, palette_bytes);
 8008d38:	1d3b      	adds	r3, r7, #4
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	f107 010c 	add.w	r1, r7, #12
 8008d42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008d46:	4618      	mov	r0, r3
 8008d48:	f001 fc46 	bl	800a5d8 <memcpy>
	}
	}
}
 8008d4c:	bf00      	nop
 8008d4e:	bf00      	nop
 8008d50:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bdb0      	pop	{r4, r5, r7, pc}
 8008d58:	0800b9d0 	.word	0x0800b9d0
 8008d5c:	0800b9e8 	.word	0x0800b9e8
 8008d60:	0800ba00 	.word	0x0800ba00
 8008d64:	0800ba18 	.word	0x0800ba18
 8008d68:	0800ba30 	.word	0x0800ba30
 8008d6c:	0800ba48 	.word	0x0800ba48
 8008d70:	0800ba60 	.word	0x0800ba60
 8008d74:	0800ba78 	.word	0x0800ba78
 8008d78:	0800ba90 	.word	0x0800ba90
 8008d7c:	0800baa8 	.word	0x0800baa8
 8008d80:	0800bac0 	.word	0x0800bac0
 8008d84:	0800b9b0 	.word	0x0800b9b0

08008d88 <StartEmulator>:

void StartEmulator(struct ILI9341_t *display, uint8_t *rom, uint8_t *savefile)
{
 8008d88:	b5b0      	push	{r4, r5, r7, lr}
 8008d8a:	f5ad 4d76 	sub.w	sp, sp, #62976	; 0xf600
 8008d8e:	b0a4      	sub	sp, #144	; 0x90
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008d96:	3b7c      	subs	r3, #124	; 0x7c
 8008d98:	6018      	str	r0, [r3, #0]
 8008d9a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008d9e:	3b80      	subs	r3, #128	; 0x80
 8008da0:	6019      	str	r1, [r3, #0]
 8008da2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008da6:	3b84      	subs	r3, #132	; 0x84
 8008da8:	601a      	str	r2, [r3, #0]
	printf("Initializing Emulator\n");
 8008daa:	48cb      	ldr	r0, [pc, #812]	; (80090d8 <StartEmulator+0x350>)
 8008dac:	f001 fcb0 	bl	800a710 <puts>

	struct gb_s gb;
	struct priv_t priv =
 8008db0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008db4:	3b74      	subs	r3, #116	; 0x74
 8008db6:	4618      	mov	r0, r3
 8008db8:	f24b 4320 	movw	r3, #46112	; 0xb420
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	f001 fc18 	bl	800a5f4 <memset>
 8008dc4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008dc8:	3b74      	subs	r3, #116	; 0x74
 8008dca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008dce:	3a80      	subs	r2, #128	; 0x80
 8008dd0:	6812      	ldr	r2, [r2, #0]
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008dd8:	3b74      	subs	r3, #116	; 0x74
 8008dda:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008dde:	3a84      	subs	r2, #132	; 0x84
 8008de0:	6812      	ldr	r2, [r2, #0]
 8008de2:	605a      	str	r2, [r3, #4]
	{
		.rom = rom,
		.cart_ram = savefile
	};
	const double target_speed_ms = 1000.0 / VERTICAL_SYNC;
 8008de4:	a3ba      	add	r3, pc, #744	; (adr r3, 80090d0 <StartEmulator+0x348>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f507 4176 	add.w	r1, r7, #62976	; 0xf600
 8008dee:	f101 0178 	add.w	r1, r1, #120	; 0x78
 8008df2:	e9c1 2300 	strd	r2, r3, [r1]
	double speed_compensation = 0.0;
 8008df6:	f04f 0200 	mov.w	r2, #0
 8008dfa:	f04f 0300 	mov.w	r3, #0
 8008dfe:	f507 4176 	add.w	r1, r7, #62976	; 0xf600
 8008e02:	f101 0180 	add.w	r1, r1, #128	; 0x80
 8008e06:	e9c1 2300 	strd	r2, r3, [r1]
	uint_fast32_t new_ticks, old_ticks;
	enum gb_init_error_e gb_ret;

	gb_ret = gb_init(
 8008e0a:	f507 4034 	add.w	r0, r7, #46080	; 0xb400
 8008e0e:	f100 0088 	add.w	r0, r0, #136	; 0x88
 8008e12:	3854      	subs	r0, #84	; 0x54
 8008e14:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008e18:	3b74      	subs	r3, #116	; 0x74
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	4baf      	ldr	r3, [pc, #700]	; (80090dc <StartEmulator+0x354>)
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	4baf      	ldr	r3, [pc, #700]	; (80090e0 <StartEmulator+0x358>)
 8008e22:	4ab0      	ldr	r2, [pc, #704]	; (80090e4 <StartEmulator+0x35c>)
 8008e24:	49b0      	ldr	r1, [pc, #704]	; (80090e8 <StartEmulator+0x360>)
 8008e26:	f7ff fb3b 	bl	80084a0 <gb_init>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f507 4276 	add.w	r2, r7, #62976	; 0xf600
 8008e30:	f102 0277 	add.w	r2, r2, #119	; 0x77
 8008e34:	7013      	strb	r3, [r2, #0]
		&Hook_ReadCartridgeRam,
		&Hook_WriteCartridgeRam,
		&Hook_ReportEmulationError,
		&priv
	);
	auto_assign_palette(&priv, gb_colour_hash(&gb));
 8008e36:	f507 4334 	add.w	r3, r7, #46080	; 0xb400
 8008e3a:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8008e3e:	3b54      	subs	r3, #84	; 0x54
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff fa5c 	bl	80082fe <gb_colour_hash>
 8008e46:	4603      	mov	r3, r0
 8008e48:	461a      	mov	r2, r3
 8008e4a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008e4e:	3b74      	subs	r3, #116	; 0x74
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7ff fcf8 	bl	8008848 <auto_assign_palette>
	// TODO: Set the clock for games that require it
	// gb_set_rtc(&gb, time);

	switch(gb_ret)
 8008e58:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8008e5c:	f103 0377 	add.w	r3, r3, #119	; 0x77
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d009      	beq.n	8008e7a <StartEmulator+0xf2>
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	dc0b      	bgt.n	8008e82 <StartEmulator+0xfa>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d013      	beq.n	8008e96 <StartEmulator+0x10e>
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d107      	bne.n	8008e82 <StartEmulator+0xfa>
	{
	case GB_INIT_NO_ERROR:
		break;

	case GB_INIT_CARTRIDGE_UNSUPPORTED:
		printf("Unsupported cartridge.");
 8008e72:	489e      	ldr	r0, [pc, #632]	; (80090ec <StartEmulator+0x364>)
 8008e74:	f001 fbc6 	bl	800a604 <iprintf>
		return;
 8008e78:	e123      	b.n	80090c2 <StartEmulator+0x33a>

	case GB_INIT_INVALID_CHECKSUM:
		printf("Invalid ROM: Checksum failure.");
 8008e7a:	489d      	ldr	r0, [pc, #628]	; (80090f0 <StartEmulator+0x368>)
 8008e7c:	f001 fbc2 	bl	800a604 <iprintf>
		return;
 8008e80:	e11f      	b.n	80090c2 <StartEmulator+0x33a>

	default:
		printf("Unknown error: %d\n", gb_ret);
 8008e82:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8008e86:	f103 0377 	add.w	r3, r3, #119	; 0x77
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4899      	ldr	r0, [pc, #612]	; (80090f4 <StartEmulator+0x36c>)
 8008e90:	f001 fbb8 	bl	800a604 <iprintf>
		return;
 8008e94:	e115      	b.n	80090c2 <StartEmulator+0x33a>
		break;
 8008e96:	bf00      	nop
	}

	gb_init_lcd(&gb, &Hook_DrawDisplayLine);
 8008e98:	f507 4334 	add.w	r3, r7, #46080	; 0xb400
 8008e9c:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8008ea0:	3b54      	subs	r3, #84	; 0x54
 8008ea2:	4995      	ldr	r1, [pc, #596]	; (80090f8 <StartEmulator+0x370>)
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7ff fbe5 	bl	8008674 <gb_init_lcd>

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8008eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008eae:	4893      	ldr	r0, [pc, #588]	; (80090fc <StartEmulator+0x374>)
 8008eb0:	f000 ff39 	bl	8009d26 <HAL_GPIO_TogglePin>
		int delay;
		static unsigned int rtc_timer = 0;

		old_ticks = HAL_GetTick();
 8008eb4:	f000 fc84 	bl	80097c0 <HAL_GetTick>
 8008eb8:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8008ebc:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8008ec0:	6018      	str	r0, [r3, #0]

		// TODO: Read buttons and set 'gb.direct.joypad_bits.XXXX'

		gb_run_frame(&gb);
 8008ec2:	f507 4334 	add.w	r3, r7, #46080	; 0xb400
 8008ec6:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8008eca:	3b54      	subs	r3, #84	; 0x54
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff f9fd 	bl	80082cc <gb_run_frame>

		// Tick the internal RTC when 1 second has passed
		rtc_timer += target_speed_ms;
 8008ed2:	4b8b      	ldr	r3, [pc, #556]	; (8009100 <StartEmulator+0x378>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7f7 fb14 	bl	8000504 <__aeabi_ui2d>
 8008edc:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8008ee0:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8008ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee8:	f7f7 f9d0 	bl	800028c <__adddf3>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4610      	mov	r0, r2
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f7f7 fba8 	bl	8000648 <__aeabi_d2uiz>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	4a81      	ldr	r2, [pc, #516]	; (8009100 <StartEmulator+0x378>)
 8008efc:	6013      	str	r3, [r2, #0]

		if(rtc_timer >= 1000)
 8008efe:	4b80      	ldr	r3, [pc, #512]	; (8009100 <StartEmulator+0x378>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f06:	d30d      	bcc.n	8008f24 <StartEmulator+0x19c>
		{
			rtc_timer -= 1000;
 8008f08:	4b7d      	ldr	r3, [pc, #500]	; (8009100 <StartEmulator+0x378>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8008f10:	4a7b      	ldr	r2, [pc, #492]	; (8009100 <StartEmulator+0x378>)
 8008f12:	6013      	str	r3, [r2, #0]
			gb_tick_rtc(&gb);
 8008f14:	f507 4334 	add.w	r3, r7, #46080	; 0xb400
 8008f18:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8008f1c:	3b54      	subs	r3, #84	; 0x54
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f8 f87d 	bl	800101e <gb_tick_rtc>
		}

		// TODO: Update the screen copying from priv.fb
		ILI9341_DrawFramebuffer(display, priv.fb, LCD_WIDTH, LCD_HEIGHT);
 8008f24:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008f28:	3b74      	subs	r3, #116	; 0x74
 8008f2a:	f103 0120 	add.w	r1, r3, #32
 8008f2e:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8008f32:	387c      	subs	r0, #124	; 0x7c
 8008f34:	2390      	movs	r3, #144	; 0x90
 8008f36:	22a0      	movs	r2, #160	; 0xa0
 8008f38:	6800      	ldr	r0, [r0, #0]
 8008f3a:	f7f8 f825 	bl	8000f88 <ILI9341_DrawFramebuffer>

		new_ticks = HAL_GetTick();
 8008f3e:	f000 fc3f 	bl	80097c0 <HAL_GetTick>
 8008f42:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8008f46:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8008f4a:	6018      	str	r0, [r3, #0]

		speed_compensation += target_speed_ms - (new_ticks - old_ticks);
 8008f4c:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8008f50:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8008f5a:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7f7 face 	bl	8000504 <__aeabi_ui2d>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	f507 4176 	add.w	r1, r7, #62976	; 0xf600
 8008f70:	f101 0178 	add.w	r1, r1, #120	; 0x78
 8008f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f78:	f7f7 f986 	bl	8000288 <__aeabi_dsub>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	f507 4176 	add.w	r1, r7, #62976	; 0xf600
 8008f84:	f101 0180 	add.w	r1, r1, #128	; 0x80
 8008f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f8c:	f7f7 f97e 	bl	800028c <__adddf3>
 8008f90:	4602      	mov	r2, r0
 8008f92:	460b      	mov	r3, r1
 8008f94:	f507 4176 	add.w	r1, r7, #62976	; 0xf600
 8008f98:	f101 0180 	add.w	r1, r1, #128	; 0x80
 8008f9c:	e9c1 2300 	strd	r2, r3, [r1]
		delay = (int)(speed_compensation);
 8008fa0:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8008fa4:	f103 0380 	add.w	r3, r3, #128	; 0x80
 8008fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fac:	f7f7 fb24 	bl	80005f8 <__aeabi_d2iz>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f507 4276 	add.w	r2, r7, #62976	; 0xf600
 8008fb6:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8008fba:	6013      	str	r3, [r2, #0]
		speed_compensation -= delay;
 8008fbc:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8008fc0:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	f7f7 faad 	bl	8000524 <__aeabi_i2d>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	f507 4176 	add.w	r1, r7, #62976	; 0xf600
 8008fd2:	f101 0180 	add.w	r1, r1, #128	; 0x80
 8008fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fda:	f7f7 f955 	bl	8000288 <__aeabi_dsub>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	f507 4176 	add.w	r1, r7, #62976	; 0xf600
 8008fe6:	f101 0180 	add.w	r1, r1, #128	; 0x80
 8008fea:	e9c1 2300 	strd	r2, r3, [r1]

		// Only run delay logic if required
		if(delay > 0)
 8008fee:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8008ff2:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f77f af56 	ble.w	8008eaa <StartEmulator+0x122>
		{
			uint_fast32_t delay_ticks = HAL_GetTick();
 8008ffe:	f000 fbdf 	bl	80097c0 <HAL_GetTick>
 8009002:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8009006:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800900a:	6018      	str	r0, [r3, #0]
			uint_fast32_t after_delay_ticks;

			rtc_timer += delay;
 800900c:	4b3c      	ldr	r3, [pc, #240]	; (8009100 <StartEmulator+0x378>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8009014:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4413      	add	r3, r2
 800901c:	4a38      	ldr	r2, [pc, #224]	; (8009100 <StartEmulator+0x378>)
 800901e:	6013      	str	r3, [r2, #0]

			if(rtc_timer >= 1000)
 8009020:	4b37      	ldr	r3, [pc, #220]	; (8009100 <StartEmulator+0x378>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009028:	d30d      	bcc.n	8009046 <StartEmulator+0x2be>
			{
				rtc_timer -= 1000;
 800902a:	4b35      	ldr	r3, [pc, #212]	; (8009100 <StartEmulator+0x378>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8009032:	4a33      	ldr	r2, [pc, #204]	; (8009100 <StartEmulator+0x378>)
 8009034:	6013      	str	r3, [r2, #0]
				gb_tick_rtc(&gb);
 8009036:	f507 4334 	add.w	r3, r7, #46080	; 0xb400
 800903a:	f103 0388 	add.w	r3, r3, #136	; 0x88
 800903e:	3b54      	subs	r3, #84	; 0x54
 8009040:	4618      	mov	r0, r3
 8009042:	f7f7 ffec 	bl	800101e <gb_tick_rtc>
			}

			HAL_Delay(delay_ticks);
 8009046:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 800904a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	f000 fbc2 	bl	80097d8 <HAL_Delay>
			after_delay_ticks = HAL_GetTick();
 8009054:	f000 fbb4 	bl	80097c0 <HAL_GetTick>
 8009058:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 800905c:	f103 0360 	add.w	r3, r3, #96	; 0x60
 8009060:	6018      	str	r0, [r3, #0]
			speed_compensation += (double)delay - (int)(after_delay_ticks - delay_ticks);
 8009062:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8009066:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800906a:	6818      	ldr	r0, [r3, #0]
 800906c:	f7f7 fa5a 	bl	8000524 <__aeabi_i2d>
 8009070:	4604      	mov	r4, r0
 8009072:	460d      	mov	r5, r1
 8009074:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8009078:	f103 0360 	add.w	r3, r3, #96	; 0x60
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	f507 4376 	add.w	r3, r7, #62976	; 0xf600
 8009082:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	4618      	mov	r0, r3
 800908c:	f7f7 fa4a 	bl	8000524 <__aeabi_i2d>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4620      	mov	r0, r4
 8009096:	4629      	mov	r1, r5
 8009098:	f7f7 f8f6 	bl	8000288 <__aeabi_dsub>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	f507 4176 	add.w	r1, r7, #62976	; 0xf600
 80090a4:	f101 0180 	add.w	r1, r1, #128	; 0x80
 80090a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090ac:	f7f7 f8ee 	bl	800028c <__adddf3>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	f507 4176 	add.w	r1, r7, #62976	; 0xf600
 80090b8:	f101 0180 	add.w	r1, r1, #128	; 0x80
 80090bc:	e9c1 2300 	strd	r2, r3, [r1]
	{
 80090c0:	e6f3      	b.n	8008eaa <StartEmulator+0x122>
		}
	}
}
 80090c2:	f507 4776 	add.w	r7, r7, #62976	; 0xf600
 80090c6:	3788      	adds	r7, #136	; 0x88
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bdb0      	pop	{r4, r5, r7, pc}
 80090cc:	f3af 8000 	nop.w
 80090d0:	00000000 	.word	0x00000000
 80090d4:	4030be22 	.word	0x4030be22
 80090d8:	0800bad8 	.word	0x0800bad8
 80090dc:	08008779 	.word	0x08008779
 80090e0:	08008747 	.word	0x08008747
 80090e4:	0800871b 	.word	0x0800871b
 80090e8:	080086ef 	.word	0x080086ef
 80090ec:	0800baf0 	.word	0x0800baf0
 80090f0:	0800bb08 	.word	0x0800bb08
 80090f4:	0800bb28 	.word	0x0800bb28
 80090f8:	080087d1 	.word	0x080087d1
 80090fc:	40020800 	.word	0x40020800
 8009100:	2000008c 	.word	0x2000008c

08009104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009104:	b590      	push	{r4, r7, lr}
 8009106:	b0cd      	sub	sp, #308	; 0x134
 8009108:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800910a:	f000 faf3 	bl	80096f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800910e:	f000 f8dd 	bl	80092cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009112:	f000 f939 	bl	8009388 <MX_GPIO_Init>
#define LCD_D7		.port = GPIOA, .pin = GPIO_PIN_5

  struct ILI9341_t lcd;
  ILI9341_Init(
    &lcd,
    (struct ILI9341_Pin_t){LCD_D7},
 8009116:	4a5f      	ldr	r2, [pc, #380]	; (8009294 <main+0x190>)
 8009118:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800911c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009120:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_D6},
 8009124:	4a5c      	ldr	r2, [pc, #368]	; (8009298 <main+0x194>)
 8009126:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800912a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800912e:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_D5},
 8009132:	4a5a      	ldr	r2, [pc, #360]	; (800929c <main+0x198>)
 8009134:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800913c:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_D4},
 8009140:	4a57      	ldr	r2, [pc, #348]	; (80092a0 <main+0x19c>)
 8009142:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009146:	e892 0003 	ldmia.w	r2, {r0, r1}
 800914a:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_D3},
 800914e:	4a55      	ldr	r2, [pc, #340]	; (80092a4 <main+0x1a0>)
 8009150:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009158:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_D2},
 800915c:	4a52      	ldr	r2, [pc, #328]	; (80092a8 <main+0x1a4>)
 800915e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009166:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_D1},
 800916a:	4a50      	ldr	r2, [pc, #320]	; (80092ac <main+0x1a8>)
 800916c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009170:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009174:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_D0},
 8009178:	4a4d      	ldr	r2, [pc, #308]	; (80092b0 <main+0x1ac>)
 800917a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800917e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009182:	e883 0003 	stmia.w	r3, {r0, r1}

    (struct ILI9341_Pin_t){LCD_RESET},
 8009186:	4a4b      	ldr	r2, [pc, #300]	; (80092b4 <main+0x1b0>)
 8009188:	f107 0320 	add.w	r3, r7, #32
 800918c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009190:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_CS},
 8009194:	4a48      	ldr	r2, [pc, #288]	; (80092b8 <main+0x1b4>)
 8009196:	f107 0318 	add.w	r3, r7, #24
 800919a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800919e:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_RS},
 80091a2:	4a46      	ldr	r2, [pc, #280]	; (80092bc <main+0x1b8>)
 80091a4:	f107 0310 	add.w	r3, r7, #16
 80091a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091ac:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_WR},
 80091b0:	4a43      	ldr	r2, [pc, #268]	; (80092c0 <main+0x1bc>)
 80091b2:	f107 0308 	add.w	r3, r7, #8
 80091b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091ba:	e883 0003 	stmia.w	r3, {r0, r1}
    (struct ILI9341_Pin_t){LCD_RD}
 80091be:	4a41      	ldr	r2, [pc, #260]	; (80092c4 <main+0x1c0>)
 80091c0:	463b      	mov	r3, r7
 80091c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091c6:	e883 0003 	stmia.w	r3, {r0, r1}
  ILI9341_Init(
 80091ca:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80091ce:	aa15      	add	r2, sp, #84	; 0x54
 80091d0:	463b      	mov	r3, r7
 80091d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80091d6:	e882 0003 	stmia.w	r2, {r0, r1}
 80091da:	aa13      	add	r2, sp, #76	; 0x4c
 80091dc:	f107 0308 	add.w	r3, r7, #8
 80091e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80091e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80091e8:	aa11      	add	r2, sp, #68	; 0x44
 80091ea:	f107 0310 	add.w	r3, r7, #16
 80091ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80091f2:	e882 0003 	stmia.w	r2, {r0, r1}
 80091f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80091f8:	f107 0318 	add.w	r3, r7, #24
 80091fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009200:	e882 0003 	stmia.w	r2, {r0, r1}
 8009204:	aa0d      	add	r2, sp, #52	; 0x34
 8009206:	f107 0320 	add.w	r3, r7, #32
 800920a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800920e:	e882 0003 	stmia.w	r2, {r0, r1}
 8009212:	aa0b      	add	r2, sp, #44	; 0x2c
 8009214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009218:	e893 0003 	ldmia.w	r3, {r0, r1}
 800921c:	e882 0003 	stmia.w	r2, {r0, r1}
 8009220:	aa09      	add	r2, sp, #36	; 0x24
 8009222:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009226:	e893 0003 	ldmia.w	r3, {r0, r1}
 800922a:	e882 0003 	stmia.w	r2, {r0, r1}
 800922e:	aa07      	add	r2, sp, #28
 8009230:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009234:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009238:	e882 0003 	stmia.w	r2, {r0, r1}
 800923c:	aa05      	add	r2, sp, #20
 800923e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009242:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009246:	e882 0003 	stmia.w	r2, {r0, r1}
 800924a:	aa03      	add	r2, sp, #12
 800924c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009250:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009254:	e882 0003 	stmia.w	r2, {r0, r1}
 8009258:	aa01      	add	r2, sp, #4
 800925a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800925e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009262:	e882 0003 	stmia.w	r2, {r0, r1}
 8009266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800926c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009270:	ca06      	ldmia	r2, {r1, r2}
 8009272:	4620      	mov	r0, r4
 8009274:	f7f7 fcc1 	bl	8000bfa <ILI9341_Init>
  );
  ILI9341_SendInitializationSequence(&lcd);
 8009278:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800927c:	4618      	mov	r0, r3
 800927e:	f7f7 fda3 	bl	8000dc8 <ILI9341_SendInitializationSequence>
  StartEmulator(&lcd, TETRIS_GB_ROM_DATA, NULL);
 8009282:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009286:	2200      	movs	r2, #0
 8009288:	490f      	ldr	r1, [pc, #60]	; (80092c8 <main+0x1c4>)
 800928a:	4618      	mov	r0, r3
 800928c:	f7ff fd7c 	bl	8008d88 <StartEmulator>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009290:	e7fe      	b.n	8009290 <main+0x18c>
 8009292:	bf00      	nop
 8009294:	0800bb3c 	.word	0x0800bb3c
 8009298:	0800bb44 	.word	0x0800bb44
 800929c:	0800bb4c 	.word	0x0800bb4c
 80092a0:	0800bb54 	.word	0x0800bb54
 80092a4:	0800bb5c 	.word	0x0800bb5c
 80092a8:	0800bb64 	.word	0x0800bb64
 80092ac:	0800bb6c 	.word	0x0800bb6c
 80092b0:	0800bb74 	.word	0x0800bb74
 80092b4:	0800bb7c 	.word	0x0800bb7c
 80092b8:	0800bb84 	.word	0x0800bb84
 80092bc:	0800bb8c 	.word	0x0800bb8c
 80092c0:	0800bb94 	.word	0x0800bb94
 80092c4:	0800bb9c 	.word	0x0800bb9c
 80092c8:	0800bce4 	.word	0x0800bce4

080092cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b094      	sub	sp, #80	; 0x50
 80092d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80092d2:	f107 0320 	add.w	r3, r7, #32
 80092d6:	2230      	movs	r2, #48	; 0x30
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 f98a 	bl	800a5f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80092e0:	f107 030c 	add.w	r3, r7, #12
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	605a      	str	r2, [r3, #4]
 80092ea:	609a      	str	r2, [r3, #8]
 80092ec:	60da      	str	r2, [r3, #12]
 80092ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80092f0:	2300      	movs	r3, #0
 80092f2:	60bb      	str	r3, [r7, #8]
 80092f4:	4b22      	ldr	r3, [pc, #136]	; (8009380 <SystemClock_Config+0xb4>)
 80092f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f8:	4a21      	ldr	r2, [pc, #132]	; (8009380 <SystemClock_Config+0xb4>)
 80092fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092fe:	6413      	str	r3, [r2, #64]	; 0x40
 8009300:	4b1f      	ldr	r3, [pc, #124]	; (8009380 <SystemClock_Config+0xb4>)
 8009302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009308:	60bb      	str	r3, [r7, #8]
 800930a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800930c:	2300      	movs	r3, #0
 800930e:	607b      	str	r3, [r7, #4]
 8009310:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <SystemClock_Config+0xb8>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a1b      	ldr	r2, [pc, #108]	; (8009384 <SystemClock_Config+0xb8>)
 8009316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	4b19      	ldr	r3, [pc, #100]	; (8009384 <SystemClock_Config+0xb8>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009324:	607b      	str	r3, [r7, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8009328:	2302      	movs	r3, #2
 800932a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800932c:	2301      	movs	r3, #1
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009330:	2310      	movs	r3, #16
 8009332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009334:	2300      	movs	r3, #0
 8009336:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009338:	f107 0320 	add.w	r3, r7, #32
 800933c:	4618      	mov	r0, r3
 800933e:	f000 fd0d 	bl	8009d5c <HAL_RCC_OscConfig>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8009348:	f000 f89c 	bl	8009484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800934c:	230f      	movs	r3, #15
 800934e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8009350:	2300      	movs	r3, #0
 8009352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009358:	2300      	movs	r3, #0
 800935a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800935c:	2300      	movs	r3, #0
 800935e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009360:	f107 030c 	add.w	r3, r7, #12
 8009364:	2100      	movs	r1, #0
 8009366:	4618      	mov	r0, r3
 8009368:	f000 ff70 	bl	800a24c <HAL_RCC_ClockConfig>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8009372:	f000 f887 	bl	8009484 <Error_Handler>
  }
}
 8009376:	bf00      	nop
 8009378:	3750      	adds	r7, #80	; 0x50
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	40023800 	.word	0x40023800
 8009384:	40007000 	.word	0x40007000

08009388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800938e:	f107 030c 	add.w	r3, r7, #12
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	605a      	str	r2, [r3, #4]
 8009398:	609a      	str	r2, [r3, #8]
 800939a:	60da      	str	r2, [r3, #12]
 800939c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800939e:	2300      	movs	r3, #0
 80093a0:	60bb      	str	r3, [r7, #8]
 80093a2:	4b34      	ldr	r3, [pc, #208]	; (8009474 <MX_GPIO_Init+0xec>)
 80093a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a6:	4a33      	ldr	r2, [pc, #204]	; (8009474 <MX_GPIO_Init+0xec>)
 80093a8:	f043 0304 	orr.w	r3, r3, #4
 80093ac:	6313      	str	r3, [r2, #48]	; 0x30
 80093ae:	4b31      	ldr	r3, [pc, #196]	; (8009474 <MX_GPIO_Init+0xec>)
 80093b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b2:	f003 0304 	and.w	r3, r3, #4
 80093b6:	60bb      	str	r3, [r7, #8]
 80093b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ba:	2300      	movs	r3, #0
 80093bc:	607b      	str	r3, [r7, #4]
 80093be:	4b2d      	ldr	r3, [pc, #180]	; (8009474 <MX_GPIO_Init+0xec>)
 80093c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c2:	4a2c      	ldr	r2, [pc, #176]	; (8009474 <MX_GPIO_Init+0xec>)
 80093c4:	f043 0301 	orr.w	r3, r3, #1
 80093c8:	6313      	str	r3, [r2, #48]	; 0x30
 80093ca:	4b2a      	ldr	r3, [pc, #168]	; (8009474 <MX_GPIO_Init+0xec>)
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	607b      	str	r3, [r7, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80093d6:	2300      	movs	r3, #0
 80093d8:	603b      	str	r3, [r7, #0]
 80093da:	4b26      	ldr	r3, [pc, #152]	; (8009474 <MX_GPIO_Init+0xec>)
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	4a25      	ldr	r2, [pc, #148]	; (8009474 <MX_GPIO_Init+0xec>)
 80093e0:	f043 0302 	orr.w	r3, r3, #2
 80093e4:	6313      	str	r3, [r2, #48]	; 0x30
 80093e6:	4b23      	ldr	r3, [pc, #140]	; (8009474 <MX_GPIO_Init+0xec>)
 80093e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80093f2:	2200      	movs	r2, #0
 80093f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80093f8:	481f      	ldr	r0, [pc, #124]	; (8009478 <MX_GPIO_Init+0xf0>)
 80093fa:	f000 fc7b 	bl	8009cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80093fe:	2200      	movs	r2, #0
 8009400:	21ff      	movs	r1, #255	; 0xff
 8009402:	481e      	ldr	r0, [pc, #120]	; (800947c <MX_GPIO_Init+0xf4>)
 8009404:	f000 fc76 	bl	8009cf4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8009408:	2200      	movs	r2, #0
 800940a:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 800940e:	481c      	ldr	r0, [pc, #112]	; (8009480 <MX_GPIO_Init+0xf8>)
 8009410:	f000 fc70 	bl	8009cf4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800941a:	2301      	movs	r3, #1
 800941c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800941e:	2300      	movs	r3, #0
 8009420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009422:	2300      	movs	r3, #0
 8009424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009426:	f107 030c 	add.w	r3, r7, #12
 800942a:	4619      	mov	r1, r3
 800942c:	4812      	ldr	r0, [pc, #72]	; (8009478 <MX_GPIO_Init+0xf0>)
 800942e:	f000 fadd 	bl	80099ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009432:	23ff      	movs	r3, #255	; 0xff
 8009434:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009436:	2301      	movs	r3, #1
 8009438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800943a:	2300      	movs	r3, #0
 800943c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800943e:	2300      	movs	r3, #0
 8009440:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009442:	f107 030c 	add.w	r3, r7, #12
 8009446:	4619      	mov	r1, r3
 8009448:	480c      	ldr	r0, [pc, #48]	; (800947c <MX_GPIO_Init+0xf4>)
 800944a:	f000 facf 	bl	80099ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800944e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8009452:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009454:	2301      	movs	r3, #1
 8009456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009458:	2300      	movs	r3, #0
 800945a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800945c:	2300      	movs	r3, #0
 800945e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009460:	f107 030c 	add.w	r3, r7, #12
 8009464:	4619      	mov	r1, r3
 8009466:	4806      	ldr	r0, [pc, #24]	; (8009480 <MX_GPIO_Init+0xf8>)
 8009468:	f000 fac0 	bl	80099ec <HAL_GPIO_Init>

}
 800946c:	bf00      	nop
 800946e:	3720      	adds	r7, #32
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	40023800 	.word	0x40023800
 8009478:	40020800 	.word	0x40020800
 800947c:	40020000 	.word	0x40020000
 8009480:	40020400 	.word	0x40020400

08009484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009488:	b672      	cpsid	i
}
 800948a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800948c:	e7fe      	b.n	800948c <Error_Handler+0x8>
	...

08009490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009496:	2300      	movs	r3, #0
 8009498:	607b      	str	r3, [r7, #4]
 800949a:	4b10      	ldr	r3, [pc, #64]	; (80094dc <HAL_MspInit+0x4c>)
 800949c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800949e:	4a0f      	ldr	r2, [pc, #60]	; (80094dc <HAL_MspInit+0x4c>)
 80094a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094a4:	6453      	str	r3, [r2, #68]	; 0x44
 80094a6:	4b0d      	ldr	r3, [pc, #52]	; (80094dc <HAL_MspInit+0x4c>)
 80094a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094ae:	607b      	str	r3, [r7, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80094b2:	2300      	movs	r3, #0
 80094b4:	603b      	str	r3, [r7, #0]
 80094b6:	4b09      	ldr	r3, [pc, #36]	; (80094dc <HAL_MspInit+0x4c>)
 80094b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ba:	4a08      	ldr	r2, [pc, #32]	; (80094dc <HAL_MspInit+0x4c>)
 80094bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094c0:	6413      	str	r3, [r2, #64]	; 0x40
 80094c2:	4b06      	ldr	r3, [pc, #24]	; (80094dc <HAL_MspInit+0x4c>)
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094ca:	603b      	str	r3, [r7, #0]
 80094cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	40023800 	.word	0x40023800

080094e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80094e0:	b480      	push	{r7}
 80094e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80094e4:	e7fe      	b.n	80094e4 <NMI_Handler+0x4>

080094e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80094e6:	b480      	push	{r7}
 80094e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80094ea:	e7fe      	b.n	80094ea <HardFault_Handler+0x4>

080094ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80094ec:	b480      	push	{r7}
 80094ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80094f0:	e7fe      	b.n	80094f0 <MemManage_Handler+0x4>

080094f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80094f2:	b480      	push	{r7}
 80094f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80094f6:	e7fe      	b.n	80094f6 <BusFault_Handler+0x4>

080094f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80094fc:	e7fe      	b.n	80094fc <UsageFault_Handler+0x4>

080094fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80094fe:	b480      	push	{r7}
 8009500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009502:	bf00      	nop
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009510:	bf00      	nop
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800951a:	b480      	push	{r7}
 800951c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800951e:	bf00      	nop
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800952c:	f000 f934 	bl	8009798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009530:	bf00      	nop
 8009532:	bd80      	pop	{r7, pc}

08009534 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009540:	2300      	movs	r3, #0
 8009542:	617b      	str	r3, [r7, #20]
 8009544:	e00a      	b.n	800955c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009546:	f3af 8000 	nop.w
 800954a:	4601      	mov	r1, r0
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	1c5a      	adds	r2, r3, #1
 8009550:	60ba      	str	r2, [r7, #8]
 8009552:	b2ca      	uxtb	r2, r1
 8009554:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	3301      	adds	r3, #1
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	dbf0      	blt.n	8009546 <_read+0x12>
	}

return len;
 8009564:	687b      	ldr	r3, [r7, #4]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b086      	sub	sp, #24
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	e009      	b.n	8009594 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	60ba      	str	r2, [r7, #8]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	4618      	mov	r0, r3
 800958a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	3301      	adds	r3, #1
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	429a      	cmp	r2, r3
 800959a:	dbf1      	blt.n	8009580 <_write+0x12>
	}
	return len;
 800959c:	687b      	ldr	r3, [r7, #4]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <_close>:

int _close(int file)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b083      	sub	sp, #12
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
	return -1;
 80095ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80095ce:	605a      	str	r2, [r3, #4]
	return 0;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <_isatty>:

int _isatty(int file)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
	return 1;
 80095e6:	2301      	movs	r3, #1
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
	return 0;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
	...

08009610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009618:	4a14      	ldr	r2, [pc, #80]	; (800966c <_sbrk+0x5c>)
 800961a:	4b15      	ldr	r3, [pc, #84]	; (8009670 <_sbrk+0x60>)
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009624:	4b13      	ldr	r3, [pc, #76]	; (8009674 <_sbrk+0x64>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d102      	bne.n	8009632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800962c:	4b11      	ldr	r3, [pc, #68]	; (8009674 <_sbrk+0x64>)
 800962e:	4a12      	ldr	r2, [pc, #72]	; (8009678 <_sbrk+0x68>)
 8009630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009632:	4b10      	ldr	r3, [pc, #64]	; (8009674 <_sbrk+0x64>)
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4413      	add	r3, r2
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	429a      	cmp	r2, r3
 800963e:	d207      	bcs.n	8009650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009640:	f000 ffa0 	bl	800a584 <__errno>
 8009644:	4603      	mov	r3, r0
 8009646:	220c      	movs	r2, #12
 8009648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800964a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800964e:	e009      	b.n	8009664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009650:	4b08      	ldr	r3, [pc, #32]	; (8009674 <_sbrk+0x64>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009656:	4b07      	ldr	r3, [pc, #28]	; (8009674 <_sbrk+0x64>)
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4413      	add	r3, r2
 800965e:	4a05      	ldr	r2, [pc, #20]	; (8009674 <_sbrk+0x64>)
 8009660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009662:	68fb      	ldr	r3, [r7, #12]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3718      	adds	r7, #24
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20020000 	.word	0x20020000
 8009670:	00000400 	.word	0x00000400
 8009674:	20000090 	.word	0x20000090
 8009678:	200000b0 	.word	0x200000b0

0800967c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009680:	4b06      	ldr	r3, [pc, #24]	; (800969c <SystemInit+0x20>)
 8009682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009686:	4a05      	ldr	r2, [pc, #20]	; (800969c <SystemInit+0x20>)
 8009688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800968c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009690:	bf00      	nop
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	e000ed00 	.word	0xe000ed00

080096a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80096a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80096d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80096a4:	480d      	ldr	r0, [pc, #52]	; (80096dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80096a6:	490e      	ldr	r1, [pc, #56]	; (80096e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80096a8:	4a0e      	ldr	r2, [pc, #56]	; (80096e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80096aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80096ac:	e002      	b.n	80096b4 <LoopCopyDataInit>

080096ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80096ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80096b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80096b2:	3304      	adds	r3, #4

080096b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80096b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80096b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80096b8:	d3f9      	bcc.n	80096ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80096ba:	4a0b      	ldr	r2, [pc, #44]	; (80096e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80096bc:	4c0b      	ldr	r4, [pc, #44]	; (80096ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80096be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80096c0:	e001      	b.n	80096c6 <LoopFillZerobss>

080096c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80096c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80096c4:	3204      	adds	r2, #4

080096c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80096c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80096c8:	d3fb      	bcc.n	80096c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80096ca:	f7ff ffd7 	bl	800967c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80096ce:	f000 ff5f 	bl	800a590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80096d2:	f7ff fd17 	bl	8009104 <main>
  bx  lr    
 80096d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80096d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80096dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80096e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80096e4:	08013d9c 	.word	0x08013d9c
  ldr r2, =_sbss
 80096e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80096ec:	200000b0 	.word	0x200000b0

080096f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80096f0:	e7fe      	b.n	80096f0 <ADC_IRQHandler>
	...

080096f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80096f8:	4b0e      	ldr	r3, [pc, #56]	; (8009734 <HAL_Init+0x40>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a0d      	ldr	r2, [pc, #52]	; (8009734 <HAL_Init+0x40>)
 80096fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009704:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <HAL_Init+0x40>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a0a      	ldr	r2, [pc, #40]	; (8009734 <HAL_Init+0x40>)
 800970a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800970e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009710:	4b08      	ldr	r3, [pc, #32]	; (8009734 <HAL_Init+0x40>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a07      	ldr	r2, [pc, #28]	; (8009734 <HAL_Init+0x40>)
 8009716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800971a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800971c:	2003      	movs	r0, #3
 800971e:	f000 f931 	bl	8009984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009722:	200f      	movs	r0, #15
 8009724:	f000 f808 	bl	8009738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009728:	f7ff feb2 	bl	8009490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	40023c00 	.word	0x40023c00

08009738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009740:	4b12      	ldr	r3, [pc, #72]	; (800978c <HAL_InitTick+0x54>)
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	4b12      	ldr	r3, [pc, #72]	; (8009790 <HAL_InitTick+0x58>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	4619      	mov	r1, r3
 800974a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800974e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009752:	fbb2 f3f3 	udiv	r3, r2, r3
 8009756:	4618      	mov	r0, r3
 8009758:	f000 f93b 	bl	80099d2 <HAL_SYSTICK_Config>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e00e      	b.n	8009784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b0f      	cmp	r3, #15
 800976a:	d80a      	bhi.n	8009782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800976c:	2200      	movs	r2, #0
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009774:	f000 f911 	bl	800999a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009778:	4a06      	ldr	r2, [pc, #24]	; (8009794 <HAL_InitTick+0x5c>)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	e000      	b.n	8009784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20000000 	.word	0x20000000
 8009790:	20000008 	.word	0x20000008
 8009794:	20000004 	.word	0x20000004

08009798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009798:	b480      	push	{r7}
 800979a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800979c:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <HAL_IncTick+0x20>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	4b06      	ldr	r3, [pc, #24]	; (80097bc <HAL_IncTick+0x24>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4413      	add	r3, r2
 80097a8:	4a04      	ldr	r2, [pc, #16]	; (80097bc <HAL_IncTick+0x24>)
 80097aa:	6013      	str	r3, [r2, #0]
}
 80097ac:	bf00      	nop
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	20000008 	.word	0x20000008
 80097bc:	2000009c 	.word	0x2000009c

080097c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
  return uwTick;
 80097c4:	4b03      	ldr	r3, [pc, #12]	; (80097d4 <HAL_GetTick+0x14>)
 80097c6:	681b      	ldr	r3, [r3, #0]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	2000009c 	.word	0x2000009c

080097d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80097e0:	f7ff ffee 	bl	80097c0 <HAL_GetTick>
 80097e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f0:	d005      	beq.n	80097fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80097f2:	4b0a      	ldr	r3, [pc, #40]	; (800981c <HAL_Delay+0x44>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	461a      	mov	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4413      	add	r3, r2
 80097fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80097fe:	bf00      	nop
 8009800:	f7ff ffde 	bl	80097c0 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	429a      	cmp	r2, r3
 800980e:	d8f7      	bhi.n	8009800 <HAL_Delay+0x28>
  {
  }
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	20000008 	.word	0x20000008

08009820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f003 0307 	and.w	r3, r3, #7
 800982e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009830:	4b0c      	ldr	r3, [pc, #48]	; (8009864 <__NVIC_SetPriorityGrouping+0x44>)
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800983c:	4013      	ands	r3, r2
 800983e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800984c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009852:	4a04      	ldr	r2, [pc, #16]	; (8009864 <__NVIC_SetPriorityGrouping+0x44>)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	60d3      	str	r3, [r2, #12]
}
 8009858:	bf00      	nop
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	e000ed00 	.word	0xe000ed00

08009868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800986c:	4b04      	ldr	r3, [pc, #16]	; (8009880 <__NVIC_GetPriorityGrouping+0x18>)
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	f003 0307 	and.w	r3, r3, #7
}
 8009876:	4618      	mov	r0, r3
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	e000ed00 	.word	0xe000ed00

08009884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	4603      	mov	r3, r0
 800988c:	6039      	str	r1, [r7, #0]
 800988e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009894:	2b00      	cmp	r3, #0
 8009896:	db0a      	blt.n	80098ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	b2da      	uxtb	r2, r3
 800989c:	490c      	ldr	r1, [pc, #48]	; (80098d0 <__NVIC_SetPriority+0x4c>)
 800989e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098a2:	0112      	lsls	r2, r2, #4
 80098a4:	b2d2      	uxtb	r2, r2
 80098a6:	440b      	add	r3, r1
 80098a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80098ac:	e00a      	b.n	80098c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	4908      	ldr	r1, [pc, #32]	; (80098d4 <__NVIC_SetPriority+0x50>)
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	f003 030f 	and.w	r3, r3, #15
 80098ba:	3b04      	subs	r3, #4
 80098bc:	0112      	lsls	r2, r2, #4
 80098be:	b2d2      	uxtb	r2, r2
 80098c0:	440b      	add	r3, r1
 80098c2:	761a      	strb	r2, [r3, #24]
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	e000e100 	.word	0xe000e100
 80098d4:	e000ed00 	.word	0xe000ed00

080098d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80098d8:	b480      	push	{r7}
 80098da:	b089      	sub	sp, #36	; 0x24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f003 0307 	and.w	r3, r3, #7
 80098ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f1c3 0307 	rsb	r3, r3, #7
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	bf28      	it	cs
 80098f6:	2304      	movcs	r3, #4
 80098f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	3304      	adds	r3, #4
 80098fe:	2b06      	cmp	r3, #6
 8009900:	d902      	bls.n	8009908 <NVIC_EncodePriority+0x30>
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	3b03      	subs	r3, #3
 8009906:	e000      	b.n	800990a <NVIC_EncodePriority+0x32>
 8009908:	2300      	movs	r3, #0
 800990a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800990c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	fa02 f303 	lsl.w	r3, r2, r3
 8009916:	43da      	mvns	r2, r3
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	401a      	ands	r2, r3
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009920:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	fa01 f303 	lsl.w	r3, r1, r3
 800992a:	43d9      	mvns	r1, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009930:	4313      	orrs	r3, r2
         );
}
 8009932:	4618      	mov	r0, r3
 8009934:	3724      	adds	r7, #36	; 0x24
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
	...

08009940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3b01      	subs	r3, #1
 800994c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009950:	d301      	bcc.n	8009956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009952:	2301      	movs	r3, #1
 8009954:	e00f      	b.n	8009976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009956:	4a0a      	ldr	r2, [pc, #40]	; (8009980 <SysTick_Config+0x40>)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3b01      	subs	r3, #1
 800995c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800995e:	210f      	movs	r1, #15
 8009960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009964:	f7ff ff8e 	bl	8009884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <SysTick_Config+0x40>)
 800996a:	2200      	movs	r2, #0
 800996c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800996e:	4b04      	ldr	r3, [pc, #16]	; (8009980 <SysTick_Config+0x40>)
 8009970:	2207      	movs	r2, #7
 8009972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	e000e010 	.word	0xe000e010

08009984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff ff47 	bl	8009820 <__NVIC_SetPriorityGrouping>
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800999a:	b580      	push	{r7, lr}
 800999c:	b086      	sub	sp, #24
 800999e:	af00      	add	r7, sp, #0
 80099a0:	4603      	mov	r3, r0
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
 80099a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80099ac:	f7ff ff5c 	bl	8009868 <__NVIC_GetPriorityGrouping>
 80099b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	6978      	ldr	r0, [r7, #20]
 80099b8:	f7ff ff8e 	bl	80098d8 <NVIC_EncodePriority>
 80099bc:	4602      	mov	r2, r0
 80099be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099c2:	4611      	mov	r1, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff ff5d 	bl	8009884 <__NVIC_SetPriority>
}
 80099ca:	bf00      	nop
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7ff ffb0 	bl	8009940 <SysTick_Config>
 80099e0:	4603      	mov	r3, r0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b089      	sub	sp, #36	; 0x24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80099f6:	2300      	movs	r3, #0
 80099f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009a02:	2300      	movs	r3, #0
 8009a04:	61fb      	str	r3, [r7, #28]
 8009a06:	e159      	b.n	8009cbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009a08:	2201      	movs	r2, #1
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009a1c:	693a      	ldr	r2, [r7, #16]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	f040 8148 	bne.w	8009cb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f003 0303 	and.w	r3, r3, #3
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d005      	beq.n	8009a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d130      	bne.n	8009aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	2203      	movs	r2, #3
 8009a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a4e:	43db      	mvns	r3, r3
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	4013      	ands	r3, r2
 8009a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	68da      	ldr	r2, [r3, #12]
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	69ba      	ldr	r2, [r7, #24]
 8009a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a74:	2201      	movs	r2, #1
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7c:	43db      	mvns	r3, r3
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	4013      	ands	r3, r2
 8009a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	091b      	lsrs	r3, r3, #4
 8009a8a:	f003 0201 	and.w	r2, r3, #1
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	fa02 f303 	lsl.w	r3, r2, r3
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f003 0303 	and.w	r3, r3, #3
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d017      	beq.n	8009adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	2203      	movs	r2, #3
 8009ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8009abc:	43db      	mvns	r3, r3
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	689a      	ldr	r2, [r3, #8]
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad0:	69ba      	ldr	r2, [r7, #24]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	f003 0303 	and.w	r3, r3, #3
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d123      	bne.n	8009b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	08da      	lsrs	r2, r3, #3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3208      	adds	r2, #8
 8009af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	220f      	movs	r2, #15
 8009b00:	fa02 f303 	lsl.w	r3, r2, r3
 8009b04:	43db      	mvns	r3, r3
 8009b06:	69ba      	ldr	r2, [r7, #24]
 8009b08:	4013      	ands	r3, r2
 8009b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	691a      	ldr	r2, [r3, #16]
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	f003 0307 	and.w	r3, r3, #7
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	fa02 f303 	lsl.w	r3, r2, r3
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	08da      	lsrs	r2, r3, #3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	3208      	adds	r2, #8
 8009b2a:	69b9      	ldr	r1, [r7, #24]
 8009b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	2203      	movs	r2, #3
 8009b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b40:	43db      	mvns	r3, r3
 8009b42:	69ba      	ldr	r2, [r7, #24]
 8009b44:	4013      	ands	r3, r2
 8009b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	f003 0203 	and.w	r2, r3, #3
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	fa02 f303 	lsl.w	r3, r2, r3
 8009b58:	69ba      	ldr	r2, [r7, #24]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80a2 	beq.w	8009cb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
 8009b76:	4b57      	ldr	r3, [pc, #348]	; (8009cd4 <HAL_GPIO_Init+0x2e8>)
 8009b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b7a:	4a56      	ldr	r2, [pc, #344]	; (8009cd4 <HAL_GPIO_Init+0x2e8>)
 8009b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b80:	6453      	str	r3, [r2, #68]	; 0x44
 8009b82:	4b54      	ldr	r3, [pc, #336]	; (8009cd4 <HAL_GPIO_Init+0x2e8>)
 8009b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b8e:	4a52      	ldr	r2, [pc, #328]	; (8009cd8 <HAL_GPIO_Init+0x2ec>)
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	089b      	lsrs	r3, r3, #2
 8009b94:	3302      	adds	r3, #2
 8009b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	f003 0303 	and.w	r3, r3, #3
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	220f      	movs	r2, #15
 8009ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8009baa:	43db      	mvns	r3, r3
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a49      	ldr	r2, [pc, #292]	; (8009cdc <HAL_GPIO_Init+0x2f0>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d019      	beq.n	8009bee <HAL_GPIO_Init+0x202>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a48      	ldr	r2, [pc, #288]	; (8009ce0 <HAL_GPIO_Init+0x2f4>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d013      	beq.n	8009bea <HAL_GPIO_Init+0x1fe>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a47      	ldr	r2, [pc, #284]	; (8009ce4 <HAL_GPIO_Init+0x2f8>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d00d      	beq.n	8009be6 <HAL_GPIO_Init+0x1fa>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a46      	ldr	r2, [pc, #280]	; (8009ce8 <HAL_GPIO_Init+0x2fc>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d007      	beq.n	8009be2 <HAL_GPIO_Init+0x1f6>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a45      	ldr	r2, [pc, #276]	; (8009cec <HAL_GPIO_Init+0x300>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d101      	bne.n	8009bde <HAL_GPIO_Init+0x1f2>
 8009bda:	2304      	movs	r3, #4
 8009bdc:	e008      	b.n	8009bf0 <HAL_GPIO_Init+0x204>
 8009bde:	2307      	movs	r3, #7
 8009be0:	e006      	b.n	8009bf0 <HAL_GPIO_Init+0x204>
 8009be2:	2303      	movs	r3, #3
 8009be4:	e004      	b.n	8009bf0 <HAL_GPIO_Init+0x204>
 8009be6:	2302      	movs	r3, #2
 8009be8:	e002      	b.n	8009bf0 <HAL_GPIO_Init+0x204>
 8009bea:	2301      	movs	r3, #1
 8009bec:	e000      	b.n	8009bf0 <HAL_GPIO_Init+0x204>
 8009bee:	2300      	movs	r3, #0
 8009bf0:	69fa      	ldr	r2, [r7, #28]
 8009bf2:	f002 0203 	and.w	r2, r2, #3
 8009bf6:	0092      	lsls	r2, r2, #2
 8009bf8:	4093      	lsls	r3, r2
 8009bfa:	69ba      	ldr	r2, [r7, #24]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c00:	4935      	ldr	r1, [pc, #212]	; (8009cd8 <HAL_GPIO_Init+0x2ec>)
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	089b      	lsrs	r3, r3, #2
 8009c06:	3302      	adds	r3, #2
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c0e:	4b38      	ldr	r3, [pc, #224]	; (8009cf0 <HAL_GPIO_Init+0x304>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	43db      	mvns	r3, r3
 8009c18:	69ba      	ldr	r2, [r7, #24]
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8009c2a:	69ba      	ldr	r2, [r7, #24]
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009c32:	4a2f      	ldr	r2, [pc, #188]	; (8009cf0 <HAL_GPIO_Init+0x304>)
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009c38:	4b2d      	ldr	r3, [pc, #180]	; (8009cf0 <HAL_GPIO_Init+0x304>)
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	43db      	mvns	r3, r3
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	4013      	ands	r3, r2
 8009c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009c5c:	4a24      	ldr	r2, [pc, #144]	; (8009cf0 <HAL_GPIO_Init+0x304>)
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009c62:	4b23      	ldr	r3, [pc, #140]	; (8009cf0 <HAL_GPIO_Init+0x304>)
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	43db      	mvns	r3, r3
 8009c6c:	69ba      	ldr	r2, [r7, #24]
 8009c6e:	4013      	ands	r3, r2
 8009c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d003      	beq.n	8009c86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009c86:	4a1a      	ldr	r2, [pc, #104]	; (8009cf0 <HAL_GPIO_Init+0x304>)
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009c8c:	4b18      	ldr	r3, [pc, #96]	; (8009cf0 <HAL_GPIO_Init+0x304>)
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	43db      	mvns	r3, r3
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	4013      	ands	r3, r2
 8009c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8009ca8:	69ba      	ldr	r2, [r7, #24]
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009cb0:	4a0f      	ldr	r2, [pc, #60]	; (8009cf0 <HAL_GPIO_Init+0x304>)
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	61fb      	str	r3, [r7, #28]
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	2b0f      	cmp	r3, #15
 8009cc0:	f67f aea2 	bls.w	8009a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	3724      	adds	r7, #36	; 0x24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	40023800 	.word	0x40023800
 8009cd8:	40013800 	.word	0x40013800
 8009cdc:	40020000 	.word	0x40020000
 8009ce0:	40020400 	.word	0x40020400
 8009ce4:	40020800 	.word	0x40020800
 8009ce8:	40020c00 	.word	0x40020c00
 8009cec:	40021000 	.word	0x40021000
 8009cf0:	40013c00 	.word	0x40013c00

08009cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	807b      	strh	r3, [r7, #2]
 8009d00:	4613      	mov	r3, r2
 8009d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009d04:	787b      	ldrb	r3, [r7, #1]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009d0a:	887a      	ldrh	r2, [r7, #2]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009d10:	e003      	b.n	8009d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009d12:	887b      	ldrh	r3, [r7, #2]
 8009d14:	041a      	lsls	r2, r3, #16
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	619a      	str	r2, [r3, #24]
}
 8009d1a:	bf00      	nop
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b085      	sub	sp, #20
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	460b      	mov	r3, r1
 8009d30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009d38:	887a      	ldrh	r2, [r7, #2]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	041a      	lsls	r2, r3, #16
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	43d9      	mvns	r1, r3
 8009d44:	887b      	ldrh	r3, [r7, #2]
 8009d46:	400b      	ands	r3, r1
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	619a      	str	r2, [r3, #24]
}
 8009d4e:	bf00      	nop
 8009d50:	3714      	adds	r7, #20
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
	...

08009d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e264      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d075      	beq.n	8009e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009d7a:	4ba3      	ldr	r3, [pc, #652]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f003 030c 	and.w	r3, r3, #12
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d00c      	beq.n	8009da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d86:	4ba0      	ldr	r3, [pc, #640]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009d8e:	2b08      	cmp	r3, #8
 8009d90:	d112      	bne.n	8009db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d92:	4b9d      	ldr	r3, [pc, #628]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d9e:	d10b      	bne.n	8009db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009da0:	4b99      	ldr	r3, [pc, #612]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d05b      	beq.n	8009e64 <HAL_RCC_OscConfig+0x108>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d157      	bne.n	8009e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e23f      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc0:	d106      	bne.n	8009dd0 <HAL_RCC_OscConfig+0x74>
 8009dc2:	4b91      	ldr	r3, [pc, #580]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a90      	ldr	r2, [pc, #576]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	e01d      	b.n	8009e0c <HAL_RCC_OscConfig+0xb0>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009dd8:	d10c      	bne.n	8009df4 <HAL_RCC_OscConfig+0x98>
 8009dda:	4b8b      	ldr	r3, [pc, #556]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a8a      	ldr	r2, [pc, #552]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	4b88      	ldr	r3, [pc, #544]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a87      	ldr	r2, [pc, #540]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	e00b      	b.n	8009e0c <HAL_RCC_OscConfig+0xb0>
 8009df4:	4b84      	ldr	r3, [pc, #528]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a83      	ldr	r2, [pc, #524]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dfe:	6013      	str	r3, [r2, #0]
 8009e00:	4b81      	ldr	r3, [pc, #516]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a80      	ldr	r2, [pc, #512]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d013      	beq.n	8009e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e14:	f7ff fcd4 	bl	80097c0 <HAL_GetTick>
 8009e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e1a:	e008      	b.n	8009e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e1c:	f7ff fcd0 	bl	80097c0 <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	2b64      	cmp	r3, #100	; 0x64
 8009e28:	d901      	bls.n	8009e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e204      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e2e:	4b76      	ldr	r3, [pc, #472]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d0f0      	beq.n	8009e1c <HAL_RCC_OscConfig+0xc0>
 8009e3a:	e014      	b.n	8009e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e3c:	f7ff fcc0 	bl	80097c0 <HAL_GetTick>
 8009e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e42:	e008      	b.n	8009e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e44:	f7ff fcbc 	bl	80097c0 <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	2b64      	cmp	r3, #100	; 0x64
 8009e50:	d901      	bls.n	8009e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e52:	2303      	movs	r3, #3
 8009e54:	e1f0      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e56:	4b6c      	ldr	r3, [pc, #432]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1f0      	bne.n	8009e44 <HAL_RCC_OscConfig+0xe8>
 8009e62:	e000      	b.n	8009e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0302 	and.w	r3, r3, #2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d063      	beq.n	8009f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009e72:	4b65      	ldr	r3, [pc, #404]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f003 030c 	and.w	r3, r3, #12
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00b      	beq.n	8009e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e7e:	4b62      	ldr	r3, [pc, #392]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009e86:	2b08      	cmp	r3, #8
 8009e88:	d11c      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e8a:	4b5f      	ldr	r3, [pc, #380]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d116      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e96:	4b5c      	ldr	r3, [pc, #368]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 0302 	and.w	r3, r3, #2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <HAL_RCC_OscConfig+0x152>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d001      	beq.n	8009eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e1c4      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eae:	4b56      	ldr	r3, [pc, #344]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	00db      	lsls	r3, r3, #3
 8009ebc:	4952      	ldr	r1, [pc, #328]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ec2:	e03a      	b.n	8009f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d020      	beq.n	8009f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ecc:	4b4f      	ldr	r3, [pc, #316]	; (800a00c <HAL_RCC_OscConfig+0x2b0>)
 8009ece:	2201      	movs	r2, #1
 8009ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed2:	f7ff fc75 	bl	80097c0 <HAL_GetTick>
 8009ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ed8:	e008      	b.n	8009eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009eda:	f7ff fc71 	bl	80097c0 <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d901      	bls.n	8009eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e1a5      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009eec:	4b46      	ldr	r3, [pc, #280]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0302 	and.w	r3, r3, #2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0f0      	beq.n	8009eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ef8:	4b43      	ldr	r3, [pc, #268]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	4940      	ldr	r1, [pc, #256]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	600b      	str	r3, [r1, #0]
 8009f0c:	e015      	b.n	8009f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f0e:	4b3f      	ldr	r3, [pc, #252]	; (800a00c <HAL_RCC_OscConfig+0x2b0>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f14:	f7ff fc54 	bl	80097c0 <HAL_GetTick>
 8009f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f1a:	e008      	b.n	8009f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f1c:	f7ff fc50 	bl	80097c0 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d901      	bls.n	8009f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e184      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f2e:	4b36      	ldr	r3, [pc, #216]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1f0      	bne.n	8009f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0308 	and.w	r3, r3, #8
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d030      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d016      	beq.n	8009f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f4e:	4b30      	ldr	r3, [pc, #192]	; (800a010 <HAL_RCC_OscConfig+0x2b4>)
 8009f50:	2201      	movs	r2, #1
 8009f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f54:	f7ff fc34 	bl	80097c0 <HAL_GetTick>
 8009f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f5a:	e008      	b.n	8009f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f5c:	f7ff fc30 	bl	80097c0 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d901      	bls.n	8009f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e164      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f6e:	4b26      	ldr	r3, [pc, #152]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f72:	f003 0302 	and.w	r3, r3, #2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0f0      	beq.n	8009f5c <HAL_RCC_OscConfig+0x200>
 8009f7a:	e015      	b.n	8009fa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f7c:	4b24      	ldr	r3, [pc, #144]	; (800a010 <HAL_RCC_OscConfig+0x2b4>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f82:	f7ff fc1d 	bl	80097c0 <HAL_GetTick>
 8009f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f88:	e008      	b.n	8009f9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f8a:	f7ff fc19 	bl	80097c0 <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d901      	bls.n	8009f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e14d      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1f0      	bne.n	8009f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 80a0 	beq.w	800a0f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fba:	4b13      	ldr	r3, [pc, #76]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10f      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fce:	4a0e      	ldr	r2, [pc, #56]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8009fd6:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fde:	60bb      	str	r3, [r7, #8]
 8009fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fe6:	4b0b      	ldr	r3, [pc, #44]	; (800a014 <HAL_RCC_OscConfig+0x2b8>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d121      	bne.n	800a036 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ff2:	4b08      	ldr	r3, [pc, #32]	; (800a014 <HAL_RCC_OscConfig+0x2b8>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a07      	ldr	r2, [pc, #28]	; (800a014 <HAL_RCC_OscConfig+0x2b8>)
 8009ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ffe:	f7ff fbdf 	bl	80097c0 <HAL_GetTick>
 800a002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a004:	e011      	b.n	800a02a <HAL_RCC_OscConfig+0x2ce>
 800a006:	bf00      	nop
 800a008:	40023800 	.word	0x40023800
 800a00c:	42470000 	.word	0x42470000
 800a010:	42470e80 	.word	0x42470e80
 800a014:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a018:	f7ff fbd2 	bl	80097c0 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e106      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a02a:	4b85      	ldr	r3, [pc, #532]	; (800a240 <HAL_RCC_OscConfig+0x4e4>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f0      	beq.n	800a018 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d106      	bne.n	800a04c <HAL_RCC_OscConfig+0x2f0>
 800a03e:	4b81      	ldr	r3, [pc, #516]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a042:	4a80      	ldr	r2, [pc, #512]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a044:	f043 0301 	orr.w	r3, r3, #1
 800a048:	6713      	str	r3, [r2, #112]	; 0x70
 800a04a:	e01c      	b.n	800a086 <HAL_RCC_OscConfig+0x32a>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	2b05      	cmp	r3, #5
 800a052:	d10c      	bne.n	800a06e <HAL_RCC_OscConfig+0x312>
 800a054:	4b7b      	ldr	r3, [pc, #492]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a058:	4a7a      	ldr	r2, [pc, #488]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a05a:	f043 0304 	orr.w	r3, r3, #4
 800a05e:	6713      	str	r3, [r2, #112]	; 0x70
 800a060:	4b78      	ldr	r3, [pc, #480]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a064:	4a77      	ldr	r2, [pc, #476]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a066:	f043 0301 	orr.w	r3, r3, #1
 800a06a:	6713      	str	r3, [r2, #112]	; 0x70
 800a06c:	e00b      	b.n	800a086 <HAL_RCC_OscConfig+0x32a>
 800a06e:	4b75      	ldr	r3, [pc, #468]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a072:	4a74      	ldr	r2, [pc, #464]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a074:	f023 0301 	bic.w	r3, r3, #1
 800a078:	6713      	str	r3, [r2, #112]	; 0x70
 800a07a:	4b72      	ldr	r3, [pc, #456]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07e:	4a71      	ldr	r2, [pc, #452]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a080:	f023 0304 	bic.w	r3, r3, #4
 800a084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d015      	beq.n	800a0ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a08e:	f7ff fb97 	bl	80097c0 <HAL_GetTick>
 800a092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a094:	e00a      	b.n	800a0ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a096:	f7ff fb93 	bl	80097c0 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d901      	bls.n	800a0ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e0c5      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0ac:	4b65      	ldr	r3, [pc, #404]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b0:	f003 0302 	and.w	r3, r3, #2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d0ee      	beq.n	800a096 <HAL_RCC_OscConfig+0x33a>
 800a0b8:	e014      	b.n	800a0e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0ba:	f7ff fb81 	bl	80097c0 <HAL_GetTick>
 800a0be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0c0:	e00a      	b.n	800a0d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0c2:	f7ff fb7d 	bl	80097c0 <HAL_GetTick>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d901      	bls.n	800a0d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e0af      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0d8:	4b5a      	ldr	r3, [pc, #360]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1ee      	bne.n	800a0c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d105      	bne.n	800a0f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0ea:	4b56      	ldr	r3, [pc, #344]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	4a55      	ldr	r2, [pc, #340]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a0f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 809b 	beq.w	800a236 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a100:	4b50      	ldr	r3, [pc, #320]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f003 030c 	and.w	r3, r3, #12
 800a108:	2b08      	cmp	r3, #8
 800a10a:	d05c      	beq.n	800a1c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	2b02      	cmp	r3, #2
 800a112:	d141      	bne.n	800a198 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a114:	4b4c      	ldr	r3, [pc, #304]	; (800a248 <HAL_RCC_OscConfig+0x4ec>)
 800a116:	2200      	movs	r2, #0
 800a118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a11a:	f7ff fb51 	bl	80097c0 <HAL_GetTick>
 800a11e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a120:	e008      	b.n	800a134 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a122:	f7ff fb4d 	bl	80097c0 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d901      	bls.n	800a134 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e081      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a134:	4b43      	ldr	r3, [pc, #268]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1f0      	bne.n	800a122 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	69da      	ldr	r2, [r3, #28]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a1b      	ldr	r3, [r3, #32]
 800a148:	431a      	orrs	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	019b      	lsls	r3, r3, #6
 800a150:	431a      	orrs	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	085b      	lsrs	r3, r3, #1
 800a158:	3b01      	subs	r3, #1
 800a15a:	041b      	lsls	r3, r3, #16
 800a15c:	431a      	orrs	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a162:	061b      	lsls	r3, r3, #24
 800a164:	4937      	ldr	r1, [pc, #220]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a166:	4313      	orrs	r3, r2
 800a168:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a16a:	4b37      	ldr	r3, [pc, #220]	; (800a248 <HAL_RCC_OscConfig+0x4ec>)
 800a16c:	2201      	movs	r2, #1
 800a16e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a170:	f7ff fb26 	bl	80097c0 <HAL_GetTick>
 800a174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a176:	e008      	b.n	800a18a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a178:	f7ff fb22 	bl	80097c0 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b02      	cmp	r3, #2
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e056      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a18a:	4b2e      	ldr	r3, [pc, #184]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0f0      	beq.n	800a178 <HAL_RCC_OscConfig+0x41c>
 800a196:	e04e      	b.n	800a236 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a198:	4b2b      	ldr	r3, [pc, #172]	; (800a248 <HAL_RCC_OscConfig+0x4ec>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a19e:	f7ff fb0f 	bl	80097c0 <HAL_GetTick>
 800a1a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1a4:	e008      	b.n	800a1b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1a6:	f7ff fb0b 	bl	80097c0 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d901      	bls.n	800a1b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e03f      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1b8:	4b22      	ldr	r3, [pc, #136]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1f0      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x44a>
 800a1c4:	e037      	b.n	800a236 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d101      	bne.n	800a1d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e032      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a1d2:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d028      	beq.n	800a232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d121      	bne.n	800a232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d11a      	bne.n	800a232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a202:	4013      	ands	r3, r2
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a208:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d111      	bne.n	800a232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	085b      	lsrs	r3, r3, #1
 800a21a:	3b01      	subs	r3, #1
 800a21c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a21e:	429a      	cmp	r2, r3
 800a220:	d107      	bne.n	800a232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a22e:	429a      	cmp	r2, r3
 800a230:	d001      	beq.n	800a236 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	40007000 	.word	0x40007000
 800a244:	40023800 	.word	0x40023800
 800a248:	42470060 	.word	0x42470060

0800a24c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e0cc      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a260:	4b68      	ldr	r3, [pc, #416]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0307 	and.w	r3, r3, #7
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d90c      	bls.n	800a288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a26e:	4b65      	ldr	r3, [pc, #404]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	b2d2      	uxtb	r2, r2
 800a274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a276:	4b63      	ldr	r3, [pc, #396]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d001      	beq.n	800a288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e0b8      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b00      	cmp	r3, #0
 800a292:	d020      	beq.n	800a2d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d005      	beq.n	800a2ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2a0:	4b59      	ldr	r3, [pc, #356]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	4a58      	ldr	r2, [pc, #352]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a2aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0308 	and.w	r3, r3, #8
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d005      	beq.n	800a2c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a2b8:	4b53      	ldr	r3, [pc, #332]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	4a52      	ldr	r2, [pc, #328]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a2c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2c4:	4b50      	ldr	r3, [pc, #320]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	494d      	ldr	r1, [pc, #308]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d044      	beq.n	800a36c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d107      	bne.n	800a2fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2ea:	4b47      	ldr	r3, [pc, #284]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d119      	bne.n	800a32a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e07f      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d003      	beq.n	800a30a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a306:	2b03      	cmp	r3, #3
 800a308:	d107      	bne.n	800a31a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a30a:	4b3f      	ldr	r3, [pc, #252]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d109      	bne.n	800a32a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e06f      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a31a:	4b3b      	ldr	r3, [pc, #236]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0302 	and.w	r3, r3, #2
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e067      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a32a:	4b37      	ldr	r3, [pc, #220]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f023 0203 	bic.w	r2, r3, #3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	4934      	ldr	r1, [pc, #208]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a33c:	f7ff fa40 	bl	80097c0 <HAL_GetTick>
 800a340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a342:	e00a      	b.n	800a35a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a344:	f7ff fa3c 	bl	80097c0 <HAL_GetTick>
 800a348:	4602      	mov	r2, r0
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a352:	4293      	cmp	r3, r2
 800a354:	d901      	bls.n	800a35a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e04f      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a35a:	4b2b      	ldr	r3, [pc, #172]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f003 020c 	and.w	r2, r3, #12
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	429a      	cmp	r2, r3
 800a36a:	d1eb      	bne.n	800a344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a36c:	4b25      	ldr	r3, [pc, #148]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0307 	and.w	r3, r3, #7
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d20c      	bcs.n	800a394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a37a:	4b22      	ldr	r3, [pc, #136]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	b2d2      	uxtb	r2, r2
 800a380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a382:	4b20      	ldr	r3, [pc, #128]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d001      	beq.n	800a394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e032      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d008      	beq.n	800a3b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3a0:	4b19      	ldr	r3, [pc, #100]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	4916      	ldr	r1, [pc, #88]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0308 	and.w	r3, r3, #8
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d009      	beq.n	800a3d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a3be:	4b12      	ldr	r3, [pc, #72]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	490e      	ldr	r1, [pc, #56]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a3d2:	f000 f821 	bl	800a418 <HAL_RCC_GetSysClockFreq>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	091b      	lsrs	r3, r3, #4
 800a3de:	f003 030f 	and.w	r3, r3, #15
 800a3e2:	490a      	ldr	r1, [pc, #40]	; (800a40c <HAL_RCC_ClockConfig+0x1c0>)
 800a3e4:	5ccb      	ldrb	r3, [r1, r3]
 800a3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ea:	4a09      	ldr	r2, [pc, #36]	; (800a410 <HAL_RCC_ClockConfig+0x1c4>)
 800a3ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a3ee:	4b09      	ldr	r3, [pc, #36]	; (800a414 <HAL_RCC_ClockConfig+0x1c8>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff f9a0 	bl	8009738 <HAL_InitTick>

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	40023c00 	.word	0x40023c00
 800a408:	40023800 	.word	0x40023800
 800a40c:	08013ce4 	.word	0x08013ce4
 800a410:	20000000 	.word	0x20000000
 800a414:	20000004 	.word	0x20000004

0800a418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a418:	b5b0      	push	{r4, r5, r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a41e:	2100      	movs	r1, #0
 800a420:	6079      	str	r1, [r7, #4]
 800a422:	2100      	movs	r1, #0
 800a424:	60f9      	str	r1, [r7, #12]
 800a426:	2100      	movs	r1, #0
 800a428:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a42a:	2100      	movs	r1, #0
 800a42c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a42e:	4952      	ldr	r1, [pc, #328]	; (800a578 <HAL_RCC_GetSysClockFreq+0x160>)
 800a430:	6889      	ldr	r1, [r1, #8]
 800a432:	f001 010c 	and.w	r1, r1, #12
 800a436:	2908      	cmp	r1, #8
 800a438:	d00d      	beq.n	800a456 <HAL_RCC_GetSysClockFreq+0x3e>
 800a43a:	2908      	cmp	r1, #8
 800a43c:	f200 8094 	bhi.w	800a568 <HAL_RCC_GetSysClockFreq+0x150>
 800a440:	2900      	cmp	r1, #0
 800a442:	d002      	beq.n	800a44a <HAL_RCC_GetSysClockFreq+0x32>
 800a444:	2904      	cmp	r1, #4
 800a446:	d003      	beq.n	800a450 <HAL_RCC_GetSysClockFreq+0x38>
 800a448:	e08e      	b.n	800a568 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a44a:	4b4c      	ldr	r3, [pc, #304]	; (800a57c <HAL_RCC_GetSysClockFreq+0x164>)
 800a44c:	60bb      	str	r3, [r7, #8]
       break;
 800a44e:	e08e      	b.n	800a56e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a450:	4b4b      	ldr	r3, [pc, #300]	; (800a580 <HAL_RCC_GetSysClockFreq+0x168>)
 800a452:	60bb      	str	r3, [r7, #8]
      break;
 800a454:	e08b      	b.n	800a56e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a456:	4948      	ldr	r1, [pc, #288]	; (800a578 <HAL_RCC_GetSysClockFreq+0x160>)
 800a458:	6849      	ldr	r1, [r1, #4]
 800a45a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a45e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a460:	4945      	ldr	r1, [pc, #276]	; (800a578 <HAL_RCC_GetSysClockFreq+0x160>)
 800a462:	6849      	ldr	r1, [r1, #4]
 800a464:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a468:	2900      	cmp	r1, #0
 800a46a:	d024      	beq.n	800a4b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a46c:	4942      	ldr	r1, [pc, #264]	; (800a578 <HAL_RCC_GetSysClockFreq+0x160>)
 800a46e:	6849      	ldr	r1, [r1, #4]
 800a470:	0989      	lsrs	r1, r1, #6
 800a472:	4608      	mov	r0, r1
 800a474:	f04f 0100 	mov.w	r1, #0
 800a478:	f240 14ff 	movw	r4, #511	; 0x1ff
 800a47c:	f04f 0500 	mov.w	r5, #0
 800a480:	ea00 0204 	and.w	r2, r0, r4
 800a484:	ea01 0305 	and.w	r3, r1, r5
 800a488:	493d      	ldr	r1, [pc, #244]	; (800a580 <HAL_RCC_GetSysClockFreq+0x168>)
 800a48a:	fb01 f003 	mul.w	r0, r1, r3
 800a48e:	2100      	movs	r1, #0
 800a490:	fb01 f102 	mul.w	r1, r1, r2
 800a494:	1844      	adds	r4, r0, r1
 800a496:	493a      	ldr	r1, [pc, #232]	; (800a580 <HAL_RCC_GetSysClockFreq+0x168>)
 800a498:	fba2 0101 	umull	r0, r1, r2, r1
 800a49c:	1863      	adds	r3, r4, r1
 800a49e:	4619      	mov	r1, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f04f 0300 	mov.w	r3, #0
 800a4a8:	f7f6 f8ee 	bl	8000688 <__aeabi_uldivmod>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	e04a      	b.n	800a54c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4b6:	4b30      	ldr	r3, [pc, #192]	; (800a578 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	099b      	lsrs	r3, r3, #6
 800a4bc:	461a      	mov	r2, r3
 800a4be:	f04f 0300 	mov.w	r3, #0
 800a4c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a4c6:	f04f 0100 	mov.w	r1, #0
 800a4ca:	ea02 0400 	and.w	r4, r2, r0
 800a4ce:	ea03 0501 	and.w	r5, r3, r1
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	f04f 0200 	mov.w	r2, #0
 800a4da:	f04f 0300 	mov.w	r3, #0
 800a4de:	014b      	lsls	r3, r1, #5
 800a4e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a4e4:	0142      	lsls	r2, r0, #5
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	1b00      	subs	r0, r0, r4
 800a4ec:	eb61 0105 	sbc.w	r1, r1, r5
 800a4f0:	f04f 0200 	mov.w	r2, #0
 800a4f4:	f04f 0300 	mov.w	r3, #0
 800a4f8:	018b      	lsls	r3, r1, #6
 800a4fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a4fe:	0182      	lsls	r2, r0, #6
 800a500:	1a12      	subs	r2, r2, r0
 800a502:	eb63 0301 	sbc.w	r3, r3, r1
 800a506:	f04f 0000 	mov.w	r0, #0
 800a50a:	f04f 0100 	mov.w	r1, #0
 800a50e:	00d9      	lsls	r1, r3, #3
 800a510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a514:	00d0      	lsls	r0, r2, #3
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	1912      	adds	r2, r2, r4
 800a51c:	eb45 0303 	adc.w	r3, r5, r3
 800a520:	f04f 0000 	mov.w	r0, #0
 800a524:	f04f 0100 	mov.w	r1, #0
 800a528:	0299      	lsls	r1, r3, #10
 800a52a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a52e:	0290      	lsls	r0, r2, #10
 800a530:	4602      	mov	r2, r0
 800a532:	460b      	mov	r3, r1
 800a534:	4610      	mov	r0, r2
 800a536:	4619      	mov	r1, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	461a      	mov	r2, r3
 800a53c:	f04f 0300 	mov.w	r3, #0
 800a540:	f7f6 f8a2 	bl	8000688 <__aeabi_uldivmod>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4613      	mov	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a54c:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <HAL_RCC_GetSysClockFreq+0x160>)
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	0c1b      	lsrs	r3, r3, #16
 800a552:	f003 0303 	and.w	r3, r3, #3
 800a556:	3301      	adds	r3, #1
 800a558:	005b      	lsls	r3, r3, #1
 800a55a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	fbb2 f3f3 	udiv	r3, r2, r3
 800a564:	60bb      	str	r3, [r7, #8]
      break;
 800a566:	e002      	b.n	800a56e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a568:	4b04      	ldr	r3, [pc, #16]	; (800a57c <HAL_RCC_GetSysClockFreq+0x164>)
 800a56a:	60bb      	str	r3, [r7, #8]
      break;
 800a56c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a56e:	68bb      	ldr	r3, [r7, #8]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bdb0      	pop	{r4, r5, r7, pc}
 800a578:	40023800 	.word	0x40023800
 800a57c:	00f42400 	.word	0x00f42400
 800a580:	017d7840 	.word	0x017d7840

0800a584 <__errno>:
 800a584:	4b01      	ldr	r3, [pc, #4]	; (800a58c <__errno+0x8>)
 800a586:	6818      	ldr	r0, [r3, #0]
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	2000000c 	.word	0x2000000c

0800a590 <__libc_init_array>:
 800a590:	b570      	push	{r4, r5, r6, lr}
 800a592:	4d0d      	ldr	r5, [pc, #52]	; (800a5c8 <__libc_init_array+0x38>)
 800a594:	4c0d      	ldr	r4, [pc, #52]	; (800a5cc <__libc_init_array+0x3c>)
 800a596:	1b64      	subs	r4, r4, r5
 800a598:	10a4      	asrs	r4, r4, #2
 800a59a:	2600      	movs	r6, #0
 800a59c:	42a6      	cmp	r6, r4
 800a59e:	d109      	bne.n	800a5b4 <__libc_init_array+0x24>
 800a5a0:	4d0b      	ldr	r5, [pc, #44]	; (800a5d0 <__libc_init_array+0x40>)
 800a5a2:	4c0c      	ldr	r4, [pc, #48]	; (800a5d4 <__libc_init_array+0x44>)
 800a5a4:	f001 f984 	bl	800b8b0 <_init>
 800a5a8:	1b64      	subs	r4, r4, r5
 800a5aa:	10a4      	asrs	r4, r4, #2
 800a5ac:	2600      	movs	r6, #0
 800a5ae:	42a6      	cmp	r6, r4
 800a5b0:	d105      	bne.n	800a5be <__libc_init_array+0x2e>
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
 800a5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5b8:	4798      	blx	r3
 800a5ba:	3601      	adds	r6, #1
 800a5bc:	e7ee      	b.n	800a59c <__libc_init_array+0xc>
 800a5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c2:	4798      	blx	r3
 800a5c4:	3601      	adds	r6, #1
 800a5c6:	e7f2      	b.n	800a5ae <__libc_init_array+0x1e>
 800a5c8:	08013d94 	.word	0x08013d94
 800a5cc:	08013d94 	.word	0x08013d94
 800a5d0:	08013d94 	.word	0x08013d94
 800a5d4:	08013d98 	.word	0x08013d98

0800a5d8 <memcpy>:
 800a5d8:	440a      	add	r2, r1
 800a5da:	4291      	cmp	r1, r2
 800a5dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a5e0:	d100      	bne.n	800a5e4 <memcpy+0xc>
 800a5e2:	4770      	bx	lr
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5ee:	4291      	cmp	r1, r2
 800a5f0:	d1f9      	bne.n	800a5e6 <memcpy+0xe>
 800a5f2:	bd10      	pop	{r4, pc}

0800a5f4 <memset>:
 800a5f4:	4402      	add	r2, r0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d100      	bne.n	800a5fe <memset+0xa>
 800a5fc:	4770      	bx	lr
 800a5fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a602:	e7f9      	b.n	800a5f8 <memset+0x4>

0800a604 <iprintf>:
 800a604:	b40f      	push	{r0, r1, r2, r3}
 800a606:	4b0a      	ldr	r3, [pc, #40]	; (800a630 <iprintf+0x2c>)
 800a608:	b513      	push	{r0, r1, r4, lr}
 800a60a:	681c      	ldr	r4, [r3, #0]
 800a60c:	b124      	cbz	r4, 800a618 <iprintf+0x14>
 800a60e:	69a3      	ldr	r3, [r4, #24]
 800a610:	b913      	cbnz	r3, 800a618 <iprintf+0x14>
 800a612:	4620      	mov	r0, r4
 800a614:	f000 fbe8 	bl	800ade8 <__sinit>
 800a618:	ab05      	add	r3, sp, #20
 800a61a:	9a04      	ldr	r2, [sp, #16]
 800a61c:	68a1      	ldr	r1, [r4, #8]
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	4620      	mov	r0, r4
 800a622:	f000 fdb9 	bl	800b198 <_vfiprintf_r>
 800a626:	b002      	add	sp, #8
 800a628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a62c:	b004      	add	sp, #16
 800a62e:	4770      	bx	lr
 800a630:	2000000c 	.word	0x2000000c

0800a634 <_puts_r>:
 800a634:	b570      	push	{r4, r5, r6, lr}
 800a636:	460e      	mov	r6, r1
 800a638:	4605      	mov	r5, r0
 800a63a:	b118      	cbz	r0, 800a644 <_puts_r+0x10>
 800a63c:	6983      	ldr	r3, [r0, #24]
 800a63e:	b90b      	cbnz	r3, 800a644 <_puts_r+0x10>
 800a640:	f000 fbd2 	bl	800ade8 <__sinit>
 800a644:	69ab      	ldr	r3, [r5, #24]
 800a646:	68ac      	ldr	r4, [r5, #8]
 800a648:	b913      	cbnz	r3, 800a650 <_puts_r+0x1c>
 800a64a:	4628      	mov	r0, r5
 800a64c:	f000 fbcc 	bl	800ade8 <__sinit>
 800a650:	4b2c      	ldr	r3, [pc, #176]	; (800a704 <_puts_r+0xd0>)
 800a652:	429c      	cmp	r4, r3
 800a654:	d120      	bne.n	800a698 <_puts_r+0x64>
 800a656:	686c      	ldr	r4, [r5, #4]
 800a658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a65a:	07db      	lsls	r3, r3, #31
 800a65c:	d405      	bmi.n	800a66a <_puts_r+0x36>
 800a65e:	89a3      	ldrh	r3, [r4, #12]
 800a660:	0598      	lsls	r0, r3, #22
 800a662:	d402      	bmi.n	800a66a <_puts_r+0x36>
 800a664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a666:	f000 fc5d 	bl	800af24 <__retarget_lock_acquire_recursive>
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	0719      	lsls	r1, r3, #28
 800a66e:	d51d      	bpl.n	800a6ac <_puts_r+0x78>
 800a670:	6923      	ldr	r3, [r4, #16]
 800a672:	b1db      	cbz	r3, 800a6ac <_puts_r+0x78>
 800a674:	3e01      	subs	r6, #1
 800a676:	68a3      	ldr	r3, [r4, #8]
 800a678:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a67c:	3b01      	subs	r3, #1
 800a67e:	60a3      	str	r3, [r4, #8]
 800a680:	bb39      	cbnz	r1, 800a6d2 <_puts_r+0x9e>
 800a682:	2b00      	cmp	r3, #0
 800a684:	da38      	bge.n	800a6f8 <_puts_r+0xc4>
 800a686:	4622      	mov	r2, r4
 800a688:	210a      	movs	r1, #10
 800a68a:	4628      	mov	r0, r5
 800a68c:	f000 f9d2 	bl	800aa34 <__swbuf_r>
 800a690:	3001      	adds	r0, #1
 800a692:	d011      	beq.n	800a6b8 <_puts_r+0x84>
 800a694:	250a      	movs	r5, #10
 800a696:	e011      	b.n	800a6bc <_puts_r+0x88>
 800a698:	4b1b      	ldr	r3, [pc, #108]	; (800a708 <_puts_r+0xd4>)
 800a69a:	429c      	cmp	r4, r3
 800a69c:	d101      	bne.n	800a6a2 <_puts_r+0x6e>
 800a69e:	68ac      	ldr	r4, [r5, #8]
 800a6a0:	e7da      	b.n	800a658 <_puts_r+0x24>
 800a6a2:	4b1a      	ldr	r3, [pc, #104]	; (800a70c <_puts_r+0xd8>)
 800a6a4:	429c      	cmp	r4, r3
 800a6a6:	bf08      	it	eq
 800a6a8:	68ec      	ldreq	r4, [r5, #12]
 800a6aa:	e7d5      	b.n	800a658 <_puts_r+0x24>
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 fa12 	bl	800aad8 <__swsetup_r>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d0dd      	beq.n	800a674 <_puts_r+0x40>
 800a6b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a6bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6be:	07da      	lsls	r2, r3, #31
 800a6c0:	d405      	bmi.n	800a6ce <_puts_r+0x9a>
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	059b      	lsls	r3, r3, #22
 800a6c6:	d402      	bmi.n	800a6ce <_puts_r+0x9a>
 800a6c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ca:	f000 fc2c 	bl	800af26 <__retarget_lock_release_recursive>
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	bd70      	pop	{r4, r5, r6, pc}
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	da04      	bge.n	800a6e0 <_puts_r+0xac>
 800a6d6:	69a2      	ldr	r2, [r4, #24]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	dc06      	bgt.n	800a6ea <_puts_r+0xb6>
 800a6dc:	290a      	cmp	r1, #10
 800a6de:	d004      	beq.n	800a6ea <_puts_r+0xb6>
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	6022      	str	r2, [r4, #0]
 800a6e6:	7019      	strb	r1, [r3, #0]
 800a6e8:	e7c5      	b.n	800a676 <_puts_r+0x42>
 800a6ea:	4622      	mov	r2, r4
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f000 f9a1 	bl	800aa34 <__swbuf_r>
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	d1bf      	bne.n	800a676 <_puts_r+0x42>
 800a6f6:	e7df      	b.n	800a6b8 <_puts_r+0x84>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	250a      	movs	r5, #10
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	6022      	str	r2, [r4, #0]
 800a700:	701d      	strb	r5, [r3, #0]
 800a702:	e7db      	b.n	800a6bc <_puts_r+0x88>
 800a704:	08013d18 	.word	0x08013d18
 800a708:	08013d38 	.word	0x08013d38
 800a70c:	08013cf8 	.word	0x08013cf8

0800a710 <puts>:
 800a710:	4b02      	ldr	r3, [pc, #8]	; (800a71c <puts+0xc>)
 800a712:	4601      	mov	r1, r0
 800a714:	6818      	ldr	r0, [r3, #0]
 800a716:	f7ff bf8d 	b.w	800a634 <_puts_r>
 800a71a:	bf00      	nop
 800a71c:	2000000c 	.word	0x2000000c

0800a720 <swapfunc>:
 800a720:	2b02      	cmp	r3, #2
 800a722:	b510      	push	{r4, lr}
 800a724:	d00a      	beq.n	800a73c <swapfunc+0x1c>
 800a726:	0892      	lsrs	r2, r2, #2
 800a728:	3a01      	subs	r2, #1
 800a72a:	6803      	ldr	r3, [r0, #0]
 800a72c:	680c      	ldr	r4, [r1, #0]
 800a72e:	f840 4b04 	str.w	r4, [r0], #4
 800a732:	2a00      	cmp	r2, #0
 800a734:	f841 3b04 	str.w	r3, [r1], #4
 800a738:	dcf6      	bgt.n	800a728 <swapfunc+0x8>
 800a73a:	bd10      	pop	{r4, pc}
 800a73c:	4402      	add	r2, r0
 800a73e:	780c      	ldrb	r4, [r1, #0]
 800a740:	7803      	ldrb	r3, [r0, #0]
 800a742:	f800 4b01 	strb.w	r4, [r0], #1
 800a746:	f801 3b01 	strb.w	r3, [r1], #1
 800a74a:	1a13      	subs	r3, r2, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	dcf6      	bgt.n	800a73e <swapfunc+0x1e>
 800a750:	e7f3      	b.n	800a73a <swapfunc+0x1a>

0800a752 <med3.isra.0>:
 800a752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a754:	460f      	mov	r7, r1
 800a756:	4614      	mov	r4, r2
 800a758:	4606      	mov	r6, r0
 800a75a:	461d      	mov	r5, r3
 800a75c:	4798      	blx	r3
 800a75e:	2800      	cmp	r0, #0
 800a760:	4621      	mov	r1, r4
 800a762:	4638      	mov	r0, r7
 800a764:	da0c      	bge.n	800a780 <med3.isra.0+0x2e>
 800a766:	47a8      	blx	r5
 800a768:	2800      	cmp	r0, #0
 800a76a:	da02      	bge.n	800a772 <med3.isra.0+0x20>
 800a76c:	463c      	mov	r4, r7
 800a76e:	4620      	mov	r0, r4
 800a770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a772:	4621      	mov	r1, r4
 800a774:	4630      	mov	r0, r6
 800a776:	47a8      	blx	r5
 800a778:	2800      	cmp	r0, #0
 800a77a:	dbf8      	blt.n	800a76e <med3.isra.0+0x1c>
 800a77c:	4634      	mov	r4, r6
 800a77e:	e7f6      	b.n	800a76e <med3.isra.0+0x1c>
 800a780:	47a8      	blx	r5
 800a782:	2800      	cmp	r0, #0
 800a784:	dcf2      	bgt.n	800a76c <med3.isra.0+0x1a>
 800a786:	4621      	mov	r1, r4
 800a788:	4630      	mov	r0, r6
 800a78a:	47a8      	blx	r5
 800a78c:	2800      	cmp	r0, #0
 800a78e:	daee      	bge.n	800a76e <med3.isra.0+0x1c>
 800a790:	e7f4      	b.n	800a77c <med3.isra.0+0x2a>

0800a792 <qsort>:
 800a792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a796:	469a      	mov	sl, r3
 800a798:	ea40 0302 	orr.w	r3, r0, r2
 800a79c:	079b      	lsls	r3, r3, #30
 800a79e:	b097      	sub	sp, #92	; 0x5c
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	4614      	mov	r4, r2
 800a7a4:	d11a      	bne.n	800a7dc <qsort+0x4a>
 800a7a6:	f1b2 0804 	subs.w	r8, r2, #4
 800a7aa:	bf18      	it	ne
 800a7ac:	f04f 0801 	movne.w	r8, #1
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	9302      	str	r3, [sp, #8]
 800a7b4:	1933      	adds	r3, r6, r4
 800a7b6:	fb04 f701 	mul.w	r7, r4, r1
 800a7ba:	9301      	str	r3, [sp, #4]
 800a7bc:	2906      	cmp	r1, #6
 800a7be:	eb06 0307 	add.w	r3, r6, r7
 800a7c2:	9303      	str	r3, [sp, #12]
 800a7c4:	d82a      	bhi.n	800a81c <qsort+0x8a>
 800a7c6:	9b01      	ldr	r3, [sp, #4]
 800a7c8:	9a03      	ldr	r2, [sp, #12]
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d310      	bcc.n	800a7f0 <qsort+0x5e>
 800a7ce:	9b02      	ldr	r3, [sp, #8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f040 811f 	bne.w	800aa14 <qsort+0x282>
 800a7d6:	b017      	add	sp, #92	; 0x5c
 800a7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7dc:	f04f 0802 	mov.w	r8, #2
 800a7e0:	e7e6      	b.n	800a7b0 <qsort+0x1e>
 800a7e2:	4643      	mov	r3, r8
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	f7ff ff99 	bl	800a720 <swapfunc>
 800a7ee:	e00e      	b.n	800a80e <qsort+0x7c>
 800a7f0:	9d01      	ldr	r5, [sp, #4]
 800a7f2:	e00d      	b.n	800a810 <qsort+0x7e>
 800a7f4:	1b2f      	subs	r7, r5, r4
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	4638      	mov	r0, r7
 800a7fa:	47d0      	blx	sl
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	dd09      	ble.n	800a814 <qsort+0x82>
 800a800:	f1b8 0f00 	cmp.w	r8, #0
 800a804:	d1ed      	bne.n	800a7e2 <qsort+0x50>
 800a806:	682b      	ldr	r3, [r5, #0]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	602a      	str	r2, [r5, #0]
 800a80c:	603b      	str	r3, [r7, #0]
 800a80e:	463d      	mov	r5, r7
 800a810:	42ae      	cmp	r6, r5
 800a812:	d3ef      	bcc.n	800a7f4 <qsort+0x62>
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	4423      	add	r3, r4
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	e7d4      	b.n	800a7c6 <qsort+0x34>
 800a81c:	ea4f 0951 	mov.w	r9, r1, lsr #1
 800a820:	1b3f      	subs	r7, r7, r4
 800a822:	2907      	cmp	r1, #7
 800a824:	fb04 6909 	mla	r9, r4, r9, r6
 800a828:	4437      	add	r7, r6
 800a82a:	d022      	beq.n	800a872 <qsort+0xe0>
 800a82c:	2928      	cmp	r1, #40	; 0x28
 800a82e:	d945      	bls.n	800a8bc <qsort+0x12a>
 800a830:	08c9      	lsrs	r1, r1, #3
 800a832:	fb04 f501 	mul.w	r5, r4, r1
 800a836:	4653      	mov	r3, sl
 800a838:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 800a83c:	1971      	adds	r1, r6, r5
 800a83e:	4630      	mov	r0, r6
 800a840:	f7ff ff87 	bl	800a752 <med3.isra.0>
 800a844:	4649      	mov	r1, r9
 800a846:	eb09 0205 	add.w	r2, r9, r5
 800a84a:	4653      	mov	r3, sl
 800a84c:	4683      	mov	fp, r0
 800a84e:	1b48      	subs	r0, r1, r5
 800a850:	f7ff ff7f 	bl	800a752 <med3.isra.0>
 800a854:	463a      	mov	r2, r7
 800a856:	4681      	mov	r9, r0
 800a858:	4653      	mov	r3, sl
 800a85a:	1b79      	subs	r1, r7, r5
 800a85c:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 800a860:	f7ff ff77 	bl	800a752 <med3.isra.0>
 800a864:	4602      	mov	r2, r0
 800a866:	4649      	mov	r1, r9
 800a868:	4653      	mov	r3, sl
 800a86a:	4658      	mov	r0, fp
 800a86c:	f7ff ff71 	bl	800a752 <med3.isra.0>
 800a870:	4681      	mov	r9, r0
 800a872:	f1b8 0f00 	cmp.w	r8, #0
 800a876:	d124      	bne.n	800a8c2 <qsort+0x130>
 800a878:	6833      	ldr	r3, [r6, #0]
 800a87a:	f8d9 2000 	ldr.w	r2, [r9]
 800a87e:	6032      	str	r2, [r6, #0]
 800a880:	f8c9 3000 	str.w	r3, [r9]
 800a884:	eb06 0b04 	add.w	fp, r6, r4
 800a888:	46b9      	mov	r9, r7
 800a88a:	465d      	mov	r5, fp
 800a88c:	2300      	movs	r3, #0
 800a88e:	45bb      	cmp	fp, r7
 800a890:	d835      	bhi.n	800a8fe <qsort+0x16c>
 800a892:	4631      	mov	r1, r6
 800a894:	4658      	mov	r0, fp
 800a896:	9304      	str	r3, [sp, #16]
 800a898:	47d0      	blx	sl
 800a89a:	2800      	cmp	r0, #0
 800a89c:	9b04      	ldr	r3, [sp, #16]
 800a89e:	dc3e      	bgt.n	800a91e <qsort+0x18c>
 800a8a0:	d10a      	bne.n	800a8b8 <qsort+0x126>
 800a8a2:	f1b8 0f00 	cmp.w	r8, #0
 800a8a6:	d113      	bne.n	800a8d0 <qsort+0x13e>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	f8db 2000 	ldr.w	r2, [fp]
 800a8ae:	602a      	str	r2, [r5, #0]
 800a8b0:	f8cb 3000 	str.w	r3, [fp]
 800a8b4:	4425      	add	r5, r4
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	44a3      	add	fp, r4
 800a8ba:	e7e8      	b.n	800a88e <qsort+0xfc>
 800a8bc:	463a      	mov	r2, r7
 800a8be:	46b3      	mov	fp, r6
 800a8c0:	e7d1      	b.n	800a866 <qsort+0xd4>
 800a8c2:	4643      	mov	r3, r8
 800a8c4:	4622      	mov	r2, r4
 800a8c6:	4649      	mov	r1, r9
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	f7ff ff29 	bl	800a720 <swapfunc>
 800a8ce:	e7d9      	b.n	800a884 <qsort+0xf2>
 800a8d0:	4643      	mov	r3, r8
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f7ff ff22 	bl	800a720 <swapfunc>
 800a8dc:	e7ea      	b.n	800a8b4 <qsort+0x122>
 800a8de:	d10b      	bne.n	800a8f8 <qsort+0x166>
 800a8e0:	f1b8 0f00 	cmp.w	r8, #0
 800a8e4:	d114      	bne.n	800a910 <qsort+0x17e>
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	f8d9 2000 	ldr.w	r2, [r9]
 800a8ec:	603a      	str	r2, [r7, #0]
 800a8ee:	f8c9 3000 	str.w	r3, [r9]
 800a8f2:	eba9 0904 	sub.w	r9, r9, r4
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	9f04      	ldr	r7, [sp, #16]
 800a8fa:	45bb      	cmp	fp, r7
 800a8fc:	d90f      	bls.n	800a91e <qsort+0x18c>
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d143      	bne.n	800a98a <qsort+0x1f8>
 800a902:	9b01      	ldr	r3, [sp, #4]
 800a904:	9a03      	ldr	r2, [sp, #12]
 800a906:	4293      	cmp	r3, r2
 800a908:	f4bf af61 	bcs.w	800a7ce <qsort+0x3c>
 800a90c:	9d01      	ldr	r5, [sp, #4]
 800a90e:	e036      	b.n	800a97e <qsort+0x1ec>
 800a910:	4643      	mov	r3, r8
 800a912:	4622      	mov	r2, r4
 800a914:	4649      	mov	r1, r9
 800a916:	4638      	mov	r0, r7
 800a918:	f7ff ff02 	bl	800a720 <swapfunc>
 800a91c:	e7e9      	b.n	800a8f2 <qsort+0x160>
 800a91e:	4631      	mov	r1, r6
 800a920:	4638      	mov	r0, r7
 800a922:	9305      	str	r3, [sp, #20]
 800a924:	47d0      	blx	sl
 800a926:	1b3b      	subs	r3, r7, r4
 800a928:	2800      	cmp	r0, #0
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	9b05      	ldr	r3, [sp, #20]
 800a92e:	dad6      	bge.n	800a8de <qsort+0x14c>
 800a930:	f1b8 0f00 	cmp.w	r8, #0
 800a934:	d006      	beq.n	800a944 <qsort+0x1b2>
 800a936:	4643      	mov	r3, r8
 800a938:	4622      	mov	r2, r4
 800a93a:	4639      	mov	r1, r7
 800a93c:	4658      	mov	r0, fp
 800a93e:	f7ff feef 	bl	800a720 <swapfunc>
 800a942:	e005      	b.n	800a950 <qsort+0x1be>
 800a944:	f8db 3000 	ldr.w	r3, [fp]
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	f8cb 2000 	str.w	r2, [fp]
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	9f04      	ldr	r7, [sp, #16]
 800a952:	e7b0      	b.n	800a8b6 <qsort+0x124>
 800a954:	4643      	mov	r3, r8
 800a956:	4622      	mov	r2, r4
 800a958:	4639      	mov	r1, r7
 800a95a:	4628      	mov	r0, r5
 800a95c:	f7ff fee0 	bl	800a720 <swapfunc>
 800a960:	e00c      	b.n	800a97c <qsort+0x1ea>
 800a962:	1b2f      	subs	r7, r5, r4
 800a964:	4629      	mov	r1, r5
 800a966:	4638      	mov	r0, r7
 800a968:	47d0      	blx	sl
 800a96a:	2800      	cmp	r0, #0
 800a96c:	dd09      	ble.n	800a982 <qsort+0x1f0>
 800a96e:	f1b8 0f00 	cmp.w	r8, #0
 800a972:	d1ef      	bne.n	800a954 <qsort+0x1c2>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	602a      	str	r2, [r5, #0]
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	463d      	mov	r5, r7
 800a97e:	42ae      	cmp	r6, r5
 800a980:	d3ef      	bcc.n	800a962 <qsort+0x1d0>
 800a982:	9b01      	ldr	r3, [sp, #4]
 800a984:	4423      	add	r3, r4
 800a986:	9301      	str	r3, [sp, #4]
 800a988:	e7bb      	b.n	800a902 <qsort+0x170>
 800a98a:	ebab 0305 	sub.w	r3, fp, r5
 800a98e:	1baa      	subs	r2, r5, r6
 800a990:	429a      	cmp	r2, r3
 800a992:	bfa8      	it	ge
 800a994:	461a      	movge	r2, r3
 800a996:	9301      	str	r3, [sp, #4]
 800a998:	b12a      	cbz	r2, 800a9a6 <qsort+0x214>
 800a99a:	4643      	mov	r3, r8
 800a99c:	ebab 0102 	sub.w	r1, fp, r2
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff febd 	bl	800a720 <swapfunc>
 800a9a6:	9b03      	ldr	r3, [sp, #12]
 800a9a8:	eba3 0209 	sub.w	r2, r3, r9
 800a9ac:	eba9 0707 	sub.w	r7, r9, r7
 800a9b0:	1b12      	subs	r2, r2, r4
 800a9b2:	42ba      	cmp	r2, r7
 800a9b4:	bf28      	it	cs
 800a9b6:	463a      	movcs	r2, r7
 800a9b8:	b12a      	cbz	r2, 800a9c6 <qsort+0x234>
 800a9ba:	9903      	ldr	r1, [sp, #12]
 800a9bc:	4643      	mov	r3, r8
 800a9be:	1a89      	subs	r1, r1, r2
 800a9c0:	4658      	mov	r0, fp
 800a9c2:	f7ff fead 	bl	800a720 <swapfunc>
 800a9c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	454f      	cmp	r7, r9
 800a9ce:	eba3 0007 	sub.w	r0, r3, r7
 800a9d2:	d904      	bls.n	800a9de <qsort+0x24c>
 800a9d4:	4633      	mov	r3, r6
 800a9d6:	46b9      	mov	r9, r7
 800a9d8:	9f01      	ldr	r7, [sp, #4]
 800a9da:	4606      	mov	r6, r0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	42a7      	cmp	r7, r4
 800a9e0:	d921      	bls.n	800aa26 <qsort+0x294>
 800a9e2:	fbb7 f1f4 	udiv	r1, r7, r4
 800a9e6:	9b02      	ldr	r3, [sp, #8]
 800a9e8:	2b07      	cmp	r3, #7
 800a9ea:	d80d      	bhi.n	800aa08 <qsort+0x276>
 800a9ec:	fbb9 f7f4 	udiv	r7, r9, r4
 800a9f0:	aa16      	add	r2, sp, #88	; 0x58
 800a9f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9f6:	f843 6c40 	str.w	r6, [r3, #-64]
 800a9fa:	f843 7c3c 	str.w	r7, [r3, #-60]
 800a9fe:	9b02      	ldr	r3, [sp, #8]
 800aa00:	3301      	adds	r3, #1
 800aa02:	9302      	str	r3, [sp, #8]
 800aa04:	4606      	mov	r6, r0
 800aa06:	e6d5      	b.n	800a7b4 <qsort+0x22>
 800aa08:	4653      	mov	r3, sl
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	f7ff fec1 	bl	800a792 <qsort>
 800aa10:	45a1      	cmp	r9, r4
 800aa12:	d80b      	bhi.n	800aa2c <qsort+0x29a>
 800aa14:	9b02      	ldr	r3, [sp, #8]
 800aa16:	aa16      	add	r2, sp, #88	; 0x58
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	9302      	str	r3, [sp, #8]
 800aa1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa20:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 800aa24:	e7ee      	b.n	800aa04 <qsort+0x272>
 800aa26:	45a1      	cmp	r9, r4
 800aa28:	f67f aed1 	bls.w	800a7ce <qsort+0x3c>
 800aa2c:	fbb9 f1f4 	udiv	r1, r9, r4
 800aa30:	4630      	mov	r0, r6
 800aa32:	e7e7      	b.n	800aa04 <qsort+0x272>

0800aa34 <__swbuf_r>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	460e      	mov	r6, r1
 800aa38:	4614      	mov	r4, r2
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	b118      	cbz	r0, 800aa46 <__swbuf_r+0x12>
 800aa3e:	6983      	ldr	r3, [r0, #24]
 800aa40:	b90b      	cbnz	r3, 800aa46 <__swbuf_r+0x12>
 800aa42:	f000 f9d1 	bl	800ade8 <__sinit>
 800aa46:	4b21      	ldr	r3, [pc, #132]	; (800aacc <__swbuf_r+0x98>)
 800aa48:	429c      	cmp	r4, r3
 800aa4a:	d12b      	bne.n	800aaa4 <__swbuf_r+0x70>
 800aa4c:	686c      	ldr	r4, [r5, #4]
 800aa4e:	69a3      	ldr	r3, [r4, #24]
 800aa50:	60a3      	str	r3, [r4, #8]
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	071a      	lsls	r2, r3, #28
 800aa56:	d52f      	bpl.n	800aab8 <__swbuf_r+0x84>
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	b36b      	cbz	r3, 800aab8 <__swbuf_r+0x84>
 800aa5c:	6923      	ldr	r3, [r4, #16]
 800aa5e:	6820      	ldr	r0, [r4, #0]
 800aa60:	1ac0      	subs	r0, r0, r3
 800aa62:	6963      	ldr	r3, [r4, #20]
 800aa64:	b2f6      	uxtb	r6, r6
 800aa66:	4283      	cmp	r3, r0
 800aa68:	4637      	mov	r7, r6
 800aa6a:	dc04      	bgt.n	800aa76 <__swbuf_r+0x42>
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	4628      	mov	r0, r5
 800aa70:	f000 f926 	bl	800acc0 <_fflush_r>
 800aa74:	bb30      	cbnz	r0, 800aac4 <__swbuf_r+0x90>
 800aa76:	68a3      	ldr	r3, [r4, #8]
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	60a3      	str	r3, [r4, #8]
 800aa7c:	6823      	ldr	r3, [r4, #0]
 800aa7e:	1c5a      	adds	r2, r3, #1
 800aa80:	6022      	str	r2, [r4, #0]
 800aa82:	701e      	strb	r6, [r3, #0]
 800aa84:	6963      	ldr	r3, [r4, #20]
 800aa86:	3001      	adds	r0, #1
 800aa88:	4283      	cmp	r3, r0
 800aa8a:	d004      	beq.n	800aa96 <__swbuf_r+0x62>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	07db      	lsls	r3, r3, #31
 800aa90:	d506      	bpl.n	800aaa0 <__swbuf_r+0x6c>
 800aa92:	2e0a      	cmp	r6, #10
 800aa94:	d104      	bne.n	800aaa0 <__swbuf_r+0x6c>
 800aa96:	4621      	mov	r1, r4
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f000 f911 	bl	800acc0 <_fflush_r>
 800aa9e:	b988      	cbnz	r0, 800aac4 <__swbuf_r+0x90>
 800aaa0:	4638      	mov	r0, r7
 800aaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaa4:	4b0a      	ldr	r3, [pc, #40]	; (800aad0 <__swbuf_r+0x9c>)
 800aaa6:	429c      	cmp	r4, r3
 800aaa8:	d101      	bne.n	800aaae <__swbuf_r+0x7a>
 800aaaa:	68ac      	ldr	r4, [r5, #8]
 800aaac:	e7cf      	b.n	800aa4e <__swbuf_r+0x1a>
 800aaae:	4b09      	ldr	r3, [pc, #36]	; (800aad4 <__swbuf_r+0xa0>)
 800aab0:	429c      	cmp	r4, r3
 800aab2:	bf08      	it	eq
 800aab4:	68ec      	ldreq	r4, [r5, #12]
 800aab6:	e7ca      	b.n	800aa4e <__swbuf_r+0x1a>
 800aab8:	4621      	mov	r1, r4
 800aaba:	4628      	mov	r0, r5
 800aabc:	f000 f80c 	bl	800aad8 <__swsetup_r>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d0cb      	beq.n	800aa5c <__swbuf_r+0x28>
 800aac4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aac8:	e7ea      	b.n	800aaa0 <__swbuf_r+0x6c>
 800aaca:	bf00      	nop
 800aacc:	08013d18 	.word	0x08013d18
 800aad0:	08013d38 	.word	0x08013d38
 800aad4:	08013cf8 	.word	0x08013cf8

0800aad8 <__swsetup_r>:
 800aad8:	4b32      	ldr	r3, [pc, #200]	; (800aba4 <__swsetup_r+0xcc>)
 800aada:	b570      	push	{r4, r5, r6, lr}
 800aadc:	681d      	ldr	r5, [r3, #0]
 800aade:	4606      	mov	r6, r0
 800aae0:	460c      	mov	r4, r1
 800aae2:	b125      	cbz	r5, 800aaee <__swsetup_r+0x16>
 800aae4:	69ab      	ldr	r3, [r5, #24]
 800aae6:	b913      	cbnz	r3, 800aaee <__swsetup_r+0x16>
 800aae8:	4628      	mov	r0, r5
 800aaea:	f000 f97d 	bl	800ade8 <__sinit>
 800aaee:	4b2e      	ldr	r3, [pc, #184]	; (800aba8 <__swsetup_r+0xd0>)
 800aaf0:	429c      	cmp	r4, r3
 800aaf2:	d10f      	bne.n	800ab14 <__swsetup_r+0x3c>
 800aaf4:	686c      	ldr	r4, [r5, #4]
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aafc:	0719      	lsls	r1, r3, #28
 800aafe:	d42c      	bmi.n	800ab5a <__swsetup_r+0x82>
 800ab00:	06dd      	lsls	r5, r3, #27
 800ab02:	d411      	bmi.n	800ab28 <__swsetup_r+0x50>
 800ab04:	2309      	movs	r3, #9
 800ab06:	6033      	str	r3, [r6, #0]
 800ab08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab0c:	81a3      	strh	r3, [r4, #12]
 800ab0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab12:	e03e      	b.n	800ab92 <__swsetup_r+0xba>
 800ab14:	4b25      	ldr	r3, [pc, #148]	; (800abac <__swsetup_r+0xd4>)
 800ab16:	429c      	cmp	r4, r3
 800ab18:	d101      	bne.n	800ab1e <__swsetup_r+0x46>
 800ab1a:	68ac      	ldr	r4, [r5, #8]
 800ab1c:	e7eb      	b.n	800aaf6 <__swsetup_r+0x1e>
 800ab1e:	4b24      	ldr	r3, [pc, #144]	; (800abb0 <__swsetup_r+0xd8>)
 800ab20:	429c      	cmp	r4, r3
 800ab22:	bf08      	it	eq
 800ab24:	68ec      	ldreq	r4, [r5, #12]
 800ab26:	e7e6      	b.n	800aaf6 <__swsetup_r+0x1e>
 800ab28:	0758      	lsls	r0, r3, #29
 800ab2a:	d512      	bpl.n	800ab52 <__swsetup_r+0x7a>
 800ab2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab2e:	b141      	cbz	r1, 800ab42 <__swsetup_r+0x6a>
 800ab30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab34:	4299      	cmp	r1, r3
 800ab36:	d002      	beq.n	800ab3e <__swsetup_r+0x66>
 800ab38:	4630      	mov	r0, r6
 800ab3a:	f000 fa59 	bl	800aff0 <_free_r>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	6363      	str	r3, [r4, #52]	; 0x34
 800ab42:	89a3      	ldrh	r3, [r4, #12]
 800ab44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	6063      	str	r3, [r4, #4]
 800ab4e:	6923      	ldr	r3, [r4, #16]
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f043 0308 	orr.w	r3, r3, #8
 800ab58:	81a3      	strh	r3, [r4, #12]
 800ab5a:	6923      	ldr	r3, [r4, #16]
 800ab5c:	b94b      	cbnz	r3, 800ab72 <__swsetup_r+0x9a>
 800ab5e:	89a3      	ldrh	r3, [r4, #12]
 800ab60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab68:	d003      	beq.n	800ab72 <__swsetup_r+0x9a>
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f000 f9ff 	bl	800af70 <__smakebuf_r>
 800ab72:	89a0      	ldrh	r0, [r4, #12]
 800ab74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab78:	f010 0301 	ands.w	r3, r0, #1
 800ab7c:	d00a      	beq.n	800ab94 <__swsetup_r+0xbc>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	60a3      	str	r3, [r4, #8]
 800ab82:	6963      	ldr	r3, [r4, #20]
 800ab84:	425b      	negs	r3, r3
 800ab86:	61a3      	str	r3, [r4, #24]
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	b943      	cbnz	r3, 800ab9e <__swsetup_r+0xc6>
 800ab8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab90:	d1ba      	bne.n	800ab08 <__swsetup_r+0x30>
 800ab92:	bd70      	pop	{r4, r5, r6, pc}
 800ab94:	0781      	lsls	r1, r0, #30
 800ab96:	bf58      	it	pl
 800ab98:	6963      	ldrpl	r3, [r4, #20]
 800ab9a:	60a3      	str	r3, [r4, #8]
 800ab9c:	e7f4      	b.n	800ab88 <__swsetup_r+0xb0>
 800ab9e:	2000      	movs	r0, #0
 800aba0:	e7f7      	b.n	800ab92 <__swsetup_r+0xba>
 800aba2:	bf00      	nop
 800aba4:	2000000c 	.word	0x2000000c
 800aba8:	08013d18 	.word	0x08013d18
 800abac:	08013d38 	.word	0x08013d38
 800abb0:	08013cf8 	.word	0x08013cf8

0800abb4 <__sflush_r>:
 800abb4:	898a      	ldrh	r2, [r1, #12]
 800abb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abba:	4605      	mov	r5, r0
 800abbc:	0710      	lsls	r0, r2, #28
 800abbe:	460c      	mov	r4, r1
 800abc0:	d458      	bmi.n	800ac74 <__sflush_r+0xc0>
 800abc2:	684b      	ldr	r3, [r1, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	dc05      	bgt.n	800abd4 <__sflush_r+0x20>
 800abc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abca:	2b00      	cmp	r3, #0
 800abcc:	dc02      	bgt.n	800abd4 <__sflush_r+0x20>
 800abce:	2000      	movs	r0, #0
 800abd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abd6:	2e00      	cmp	r6, #0
 800abd8:	d0f9      	beq.n	800abce <__sflush_r+0x1a>
 800abda:	2300      	movs	r3, #0
 800abdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abe0:	682f      	ldr	r7, [r5, #0]
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	d032      	beq.n	800ac4c <__sflush_r+0x98>
 800abe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	075a      	lsls	r2, r3, #29
 800abec:	d505      	bpl.n	800abfa <__sflush_r+0x46>
 800abee:	6863      	ldr	r3, [r4, #4]
 800abf0:	1ac0      	subs	r0, r0, r3
 800abf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abf4:	b10b      	cbz	r3, 800abfa <__sflush_r+0x46>
 800abf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abf8:	1ac0      	subs	r0, r0, r3
 800abfa:	2300      	movs	r3, #0
 800abfc:	4602      	mov	r2, r0
 800abfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac00:	6a21      	ldr	r1, [r4, #32]
 800ac02:	4628      	mov	r0, r5
 800ac04:	47b0      	blx	r6
 800ac06:	1c43      	adds	r3, r0, #1
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	d106      	bne.n	800ac1a <__sflush_r+0x66>
 800ac0c:	6829      	ldr	r1, [r5, #0]
 800ac0e:	291d      	cmp	r1, #29
 800ac10:	d82c      	bhi.n	800ac6c <__sflush_r+0xb8>
 800ac12:	4a2a      	ldr	r2, [pc, #168]	; (800acbc <__sflush_r+0x108>)
 800ac14:	40ca      	lsrs	r2, r1
 800ac16:	07d6      	lsls	r6, r2, #31
 800ac18:	d528      	bpl.n	800ac6c <__sflush_r+0xb8>
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	6062      	str	r2, [r4, #4]
 800ac1e:	04d9      	lsls	r1, r3, #19
 800ac20:	6922      	ldr	r2, [r4, #16]
 800ac22:	6022      	str	r2, [r4, #0]
 800ac24:	d504      	bpl.n	800ac30 <__sflush_r+0x7c>
 800ac26:	1c42      	adds	r2, r0, #1
 800ac28:	d101      	bne.n	800ac2e <__sflush_r+0x7a>
 800ac2a:	682b      	ldr	r3, [r5, #0]
 800ac2c:	b903      	cbnz	r3, 800ac30 <__sflush_r+0x7c>
 800ac2e:	6560      	str	r0, [r4, #84]	; 0x54
 800ac30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac32:	602f      	str	r7, [r5, #0]
 800ac34:	2900      	cmp	r1, #0
 800ac36:	d0ca      	beq.n	800abce <__sflush_r+0x1a>
 800ac38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac3c:	4299      	cmp	r1, r3
 800ac3e:	d002      	beq.n	800ac46 <__sflush_r+0x92>
 800ac40:	4628      	mov	r0, r5
 800ac42:	f000 f9d5 	bl	800aff0 <_free_r>
 800ac46:	2000      	movs	r0, #0
 800ac48:	6360      	str	r0, [r4, #52]	; 0x34
 800ac4a:	e7c1      	b.n	800abd0 <__sflush_r+0x1c>
 800ac4c:	6a21      	ldr	r1, [r4, #32]
 800ac4e:	2301      	movs	r3, #1
 800ac50:	4628      	mov	r0, r5
 800ac52:	47b0      	blx	r6
 800ac54:	1c41      	adds	r1, r0, #1
 800ac56:	d1c7      	bne.n	800abe8 <__sflush_r+0x34>
 800ac58:	682b      	ldr	r3, [r5, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0c4      	beq.n	800abe8 <__sflush_r+0x34>
 800ac5e:	2b1d      	cmp	r3, #29
 800ac60:	d001      	beq.n	800ac66 <__sflush_r+0xb2>
 800ac62:	2b16      	cmp	r3, #22
 800ac64:	d101      	bne.n	800ac6a <__sflush_r+0xb6>
 800ac66:	602f      	str	r7, [r5, #0]
 800ac68:	e7b1      	b.n	800abce <__sflush_r+0x1a>
 800ac6a:	89a3      	ldrh	r3, [r4, #12]
 800ac6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac70:	81a3      	strh	r3, [r4, #12]
 800ac72:	e7ad      	b.n	800abd0 <__sflush_r+0x1c>
 800ac74:	690f      	ldr	r7, [r1, #16]
 800ac76:	2f00      	cmp	r7, #0
 800ac78:	d0a9      	beq.n	800abce <__sflush_r+0x1a>
 800ac7a:	0793      	lsls	r3, r2, #30
 800ac7c:	680e      	ldr	r6, [r1, #0]
 800ac7e:	bf08      	it	eq
 800ac80:	694b      	ldreq	r3, [r1, #20]
 800ac82:	600f      	str	r7, [r1, #0]
 800ac84:	bf18      	it	ne
 800ac86:	2300      	movne	r3, #0
 800ac88:	eba6 0807 	sub.w	r8, r6, r7
 800ac8c:	608b      	str	r3, [r1, #8]
 800ac8e:	f1b8 0f00 	cmp.w	r8, #0
 800ac92:	dd9c      	ble.n	800abce <__sflush_r+0x1a>
 800ac94:	6a21      	ldr	r1, [r4, #32]
 800ac96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac98:	4643      	mov	r3, r8
 800ac9a:	463a      	mov	r2, r7
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	47b0      	blx	r6
 800aca0:	2800      	cmp	r0, #0
 800aca2:	dc06      	bgt.n	800acb2 <__sflush_r+0xfe>
 800aca4:	89a3      	ldrh	r3, [r4, #12]
 800aca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acaa:	81a3      	strh	r3, [r4, #12]
 800acac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acb0:	e78e      	b.n	800abd0 <__sflush_r+0x1c>
 800acb2:	4407      	add	r7, r0
 800acb4:	eba8 0800 	sub.w	r8, r8, r0
 800acb8:	e7e9      	b.n	800ac8e <__sflush_r+0xda>
 800acba:	bf00      	nop
 800acbc:	20400001 	.word	0x20400001

0800acc0 <_fflush_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	690b      	ldr	r3, [r1, #16]
 800acc4:	4605      	mov	r5, r0
 800acc6:	460c      	mov	r4, r1
 800acc8:	b913      	cbnz	r3, 800acd0 <_fflush_r+0x10>
 800acca:	2500      	movs	r5, #0
 800accc:	4628      	mov	r0, r5
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	b118      	cbz	r0, 800acda <_fflush_r+0x1a>
 800acd2:	6983      	ldr	r3, [r0, #24]
 800acd4:	b90b      	cbnz	r3, 800acda <_fflush_r+0x1a>
 800acd6:	f000 f887 	bl	800ade8 <__sinit>
 800acda:	4b14      	ldr	r3, [pc, #80]	; (800ad2c <_fflush_r+0x6c>)
 800acdc:	429c      	cmp	r4, r3
 800acde:	d11b      	bne.n	800ad18 <_fflush_r+0x58>
 800ace0:	686c      	ldr	r4, [r5, #4]
 800ace2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d0ef      	beq.n	800acca <_fflush_r+0xa>
 800acea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acec:	07d0      	lsls	r0, r2, #31
 800acee:	d404      	bmi.n	800acfa <_fflush_r+0x3a>
 800acf0:	0599      	lsls	r1, r3, #22
 800acf2:	d402      	bmi.n	800acfa <_fflush_r+0x3a>
 800acf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acf6:	f000 f915 	bl	800af24 <__retarget_lock_acquire_recursive>
 800acfa:	4628      	mov	r0, r5
 800acfc:	4621      	mov	r1, r4
 800acfe:	f7ff ff59 	bl	800abb4 <__sflush_r>
 800ad02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad04:	07da      	lsls	r2, r3, #31
 800ad06:	4605      	mov	r5, r0
 800ad08:	d4e0      	bmi.n	800accc <_fflush_r+0xc>
 800ad0a:	89a3      	ldrh	r3, [r4, #12]
 800ad0c:	059b      	lsls	r3, r3, #22
 800ad0e:	d4dd      	bmi.n	800accc <_fflush_r+0xc>
 800ad10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad12:	f000 f908 	bl	800af26 <__retarget_lock_release_recursive>
 800ad16:	e7d9      	b.n	800accc <_fflush_r+0xc>
 800ad18:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <_fflush_r+0x70>)
 800ad1a:	429c      	cmp	r4, r3
 800ad1c:	d101      	bne.n	800ad22 <_fflush_r+0x62>
 800ad1e:	68ac      	ldr	r4, [r5, #8]
 800ad20:	e7df      	b.n	800ace2 <_fflush_r+0x22>
 800ad22:	4b04      	ldr	r3, [pc, #16]	; (800ad34 <_fflush_r+0x74>)
 800ad24:	429c      	cmp	r4, r3
 800ad26:	bf08      	it	eq
 800ad28:	68ec      	ldreq	r4, [r5, #12]
 800ad2a:	e7da      	b.n	800ace2 <_fflush_r+0x22>
 800ad2c:	08013d18 	.word	0x08013d18
 800ad30:	08013d38 	.word	0x08013d38
 800ad34:	08013cf8 	.word	0x08013cf8

0800ad38 <std>:
 800ad38:	2300      	movs	r3, #0
 800ad3a:	b510      	push	{r4, lr}
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad46:	6083      	str	r3, [r0, #8]
 800ad48:	8181      	strh	r1, [r0, #12]
 800ad4a:	6643      	str	r3, [r0, #100]	; 0x64
 800ad4c:	81c2      	strh	r2, [r0, #14]
 800ad4e:	6183      	str	r3, [r0, #24]
 800ad50:	4619      	mov	r1, r3
 800ad52:	2208      	movs	r2, #8
 800ad54:	305c      	adds	r0, #92	; 0x5c
 800ad56:	f7ff fc4d 	bl	800a5f4 <memset>
 800ad5a:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <std+0x38>)
 800ad5c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad5e:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <std+0x3c>)
 800ad60:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad62:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <std+0x40>)
 800ad64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad66:	4b05      	ldr	r3, [pc, #20]	; (800ad7c <std+0x44>)
 800ad68:	6224      	str	r4, [r4, #32]
 800ad6a:	6323      	str	r3, [r4, #48]	; 0x30
 800ad6c:	bd10      	pop	{r4, pc}
 800ad6e:	bf00      	nop
 800ad70:	0800b741 	.word	0x0800b741
 800ad74:	0800b763 	.word	0x0800b763
 800ad78:	0800b79b 	.word	0x0800b79b
 800ad7c:	0800b7bf 	.word	0x0800b7bf

0800ad80 <_cleanup_r>:
 800ad80:	4901      	ldr	r1, [pc, #4]	; (800ad88 <_cleanup_r+0x8>)
 800ad82:	f000 b8af 	b.w	800aee4 <_fwalk_reent>
 800ad86:	bf00      	nop
 800ad88:	0800acc1 	.word	0x0800acc1

0800ad8c <__sfmoreglue>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	1e4a      	subs	r2, r1, #1
 800ad90:	2568      	movs	r5, #104	; 0x68
 800ad92:	4355      	muls	r5, r2
 800ad94:	460e      	mov	r6, r1
 800ad96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad9a:	f000 f979 	bl	800b090 <_malloc_r>
 800ad9e:	4604      	mov	r4, r0
 800ada0:	b140      	cbz	r0, 800adb4 <__sfmoreglue+0x28>
 800ada2:	2100      	movs	r1, #0
 800ada4:	e9c0 1600 	strd	r1, r6, [r0]
 800ada8:	300c      	adds	r0, #12
 800adaa:	60a0      	str	r0, [r4, #8]
 800adac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800adb0:	f7ff fc20 	bl	800a5f4 <memset>
 800adb4:	4620      	mov	r0, r4
 800adb6:	bd70      	pop	{r4, r5, r6, pc}

0800adb8 <__sfp_lock_acquire>:
 800adb8:	4801      	ldr	r0, [pc, #4]	; (800adc0 <__sfp_lock_acquire+0x8>)
 800adba:	f000 b8b3 	b.w	800af24 <__retarget_lock_acquire_recursive>
 800adbe:	bf00      	nop
 800adc0:	200000a8 	.word	0x200000a8

0800adc4 <__sfp_lock_release>:
 800adc4:	4801      	ldr	r0, [pc, #4]	; (800adcc <__sfp_lock_release+0x8>)
 800adc6:	f000 b8ae 	b.w	800af26 <__retarget_lock_release_recursive>
 800adca:	bf00      	nop
 800adcc:	200000a8 	.word	0x200000a8

0800add0 <__sinit_lock_acquire>:
 800add0:	4801      	ldr	r0, [pc, #4]	; (800add8 <__sinit_lock_acquire+0x8>)
 800add2:	f000 b8a7 	b.w	800af24 <__retarget_lock_acquire_recursive>
 800add6:	bf00      	nop
 800add8:	200000a3 	.word	0x200000a3

0800addc <__sinit_lock_release>:
 800addc:	4801      	ldr	r0, [pc, #4]	; (800ade4 <__sinit_lock_release+0x8>)
 800adde:	f000 b8a2 	b.w	800af26 <__retarget_lock_release_recursive>
 800ade2:	bf00      	nop
 800ade4:	200000a3 	.word	0x200000a3

0800ade8 <__sinit>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	4604      	mov	r4, r0
 800adec:	f7ff fff0 	bl	800add0 <__sinit_lock_acquire>
 800adf0:	69a3      	ldr	r3, [r4, #24]
 800adf2:	b11b      	cbz	r3, 800adfc <__sinit+0x14>
 800adf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adf8:	f7ff bff0 	b.w	800addc <__sinit_lock_release>
 800adfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae00:	6523      	str	r3, [r4, #80]	; 0x50
 800ae02:	4b13      	ldr	r3, [pc, #76]	; (800ae50 <__sinit+0x68>)
 800ae04:	4a13      	ldr	r2, [pc, #76]	; (800ae54 <__sinit+0x6c>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae0a:	42a3      	cmp	r3, r4
 800ae0c:	bf04      	itt	eq
 800ae0e:	2301      	moveq	r3, #1
 800ae10:	61a3      	streq	r3, [r4, #24]
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 f820 	bl	800ae58 <__sfp>
 800ae18:	6060      	str	r0, [r4, #4]
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 f81c 	bl	800ae58 <__sfp>
 800ae20:	60a0      	str	r0, [r4, #8]
 800ae22:	4620      	mov	r0, r4
 800ae24:	f000 f818 	bl	800ae58 <__sfp>
 800ae28:	2200      	movs	r2, #0
 800ae2a:	60e0      	str	r0, [r4, #12]
 800ae2c:	2104      	movs	r1, #4
 800ae2e:	6860      	ldr	r0, [r4, #4]
 800ae30:	f7ff ff82 	bl	800ad38 <std>
 800ae34:	68a0      	ldr	r0, [r4, #8]
 800ae36:	2201      	movs	r2, #1
 800ae38:	2109      	movs	r1, #9
 800ae3a:	f7ff ff7d 	bl	800ad38 <std>
 800ae3e:	68e0      	ldr	r0, [r4, #12]
 800ae40:	2202      	movs	r2, #2
 800ae42:	2112      	movs	r1, #18
 800ae44:	f7ff ff78 	bl	800ad38 <std>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	61a3      	str	r3, [r4, #24]
 800ae4c:	e7d2      	b.n	800adf4 <__sinit+0xc>
 800ae4e:	bf00      	nop
 800ae50:	08013cf4 	.word	0x08013cf4
 800ae54:	0800ad81 	.word	0x0800ad81

0800ae58 <__sfp>:
 800ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5a:	4607      	mov	r7, r0
 800ae5c:	f7ff ffac 	bl	800adb8 <__sfp_lock_acquire>
 800ae60:	4b1e      	ldr	r3, [pc, #120]	; (800aedc <__sfp+0x84>)
 800ae62:	681e      	ldr	r6, [r3, #0]
 800ae64:	69b3      	ldr	r3, [r6, #24]
 800ae66:	b913      	cbnz	r3, 800ae6e <__sfp+0x16>
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f7ff ffbd 	bl	800ade8 <__sinit>
 800ae6e:	3648      	adds	r6, #72	; 0x48
 800ae70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae74:	3b01      	subs	r3, #1
 800ae76:	d503      	bpl.n	800ae80 <__sfp+0x28>
 800ae78:	6833      	ldr	r3, [r6, #0]
 800ae7a:	b30b      	cbz	r3, 800aec0 <__sfp+0x68>
 800ae7c:	6836      	ldr	r6, [r6, #0]
 800ae7e:	e7f7      	b.n	800ae70 <__sfp+0x18>
 800ae80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae84:	b9d5      	cbnz	r5, 800aebc <__sfp+0x64>
 800ae86:	4b16      	ldr	r3, [pc, #88]	; (800aee0 <__sfp+0x88>)
 800ae88:	60e3      	str	r3, [r4, #12]
 800ae8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae8e:	6665      	str	r5, [r4, #100]	; 0x64
 800ae90:	f000 f847 	bl	800af22 <__retarget_lock_init_recursive>
 800ae94:	f7ff ff96 	bl	800adc4 <__sfp_lock_release>
 800ae98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aea0:	6025      	str	r5, [r4, #0]
 800aea2:	61a5      	str	r5, [r4, #24]
 800aea4:	2208      	movs	r2, #8
 800aea6:	4629      	mov	r1, r5
 800aea8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aeac:	f7ff fba2 	bl	800a5f4 <memset>
 800aeb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aeb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aeb8:	4620      	mov	r0, r4
 800aeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aebc:	3468      	adds	r4, #104	; 0x68
 800aebe:	e7d9      	b.n	800ae74 <__sfp+0x1c>
 800aec0:	2104      	movs	r1, #4
 800aec2:	4638      	mov	r0, r7
 800aec4:	f7ff ff62 	bl	800ad8c <__sfmoreglue>
 800aec8:	4604      	mov	r4, r0
 800aeca:	6030      	str	r0, [r6, #0]
 800aecc:	2800      	cmp	r0, #0
 800aece:	d1d5      	bne.n	800ae7c <__sfp+0x24>
 800aed0:	f7ff ff78 	bl	800adc4 <__sfp_lock_release>
 800aed4:	230c      	movs	r3, #12
 800aed6:	603b      	str	r3, [r7, #0]
 800aed8:	e7ee      	b.n	800aeb8 <__sfp+0x60>
 800aeda:	bf00      	nop
 800aedc:	08013cf4 	.word	0x08013cf4
 800aee0:	ffff0001 	.word	0xffff0001

0800aee4 <_fwalk_reent>:
 800aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee8:	4606      	mov	r6, r0
 800aeea:	4688      	mov	r8, r1
 800aeec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aef0:	2700      	movs	r7, #0
 800aef2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aef6:	f1b9 0901 	subs.w	r9, r9, #1
 800aefa:	d505      	bpl.n	800af08 <_fwalk_reent+0x24>
 800aefc:	6824      	ldr	r4, [r4, #0]
 800aefe:	2c00      	cmp	r4, #0
 800af00:	d1f7      	bne.n	800aef2 <_fwalk_reent+0xe>
 800af02:	4638      	mov	r0, r7
 800af04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af08:	89ab      	ldrh	r3, [r5, #12]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d907      	bls.n	800af1e <_fwalk_reent+0x3a>
 800af0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af12:	3301      	adds	r3, #1
 800af14:	d003      	beq.n	800af1e <_fwalk_reent+0x3a>
 800af16:	4629      	mov	r1, r5
 800af18:	4630      	mov	r0, r6
 800af1a:	47c0      	blx	r8
 800af1c:	4307      	orrs	r7, r0
 800af1e:	3568      	adds	r5, #104	; 0x68
 800af20:	e7e9      	b.n	800aef6 <_fwalk_reent+0x12>

0800af22 <__retarget_lock_init_recursive>:
 800af22:	4770      	bx	lr

0800af24 <__retarget_lock_acquire_recursive>:
 800af24:	4770      	bx	lr

0800af26 <__retarget_lock_release_recursive>:
 800af26:	4770      	bx	lr

0800af28 <__swhatbuf_r>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	460e      	mov	r6, r1
 800af2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af30:	2900      	cmp	r1, #0
 800af32:	b096      	sub	sp, #88	; 0x58
 800af34:	4614      	mov	r4, r2
 800af36:	461d      	mov	r5, r3
 800af38:	da07      	bge.n	800af4a <__swhatbuf_r+0x22>
 800af3a:	2300      	movs	r3, #0
 800af3c:	602b      	str	r3, [r5, #0]
 800af3e:	89b3      	ldrh	r3, [r6, #12]
 800af40:	061a      	lsls	r2, r3, #24
 800af42:	d410      	bmi.n	800af66 <__swhatbuf_r+0x3e>
 800af44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af48:	e00e      	b.n	800af68 <__swhatbuf_r+0x40>
 800af4a:	466a      	mov	r2, sp
 800af4c:	f000 fc5e 	bl	800b80c <_fstat_r>
 800af50:	2800      	cmp	r0, #0
 800af52:	dbf2      	blt.n	800af3a <__swhatbuf_r+0x12>
 800af54:	9a01      	ldr	r2, [sp, #4]
 800af56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af5e:	425a      	negs	r2, r3
 800af60:	415a      	adcs	r2, r3
 800af62:	602a      	str	r2, [r5, #0]
 800af64:	e7ee      	b.n	800af44 <__swhatbuf_r+0x1c>
 800af66:	2340      	movs	r3, #64	; 0x40
 800af68:	2000      	movs	r0, #0
 800af6a:	6023      	str	r3, [r4, #0]
 800af6c:	b016      	add	sp, #88	; 0x58
 800af6e:	bd70      	pop	{r4, r5, r6, pc}

0800af70 <__smakebuf_r>:
 800af70:	898b      	ldrh	r3, [r1, #12]
 800af72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af74:	079d      	lsls	r5, r3, #30
 800af76:	4606      	mov	r6, r0
 800af78:	460c      	mov	r4, r1
 800af7a:	d507      	bpl.n	800af8c <__smakebuf_r+0x1c>
 800af7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	6123      	str	r3, [r4, #16]
 800af84:	2301      	movs	r3, #1
 800af86:	6163      	str	r3, [r4, #20]
 800af88:	b002      	add	sp, #8
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	ab01      	add	r3, sp, #4
 800af8e:	466a      	mov	r2, sp
 800af90:	f7ff ffca 	bl	800af28 <__swhatbuf_r>
 800af94:	9900      	ldr	r1, [sp, #0]
 800af96:	4605      	mov	r5, r0
 800af98:	4630      	mov	r0, r6
 800af9a:	f000 f879 	bl	800b090 <_malloc_r>
 800af9e:	b948      	cbnz	r0, 800afb4 <__smakebuf_r+0x44>
 800afa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa4:	059a      	lsls	r2, r3, #22
 800afa6:	d4ef      	bmi.n	800af88 <__smakebuf_r+0x18>
 800afa8:	f023 0303 	bic.w	r3, r3, #3
 800afac:	f043 0302 	orr.w	r3, r3, #2
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	e7e3      	b.n	800af7c <__smakebuf_r+0xc>
 800afb4:	4b0d      	ldr	r3, [pc, #52]	; (800afec <__smakebuf_r+0x7c>)
 800afb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800afb8:	89a3      	ldrh	r3, [r4, #12]
 800afba:	6020      	str	r0, [r4, #0]
 800afbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	9b00      	ldr	r3, [sp, #0]
 800afc4:	6163      	str	r3, [r4, #20]
 800afc6:	9b01      	ldr	r3, [sp, #4]
 800afc8:	6120      	str	r0, [r4, #16]
 800afca:	b15b      	cbz	r3, 800afe4 <__smakebuf_r+0x74>
 800afcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd0:	4630      	mov	r0, r6
 800afd2:	f000 fc2d 	bl	800b830 <_isatty_r>
 800afd6:	b128      	cbz	r0, 800afe4 <__smakebuf_r+0x74>
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	f043 0301 	orr.w	r3, r3, #1
 800afe2:	81a3      	strh	r3, [r4, #12]
 800afe4:	89a0      	ldrh	r0, [r4, #12]
 800afe6:	4305      	orrs	r5, r0
 800afe8:	81a5      	strh	r5, [r4, #12]
 800afea:	e7cd      	b.n	800af88 <__smakebuf_r+0x18>
 800afec:	0800ad81 	.word	0x0800ad81

0800aff0 <_free_r>:
 800aff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aff2:	2900      	cmp	r1, #0
 800aff4:	d048      	beq.n	800b088 <_free_r+0x98>
 800aff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800affa:	9001      	str	r0, [sp, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f1a1 0404 	sub.w	r4, r1, #4
 800b002:	bfb8      	it	lt
 800b004:	18e4      	addlt	r4, r4, r3
 800b006:	f000 fc35 	bl	800b874 <__malloc_lock>
 800b00a:	4a20      	ldr	r2, [pc, #128]	; (800b08c <_free_r+0x9c>)
 800b00c:	9801      	ldr	r0, [sp, #4]
 800b00e:	6813      	ldr	r3, [r2, #0]
 800b010:	4615      	mov	r5, r2
 800b012:	b933      	cbnz	r3, 800b022 <_free_r+0x32>
 800b014:	6063      	str	r3, [r4, #4]
 800b016:	6014      	str	r4, [r2, #0]
 800b018:	b003      	add	sp, #12
 800b01a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b01e:	f000 bc2f 	b.w	800b880 <__malloc_unlock>
 800b022:	42a3      	cmp	r3, r4
 800b024:	d90b      	bls.n	800b03e <_free_r+0x4e>
 800b026:	6821      	ldr	r1, [r4, #0]
 800b028:	1862      	adds	r2, r4, r1
 800b02a:	4293      	cmp	r3, r2
 800b02c:	bf04      	itt	eq
 800b02e:	681a      	ldreq	r2, [r3, #0]
 800b030:	685b      	ldreq	r3, [r3, #4]
 800b032:	6063      	str	r3, [r4, #4]
 800b034:	bf04      	itt	eq
 800b036:	1852      	addeq	r2, r2, r1
 800b038:	6022      	streq	r2, [r4, #0]
 800b03a:	602c      	str	r4, [r5, #0]
 800b03c:	e7ec      	b.n	800b018 <_free_r+0x28>
 800b03e:	461a      	mov	r2, r3
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	b10b      	cbz	r3, 800b048 <_free_r+0x58>
 800b044:	42a3      	cmp	r3, r4
 800b046:	d9fa      	bls.n	800b03e <_free_r+0x4e>
 800b048:	6811      	ldr	r1, [r2, #0]
 800b04a:	1855      	adds	r5, r2, r1
 800b04c:	42a5      	cmp	r5, r4
 800b04e:	d10b      	bne.n	800b068 <_free_r+0x78>
 800b050:	6824      	ldr	r4, [r4, #0]
 800b052:	4421      	add	r1, r4
 800b054:	1854      	adds	r4, r2, r1
 800b056:	42a3      	cmp	r3, r4
 800b058:	6011      	str	r1, [r2, #0]
 800b05a:	d1dd      	bne.n	800b018 <_free_r+0x28>
 800b05c:	681c      	ldr	r4, [r3, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	6053      	str	r3, [r2, #4]
 800b062:	4421      	add	r1, r4
 800b064:	6011      	str	r1, [r2, #0]
 800b066:	e7d7      	b.n	800b018 <_free_r+0x28>
 800b068:	d902      	bls.n	800b070 <_free_r+0x80>
 800b06a:	230c      	movs	r3, #12
 800b06c:	6003      	str	r3, [r0, #0]
 800b06e:	e7d3      	b.n	800b018 <_free_r+0x28>
 800b070:	6825      	ldr	r5, [r4, #0]
 800b072:	1961      	adds	r1, r4, r5
 800b074:	428b      	cmp	r3, r1
 800b076:	bf04      	itt	eq
 800b078:	6819      	ldreq	r1, [r3, #0]
 800b07a:	685b      	ldreq	r3, [r3, #4]
 800b07c:	6063      	str	r3, [r4, #4]
 800b07e:	bf04      	itt	eq
 800b080:	1949      	addeq	r1, r1, r5
 800b082:	6021      	streq	r1, [r4, #0]
 800b084:	6054      	str	r4, [r2, #4]
 800b086:	e7c7      	b.n	800b018 <_free_r+0x28>
 800b088:	b003      	add	sp, #12
 800b08a:	bd30      	pop	{r4, r5, pc}
 800b08c:	20000094 	.word	0x20000094

0800b090 <_malloc_r>:
 800b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b092:	1ccd      	adds	r5, r1, #3
 800b094:	f025 0503 	bic.w	r5, r5, #3
 800b098:	3508      	adds	r5, #8
 800b09a:	2d0c      	cmp	r5, #12
 800b09c:	bf38      	it	cc
 800b09e:	250c      	movcc	r5, #12
 800b0a0:	2d00      	cmp	r5, #0
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	db01      	blt.n	800b0aa <_malloc_r+0x1a>
 800b0a6:	42a9      	cmp	r1, r5
 800b0a8:	d903      	bls.n	800b0b2 <_malloc_r+0x22>
 800b0aa:	230c      	movs	r3, #12
 800b0ac:	6033      	str	r3, [r6, #0]
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b2:	f000 fbdf 	bl	800b874 <__malloc_lock>
 800b0b6:	4921      	ldr	r1, [pc, #132]	; (800b13c <_malloc_r+0xac>)
 800b0b8:	680a      	ldr	r2, [r1, #0]
 800b0ba:	4614      	mov	r4, r2
 800b0bc:	b99c      	cbnz	r4, 800b0e6 <_malloc_r+0x56>
 800b0be:	4f20      	ldr	r7, [pc, #128]	; (800b140 <_malloc_r+0xb0>)
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	b923      	cbnz	r3, 800b0ce <_malloc_r+0x3e>
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f000 fb2a 	bl	800b720 <_sbrk_r>
 800b0cc:	6038      	str	r0, [r7, #0]
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f000 fb25 	bl	800b720 <_sbrk_r>
 800b0d6:	1c43      	adds	r3, r0, #1
 800b0d8:	d123      	bne.n	800b122 <_malloc_r+0x92>
 800b0da:	230c      	movs	r3, #12
 800b0dc:	6033      	str	r3, [r6, #0]
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f000 fbce 	bl	800b880 <__malloc_unlock>
 800b0e4:	e7e3      	b.n	800b0ae <_malloc_r+0x1e>
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	1b5b      	subs	r3, r3, r5
 800b0ea:	d417      	bmi.n	800b11c <_malloc_r+0x8c>
 800b0ec:	2b0b      	cmp	r3, #11
 800b0ee:	d903      	bls.n	800b0f8 <_malloc_r+0x68>
 800b0f0:	6023      	str	r3, [r4, #0]
 800b0f2:	441c      	add	r4, r3
 800b0f4:	6025      	str	r5, [r4, #0]
 800b0f6:	e004      	b.n	800b102 <_malloc_r+0x72>
 800b0f8:	6863      	ldr	r3, [r4, #4]
 800b0fa:	42a2      	cmp	r2, r4
 800b0fc:	bf0c      	ite	eq
 800b0fe:	600b      	streq	r3, [r1, #0]
 800b100:	6053      	strne	r3, [r2, #4]
 800b102:	4630      	mov	r0, r6
 800b104:	f000 fbbc 	bl	800b880 <__malloc_unlock>
 800b108:	f104 000b 	add.w	r0, r4, #11
 800b10c:	1d23      	adds	r3, r4, #4
 800b10e:	f020 0007 	bic.w	r0, r0, #7
 800b112:	1ac2      	subs	r2, r0, r3
 800b114:	d0cc      	beq.n	800b0b0 <_malloc_r+0x20>
 800b116:	1a1b      	subs	r3, r3, r0
 800b118:	50a3      	str	r3, [r4, r2]
 800b11a:	e7c9      	b.n	800b0b0 <_malloc_r+0x20>
 800b11c:	4622      	mov	r2, r4
 800b11e:	6864      	ldr	r4, [r4, #4]
 800b120:	e7cc      	b.n	800b0bc <_malloc_r+0x2c>
 800b122:	1cc4      	adds	r4, r0, #3
 800b124:	f024 0403 	bic.w	r4, r4, #3
 800b128:	42a0      	cmp	r0, r4
 800b12a:	d0e3      	beq.n	800b0f4 <_malloc_r+0x64>
 800b12c:	1a21      	subs	r1, r4, r0
 800b12e:	4630      	mov	r0, r6
 800b130:	f000 faf6 	bl	800b720 <_sbrk_r>
 800b134:	3001      	adds	r0, #1
 800b136:	d1dd      	bne.n	800b0f4 <_malloc_r+0x64>
 800b138:	e7cf      	b.n	800b0da <_malloc_r+0x4a>
 800b13a:	bf00      	nop
 800b13c:	20000094 	.word	0x20000094
 800b140:	20000098 	.word	0x20000098

0800b144 <__sfputc_r>:
 800b144:	6893      	ldr	r3, [r2, #8]
 800b146:	3b01      	subs	r3, #1
 800b148:	2b00      	cmp	r3, #0
 800b14a:	b410      	push	{r4}
 800b14c:	6093      	str	r3, [r2, #8]
 800b14e:	da08      	bge.n	800b162 <__sfputc_r+0x1e>
 800b150:	6994      	ldr	r4, [r2, #24]
 800b152:	42a3      	cmp	r3, r4
 800b154:	db01      	blt.n	800b15a <__sfputc_r+0x16>
 800b156:	290a      	cmp	r1, #10
 800b158:	d103      	bne.n	800b162 <__sfputc_r+0x1e>
 800b15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b15e:	f7ff bc69 	b.w	800aa34 <__swbuf_r>
 800b162:	6813      	ldr	r3, [r2, #0]
 800b164:	1c58      	adds	r0, r3, #1
 800b166:	6010      	str	r0, [r2, #0]
 800b168:	7019      	strb	r1, [r3, #0]
 800b16a:	4608      	mov	r0, r1
 800b16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <__sfputs_r>:
 800b172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b174:	4606      	mov	r6, r0
 800b176:	460f      	mov	r7, r1
 800b178:	4614      	mov	r4, r2
 800b17a:	18d5      	adds	r5, r2, r3
 800b17c:	42ac      	cmp	r4, r5
 800b17e:	d101      	bne.n	800b184 <__sfputs_r+0x12>
 800b180:	2000      	movs	r0, #0
 800b182:	e007      	b.n	800b194 <__sfputs_r+0x22>
 800b184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b188:	463a      	mov	r2, r7
 800b18a:	4630      	mov	r0, r6
 800b18c:	f7ff ffda 	bl	800b144 <__sfputc_r>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d1f3      	bne.n	800b17c <__sfputs_r+0xa>
 800b194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b198 <_vfiprintf_r>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	460d      	mov	r5, r1
 800b19e:	b09d      	sub	sp, #116	; 0x74
 800b1a0:	4614      	mov	r4, r2
 800b1a2:	4698      	mov	r8, r3
 800b1a4:	4606      	mov	r6, r0
 800b1a6:	b118      	cbz	r0, 800b1b0 <_vfiprintf_r+0x18>
 800b1a8:	6983      	ldr	r3, [r0, #24]
 800b1aa:	b90b      	cbnz	r3, 800b1b0 <_vfiprintf_r+0x18>
 800b1ac:	f7ff fe1c 	bl	800ade8 <__sinit>
 800b1b0:	4b89      	ldr	r3, [pc, #548]	; (800b3d8 <_vfiprintf_r+0x240>)
 800b1b2:	429d      	cmp	r5, r3
 800b1b4:	d11b      	bne.n	800b1ee <_vfiprintf_r+0x56>
 800b1b6:	6875      	ldr	r5, [r6, #4]
 800b1b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ba:	07d9      	lsls	r1, r3, #31
 800b1bc:	d405      	bmi.n	800b1ca <_vfiprintf_r+0x32>
 800b1be:	89ab      	ldrh	r3, [r5, #12]
 800b1c0:	059a      	lsls	r2, r3, #22
 800b1c2:	d402      	bmi.n	800b1ca <_vfiprintf_r+0x32>
 800b1c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1c6:	f7ff fead 	bl	800af24 <__retarget_lock_acquire_recursive>
 800b1ca:	89ab      	ldrh	r3, [r5, #12]
 800b1cc:	071b      	lsls	r3, r3, #28
 800b1ce:	d501      	bpl.n	800b1d4 <_vfiprintf_r+0x3c>
 800b1d0:	692b      	ldr	r3, [r5, #16]
 800b1d2:	b9eb      	cbnz	r3, 800b210 <_vfiprintf_r+0x78>
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f7ff fc7e 	bl	800aad8 <__swsetup_r>
 800b1dc:	b1c0      	cbz	r0, 800b210 <_vfiprintf_r+0x78>
 800b1de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1e0:	07dc      	lsls	r4, r3, #31
 800b1e2:	d50e      	bpl.n	800b202 <_vfiprintf_r+0x6a>
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1e8:	b01d      	add	sp, #116	; 0x74
 800b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ee:	4b7b      	ldr	r3, [pc, #492]	; (800b3dc <_vfiprintf_r+0x244>)
 800b1f0:	429d      	cmp	r5, r3
 800b1f2:	d101      	bne.n	800b1f8 <_vfiprintf_r+0x60>
 800b1f4:	68b5      	ldr	r5, [r6, #8]
 800b1f6:	e7df      	b.n	800b1b8 <_vfiprintf_r+0x20>
 800b1f8:	4b79      	ldr	r3, [pc, #484]	; (800b3e0 <_vfiprintf_r+0x248>)
 800b1fa:	429d      	cmp	r5, r3
 800b1fc:	bf08      	it	eq
 800b1fe:	68f5      	ldreq	r5, [r6, #12]
 800b200:	e7da      	b.n	800b1b8 <_vfiprintf_r+0x20>
 800b202:	89ab      	ldrh	r3, [r5, #12]
 800b204:	0598      	lsls	r0, r3, #22
 800b206:	d4ed      	bmi.n	800b1e4 <_vfiprintf_r+0x4c>
 800b208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b20a:	f7ff fe8c 	bl	800af26 <__retarget_lock_release_recursive>
 800b20e:	e7e9      	b.n	800b1e4 <_vfiprintf_r+0x4c>
 800b210:	2300      	movs	r3, #0
 800b212:	9309      	str	r3, [sp, #36]	; 0x24
 800b214:	2320      	movs	r3, #32
 800b216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b21e:	2330      	movs	r3, #48	; 0x30
 800b220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3e4 <_vfiprintf_r+0x24c>
 800b224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b228:	f04f 0901 	mov.w	r9, #1
 800b22c:	4623      	mov	r3, r4
 800b22e:	469a      	mov	sl, r3
 800b230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b234:	b10a      	cbz	r2, 800b23a <_vfiprintf_r+0xa2>
 800b236:	2a25      	cmp	r2, #37	; 0x25
 800b238:	d1f9      	bne.n	800b22e <_vfiprintf_r+0x96>
 800b23a:	ebba 0b04 	subs.w	fp, sl, r4
 800b23e:	d00b      	beq.n	800b258 <_vfiprintf_r+0xc0>
 800b240:	465b      	mov	r3, fp
 800b242:	4622      	mov	r2, r4
 800b244:	4629      	mov	r1, r5
 800b246:	4630      	mov	r0, r6
 800b248:	f7ff ff93 	bl	800b172 <__sfputs_r>
 800b24c:	3001      	adds	r0, #1
 800b24e:	f000 80aa 	beq.w	800b3a6 <_vfiprintf_r+0x20e>
 800b252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b254:	445a      	add	r2, fp
 800b256:	9209      	str	r2, [sp, #36]	; 0x24
 800b258:	f89a 3000 	ldrb.w	r3, [sl]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 80a2 	beq.w	800b3a6 <_vfiprintf_r+0x20e>
 800b262:	2300      	movs	r3, #0
 800b264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b26c:	f10a 0a01 	add.w	sl, sl, #1
 800b270:	9304      	str	r3, [sp, #16]
 800b272:	9307      	str	r3, [sp, #28]
 800b274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b278:	931a      	str	r3, [sp, #104]	; 0x68
 800b27a:	4654      	mov	r4, sl
 800b27c:	2205      	movs	r2, #5
 800b27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b282:	4858      	ldr	r0, [pc, #352]	; (800b3e4 <_vfiprintf_r+0x24c>)
 800b284:	f7f4 ffac 	bl	80001e0 <memchr>
 800b288:	9a04      	ldr	r2, [sp, #16]
 800b28a:	b9d8      	cbnz	r0, 800b2c4 <_vfiprintf_r+0x12c>
 800b28c:	06d1      	lsls	r1, r2, #27
 800b28e:	bf44      	itt	mi
 800b290:	2320      	movmi	r3, #32
 800b292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b296:	0713      	lsls	r3, r2, #28
 800b298:	bf44      	itt	mi
 800b29a:	232b      	movmi	r3, #43	; 0x2b
 800b29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2a6:	d015      	beq.n	800b2d4 <_vfiprintf_r+0x13c>
 800b2a8:	9a07      	ldr	r2, [sp, #28]
 800b2aa:	4654      	mov	r4, sl
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	f04f 0c0a 	mov.w	ip, #10
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2b8:	3b30      	subs	r3, #48	; 0x30
 800b2ba:	2b09      	cmp	r3, #9
 800b2bc:	d94e      	bls.n	800b35c <_vfiprintf_r+0x1c4>
 800b2be:	b1b0      	cbz	r0, 800b2ee <_vfiprintf_r+0x156>
 800b2c0:	9207      	str	r2, [sp, #28]
 800b2c2:	e014      	b.n	800b2ee <_vfiprintf_r+0x156>
 800b2c4:	eba0 0308 	sub.w	r3, r0, r8
 800b2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	46a2      	mov	sl, r4
 800b2d2:	e7d2      	b.n	800b27a <_vfiprintf_r+0xe2>
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	1d19      	adds	r1, r3, #4
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	9103      	str	r1, [sp, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	bfbb      	ittet	lt
 800b2e0:	425b      	neglt	r3, r3
 800b2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b2e6:	9307      	strge	r3, [sp, #28]
 800b2e8:	9307      	strlt	r3, [sp, #28]
 800b2ea:	bfb8      	it	lt
 800b2ec:	9204      	strlt	r2, [sp, #16]
 800b2ee:	7823      	ldrb	r3, [r4, #0]
 800b2f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2f2:	d10c      	bne.n	800b30e <_vfiprintf_r+0x176>
 800b2f4:	7863      	ldrb	r3, [r4, #1]
 800b2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2f8:	d135      	bne.n	800b366 <_vfiprintf_r+0x1ce>
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	1d1a      	adds	r2, r3, #4
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	9203      	str	r2, [sp, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	bfb8      	it	lt
 800b306:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b30a:	3402      	adds	r4, #2
 800b30c:	9305      	str	r3, [sp, #20]
 800b30e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3f4 <_vfiprintf_r+0x25c>
 800b312:	7821      	ldrb	r1, [r4, #0]
 800b314:	2203      	movs	r2, #3
 800b316:	4650      	mov	r0, sl
 800b318:	f7f4 ff62 	bl	80001e0 <memchr>
 800b31c:	b140      	cbz	r0, 800b330 <_vfiprintf_r+0x198>
 800b31e:	2340      	movs	r3, #64	; 0x40
 800b320:	eba0 000a 	sub.w	r0, r0, sl
 800b324:	fa03 f000 	lsl.w	r0, r3, r0
 800b328:	9b04      	ldr	r3, [sp, #16]
 800b32a:	4303      	orrs	r3, r0
 800b32c:	3401      	adds	r4, #1
 800b32e:	9304      	str	r3, [sp, #16]
 800b330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b334:	482c      	ldr	r0, [pc, #176]	; (800b3e8 <_vfiprintf_r+0x250>)
 800b336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b33a:	2206      	movs	r2, #6
 800b33c:	f7f4 ff50 	bl	80001e0 <memchr>
 800b340:	2800      	cmp	r0, #0
 800b342:	d03f      	beq.n	800b3c4 <_vfiprintf_r+0x22c>
 800b344:	4b29      	ldr	r3, [pc, #164]	; (800b3ec <_vfiprintf_r+0x254>)
 800b346:	bb1b      	cbnz	r3, 800b390 <_vfiprintf_r+0x1f8>
 800b348:	9b03      	ldr	r3, [sp, #12]
 800b34a:	3307      	adds	r3, #7
 800b34c:	f023 0307 	bic.w	r3, r3, #7
 800b350:	3308      	adds	r3, #8
 800b352:	9303      	str	r3, [sp, #12]
 800b354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b356:	443b      	add	r3, r7
 800b358:	9309      	str	r3, [sp, #36]	; 0x24
 800b35a:	e767      	b.n	800b22c <_vfiprintf_r+0x94>
 800b35c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b360:	460c      	mov	r4, r1
 800b362:	2001      	movs	r0, #1
 800b364:	e7a5      	b.n	800b2b2 <_vfiprintf_r+0x11a>
 800b366:	2300      	movs	r3, #0
 800b368:	3401      	adds	r4, #1
 800b36a:	9305      	str	r3, [sp, #20]
 800b36c:	4619      	mov	r1, r3
 800b36e:	f04f 0c0a 	mov.w	ip, #10
 800b372:	4620      	mov	r0, r4
 800b374:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b378:	3a30      	subs	r2, #48	; 0x30
 800b37a:	2a09      	cmp	r2, #9
 800b37c:	d903      	bls.n	800b386 <_vfiprintf_r+0x1ee>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d0c5      	beq.n	800b30e <_vfiprintf_r+0x176>
 800b382:	9105      	str	r1, [sp, #20]
 800b384:	e7c3      	b.n	800b30e <_vfiprintf_r+0x176>
 800b386:	fb0c 2101 	mla	r1, ip, r1, r2
 800b38a:	4604      	mov	r4, r0
 800b38c:	2301      	movs	r3, #1
 800b38e:	e7f0      	b.n	800b372 <_vfiprintf_r+0x1da>
 800b390:	ab03      	add	r3, sp, #12
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	462a      	mov	r2, r5
 800b396:	4b16      	ldr	r3, [pc, #88]	; (800b3f0 <_vfiprintf_r+0x258>)
 800b398:	a904      	add	r1, sp, #16
 800b39a:	4630      	mov	r0, r6
 800b39c:	f3af 8000 	nop.w
 800b3a0:	4607      	mov	r7, r0
 800b3a2:	1c78      	adds	r0, r7, #1
 800b3a4:	d1d6      	bne.n	800b354 <_vfiprintf_r+0x1bc>
 800b3a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3a8:	07d9      	lsls	r1, r3, #31
 800b3aa:	d405      	bmi.n	800b3b8 <_vfiprintf_r+0x220>
 800b3ac:	89ab      	ldrh	r3, [r5, #12]
 800b3ae:	059a      	lsls	r2, r3, #22
 800b3b0:	d402      	bmi.n	800b3b8 <_vfiprintf_r+0x220>
 800b3b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3b4:	f7ff fdb7 	bl	800af26 <__retarget_lock_release_recursive>
 800b3b8:	89ab      	ldrh	r3, [r5, #12]
 800b3ba:	065b      	lsls	r3, r3, #25
 800b3bc:	f53f af12 	bmi.w	800b1e4 <_vfiprintf_r+0x4c>
 800b3c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3c2:	e711      	b.n	800b1e8 <_vfiprintf_r+0x50>
 800b3c4:	ab03      	add	r3, sp, #12
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	462a      	mov	r2, r5
 800b3ca:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <_vfiprintf_r+0x258>)
 800b3cc:	a904      	add	r1, sp, #16
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f000 f880 	bl	800b4d4 <_printf_i>
 800b3d4:	e7e4      	b.n	800b3a0 <_vfiprintf_r+0x208>
 800b3d6:	bf00      	nop
 800b3d8:	08013d18 	.word	0x08013d18
 800b3dc:	08013d38 	.word	0x08013d38
 800b3e0:	08013cf8 	.word	0x08013cf8
 800b3e4:	08013d58 	.word	0x08013d58
 800b3e8:	08013d62 	.word	0x08013d62
 800b3ec:	00000000 	.word	0x00000000
 800b3f0:	0800b173 	.word	0x0800b173
 800b3f4:	08013d5e 	.word	0x08013d5e

0800b3f8 <_printf_common>:
 800b3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3fc:	4616      	mov	r6, r2
 800b3fe:	4699      	mov	r9, r3
 800b400:	688a      	ldr	r2, [r1, #8]
 800b402:	690b      	ldr	r3, [r1, #16]
 800b404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b408:	4293      	cmp	r3, r2
 800b40a:	bfb8      	it	lt
 800b40c:	4613      	movlt	r3, r2
 800b40e:	6033      	str	r3, [r6, #0]
 800b410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b414:	4607      	mov	r7, r0
 800b416:	460c      	mov	r4, r1
 800b418:	b10a      	cbz	r2, 800b41e <_printf_common+0x26>
 800b41a:	3301      	adds	r3, #1
 800b41c:	6033      	str	r3, [r6, #0]
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	0699      	lsls	r1, r3, #26
 800b422:	bf42      	ittt	mi
 800b424:	6833      	ldrmi	r3, [r6, #0]
 800b426:	3302      	addmi	r3, #2
 800b428:	6033      	strmi	r3, [r6, #0]
 800b42a:	6825      	ldr	r5, [r4, #0]
 800b42c:	f015 0506 	ands.w	r5, r5, #6
 800b430:	d106      	bne.n	800b440 <_printf_common+0x48>
 800b432:	f104 0a19 	add.w	sl, r4, #25
 800b436:	68e3      	ldr	r3, [r4, #12]
 800b438:	6832      	ldr	r2, [r6, #0]
 800b43a:	1a9b      	subs	r3, r3, r2
 800b43c:	42ab      	cmp	r3, r5
 800b43e:	dc26      	bgt.n	800b48e <_printf_common+0x96>
 800b440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b444:	1e13      	subs	r3, r2, #0
 800b446:	6822      	ldr	r2, [r4, #0]
 800b448:	bf18      	it	ne
 800b44a:	2301      	movne	r3, #1
 800b44c:	0692      	lsls	r2, r2, #26
 800b44e:	d42b      	bmi.n	800b4a8 <_printf_common+0xb0>
 800b450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b454:	4649      	mov	r1, r9
 800b456:	4638      	mov	r0, r7
 800b458:	47c0      	blx	r8
 800b45a:	3001      	adds	r0, #1
 800b45c:	d01e      	beq.n	800b49c <_printf_common+0xa4>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	68e5      	ldr	r5, [r4, #12]
 800b462:	6832      	ldr	r2, [r6, #0]
 800b464:	f003 0306 	and.w	r3, r3, #6
 800b468:	2b04      	cmp	r3, #4
 800b46a:	bf08      	it	eq
 800b46c:	1aad      	subeq	r5, r5, r2
 800b46e:	68a3      	ldr	r3, [r4, #8]
 800b470:	6922      	ldr	r2, [r4, #16]
 800b472:	bf0c      	ite	eq
 800b474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b478:	2500      	movne	r5, #0
 800b47a:	4293      	cmp	r3, r2
 800b47c:	bfc4      	itt	gt
 800b47e:	1a9b      	subgt	r3, r3, r2
 800b480:	18ed      	addgt	r5, r5, r3
 800b482:	2600      	movs	r6, #0
 800b484:	341a      	adds	r4, #26
 800b486:	42b5      	cmp	r5, r6
 800b488:	d11a      	bne.n	800b4c0 <_printf_common+0xc8>
 800b48a:	2000      	movs	r0, #0
 800b48c:	e008      	b.n	800b4a0 <_printf_common+0xa8>
 800b48e:	2301      	movs	r3, #1
 800b490:	4652      	mov	r2, sl
 800b492:	4649      	mov	r1, r9
 800b494:	4638      	mov	r0, r7
 800b496:	47c0      	blx	r8
 800b498:	3001      	adds	r0, #1
 800b49a:	d103      	bne.n	800b4a4 <_printf_common+0xac>
 800b49c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a4:	3501      	adds	r5, #1
 800b4a6:	e7c6      	b.n	800b436 <_printf_common+0x3e>
 800b4a8:	18e1      	adds	r1, r4, r3
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	2030      	movs	r0, #48	; 0x30
 800b4ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4b2:	4422      	add	r2, r4
 800b4b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4bc:	3302      	adds	r3, #2
 800b4be:	e7c7      	b.n	800b450 <_printf_common+0x58>
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	47c0      	blx	r8
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	d0e6      	beq.n	800b49c <_printf_common+0xa4>
 800b4ce:	3601      	adds	r6, #1
 800b4d0:	e7d9      	b.n	800b486 <_printf_common+0x8e>
	...

0800b4d4 <_printf_i>:
 800b4d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d8:	460c      	mov	r4, r1
 800b4da:	4691      	mov	r9, r2
 800b4dc:	7e27      	ldrb	r7, [r4, #24]
 800b4de:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4e0:	2f78      	cmp	r7, #120	; 0x78
 800b4e2:	4680      	mov	r8, r0
 800b4e4:	469a      	mov	sl, r3
 800b4e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4ea:	d807      	bhi.n	800b4fc <_printf_i+0x28>
 800b4ec:	2f62      	cmp	r7, #98	; 0x62
 800b4ee:	d80a      	bhi.n	800b506 <_printf_i+0x32>
 800b4f0:	2f00      	cmp	r7, #0
 800b4f2:	f000 80d8 	beq.w	800b6a6 <_printf_i+0x1d2>
 800b4f6:	2f58      	cmp	r7, #88	; 0x58
 800b4f8:	f000 80a3 	beq.w	800b642 <_printf_i+0x16e>
 800b4fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b504:	e03a      	b.n	800b57c <_printf_i+0xa8>
 800b506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b50a:	2b15      	cmp	r3, #21
 800b50c:	d8f6      	bhi.n	800b4fc <_printf_i+0x28>
 800b50e:	a001      	add	r0, pc, #4	; (adr r0, 800b514 <_printf_i+0x40>)
 800b510:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b514:	0800b56d 	.word	0x0800b56d
 800b518:	0800b581 	.word	0x0800b581
 800b51c:	0800b4fd 	.word	0x0800b4fd
 800b520:	0800b4fd 	.word	0x0800b4fd
 800b524:	0800b4fd 	.word	0x0800b4fd
 800b528:	0800b4fd 	.word	0x0800b4fd
 800b52c:	0800b581 	.word	0x0800b581
 800b530:	0800b4fd 	.word	0x0800b4fd
 800b534:	0800b4fd 	.word	0x0800b4fd
 800b538:	0800b4fd 	.word	0x0800b4fd
 800b53c:	0800b4fd 	.word	0x0800b4fd
 800b540:	0800b68d 	.word	0x0800b68d
 800b544:	0800b5b1 	.word	0x0800b5b1
 800b548:	0800b66f 	.word	0x0800b66f
 800b54c:	0800b4fd 	.word	0x0800b4fd
 800b550:	0800b4fd 	.word	0x0800b4fd
 800b554:	0800b6af 	.word	0x0800b6af
 800b558:	0800b4fd 	.word	0x0800b4fd
 800b55c:	0800b5b1 	.word	0x0800b5b1
 800b560:	0800b4fd 	.word	0x0800b4fd
 800b564:	0800b4fd 	.word	0x0800b4fd
 800b568:	0800b677 	.word	0x0800b677
 800b56c:	680b      	ldr	r3, [r1, #0]
 800b56e:	1d1a      	adds	r2, r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	600a      	str	r2, [r1, #0]
 800b574:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0a3      	b.n	800b6c8 <_printf_i+0x1f4>
 800b580:	6825      	ldr	r5, [r4, #0]
 800b582:	6808      	ldr	r0, [r1, #0]
 800b584:	062e      	lsls	r6, r5, #24
 800b586:	f100 0304 	add.w	r3, r0, #4
 800b58a:	d50a      	bpl.n	800b5a2 <_printf_i+0xce>
 800b58c:	6805      	ldr	r5, [r0, #0]
 800b58e:	600b      	str	r3, [r1, #0]
 800b590:	2d00      	cmp	r5, #0
 800b592:	da03      	bge.n	800b59c <_printf_i+0xc8>
 800b594:	232d      	movs	r3, #45	; 0x2d
 800b596:	426d      	negs	r5, r5
 800b598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b59c:	485e      	ldr	r0, [pc, #376]	; (800b718 <_printf_i+0x244>)
 800b59e:	230a      	movs	r3, #10
 800b5a0:	e019      	b.n	800b5d6 <_printf_i+0x102>
 800b5a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5a6:	6805      	ldr	r5, [r0, #0]
 800b5a8:	600b      	str	r3, [r1, #0]
 800b5aa:	bf18      	it	ne
 800b5ac:	b22d      	sxthne	r5, r5
 800b5ae:	e7ef      	b.n	800b590 <_printf_i+0xbc>
 800b5b0:	680b      	ldr	r3, [r1, #0]
 800b5b2:	6825      	ldr	r5, [r4, #0]
 800b5b4:	1d18      	adds	r0, r3, #4
 800b5b6:	6008      	str	r0, [r1, #0]
 800b5b8:	0628      	lsls	r0, r5, #24
 800b5ba:	d501      	bpl.n	800b5c0 <_printf_i+0xec>
 800b5bc:	681d      	ldr	r5, [r3, #0]
 800b5be:	e002      	b.n	800b5c6 <_printf_i+0xf2>
 800b5c0:	0669      	lsls	r1, r5, #25
 800b5c2:	d5fb      	bpl.n	800b5bc <_printf_i+0xe8>
 800b5c4:	881d      	ldrh	r5, [r3, #0]
 800b5c6:	4854      	ldr	r0, [pc, #336]	; (800b718 <_printf_i+0x244>)
 800b5c8:	2f6f      	cmp	r7, #111	; 0x6f
 800b5ca:	bf0c      	ite	eq
 800b5cc:	2308      	moveq	r3, #8
 800b5ce:	230a      	movne	r3, #10
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5d6:	6866      	ldr	r6, [r4, #4]
 800b5d8:	60a6      	str	r6, [r4, #8]
 800b5da:	2e00      	cmp	r6, #0
 800b5dc:	bfa2      	ittt	ge
 800b5de:	6821      	ldrge	r1, [r4, #0]
 800b5e0:	f021 0104 	bicge.w	r1, r1, #4
 800b5e4:	6021      	strge	r1, [r4, #0]
 800b5e6:	b90d      	cbnz	r5, 800b5ec <_printf_i+0x118>
 800b5e8:	2e00      	cmp	r6, #0
 800b5ea:	d04d      	beq.n	800b688 <_printf_i+0x1b4>
 800b5ec:	4616      	mov	r6, r2
 800b5ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5f2:	fb03 5711 	mls	r7, r3, r1, r5
 800b5f6:	5dc7      	ldrb	r7, [r0, r7]
 800b5f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5fc:	462f      	mov	r7, r5
 800b5fe:	42bb      	cmp	r3, r7
 800b600:	460d      	mov	r5, r1
 800b602:	d9f4      	bls.n	800b5ee <_printf_i+0x11a>
 800b604:	2b08      	cmp	r3, #8
 800b606:	d10b      	bne.n	800b620 <_printf_i+0x14c>
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	07df      	lsls	r7, r3, #31
 800b60c:	d508      	bpl.n	800b620 <_printf_i+0x14c>
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	6861      	ldr	r1, [r4, #4]
 800b612:	4299      	cmp	r1, r3
 800b614:	bfde      	ittt	le
 800b616:	2330      	movle	r3, #48	; 0x30
 800b618:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b61c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800b620:	1b92      	subs	r2, r2, r6
 800b622:	6122      	str	r2, [r4, #16]
 800b624:	f8cd a000 	str.w	sl, [sp]
 800b628:	464b      	mov	r3, r9
 800b62a:	aa03      	add	r2, sp, #12
 800b62c:	4621      	mov	r1, r4
 800b62e:	4640      	mov	r0, r8
 800b630:	f7ff fee2 	bl	800b3f8 <_printf_common>
 800b634:	3001      	adds	r0, #1
 800b636:	d14c      	bne.n	800b6d2 <_printf_i+0x1fe>
 800b638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b63c:	b004      	add	sp, #16
 800b63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b642:	4835      	ldr	r0, [pc, #212]	; (800b718 <_printf_i+0x244>)
 800b644:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	680e      	ldr	r6, [r1, #0]
 800b64c:	061f      	lsls	r7, r3, #24
 800b64e:	f856 5b04 	ldr.w	r5, [r6], #4
 800b652:	600e      	str	r6, [r1, #0]
 800b654:	d514      	bpl.n	800b680 <_printf_i+0x1ac>
 800b656:	07d9      	lsls	r1, r3, #31
 800b658:	bf44      	itt	mi
 800b65a:	f043 0320 	orrmi.w	r3, r3, #32
 800b65e:	6023      	strmi	r3, [r4, #0]
 800b660:	b91d      	cbnz	r5, 800b66a <_printf_i+0x196>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	f023 0320 	bic.w	r3, r3, #32
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	2310      	movs	r3, #16
 800b66c:	e7b0      	b.n	800b5d0 <_printf_i+0xfc>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	f043 0320 	orr.w	r3, r3, #32
 800b674:	6023      	str	r3, [r4, #0]
 800b676:	2378      	movs	r3, #120	; 0x78
 800b678:	4828      	ldr	r0, [pc, #160]	; (800b71c <_printf_i+0x248>)
 800b67a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b67e:	e7e3      	b.n	800b648 <_printf_i+0x174>
 800b680:	065e      	lsls	r6, r3, #25
 800b682:	bf48      	it	mi
 800b684:	b2ad      	uxthmi	r5, r5
 800b686:	e7e6      	b.n	800b656 <_printf_i+0x182>
 800b688:	4616      	mov	r6, r2
 800b68a:	e7bb      	b.n	800b604 <_printf_i+0x130>
 800b68c:	680b      	ldr	r3, [r1, #0]
 800b68e:	6826      	ldr	r6, [r4, #0]
 800b690:	6960      	ldr	r0, [r4, #20]
 800b692:	1d1d      	adds	r5, r3, #4
 800b694:	600d      	str	r5, [r1, #0]
 800b696:	0635      	lsls	r5, r6, #24
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	d501      	bpl.n	800b6a0 <_printf_i+0x1cc>
 800b69c:	6018      	str	r0, [r3, #0]
 800b69e:	e002      	b.n	800b6a6 <_printf_i+0x1d2>
 800b6a0:	0671      	lsls	r1, r6, #25
 800b6a2:	d5fb      	bpl.n	800b69c <_printf_i+0x1c8>
 800b6a4:	8018      	strh	r0, [r3, #0]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	4616      	mov	r6, r2
 800b6ac:	e7ba      	b.n	800b624 <_printf_i+0x150>
 800b6ae:	680b      	ldr	r3, [r1, #0]
 800b6b0:	1d1a      	adds	r2, r3, #4
 800b6b2:	600a      	str	r2, [r1, #0]
 800b6b4:	681e      	ldr	r6, [r3, #0]
 800b6b6:	6862      	ldr	r2, [r4, #4]
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7f4 fd90 	bl	80001e0 <memchr>
 800b6c0:	b108      	cbz	r0, 800b6c6 <_printf_i+0x1f2>
 800b6c2:	1b80      	subs	r0, r0, r6
 800b6c4:	6060      	str	r0, [r4, #4]
 800b6c6:	6863      	ldr	r3, [r4, #4]
 800b6c8:	6123      	str	r3, [r4, #16]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6d0:	e7a8      	b.n	800b624 <_printf_i+0x150>
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	4632      	mov	r2, r6
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	4640      	mov	r0, r8
 800b6da:	47d0      	blx	sl
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d0ab      	beq.n	800b638 <_printf_i+0x164>
 800b6e0:	6823      	ldr	r3, [r4, #0]
 800b6e2:	079b      	lsls	r3, r3, #30
 800b6e4:	d413      	bmi.n	800b70e <_printf_i+0x23a>
 800b6e6:	68e0      	ldr	r0, [r4, #12]
 800b6e8:	9b03      	ldr	r3, [sp, #12]
 800b6ea:	4298      	cmp	r0, r3
 800b6ec:	bfb8      	it	lt
 800b6ee:	4618      	movlt	r0, r3
 800b6f0:	e7a4      	b.n	800b63c <_printf_i+0x168>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	4632      	mov	r2, r6
 800b6f6:	4649      	mov	r1, r9
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	47d0      	blx	sl
 800b6fc:	3001      	adds	r0, #1
 800b6fe:	d09b      	beq.n	800b638 <_printf_i+0x164>
 800b700:	3501      	adds	r5, #1
 800b702:	68e3      	ldr	r3, [r4, #12]
 800b704:	9903      	ldr	r1, [sp, #12]
 800b706:	1a5b      	subs	r3, r3, r1
 800b708:	42ab      	cmp	r3, r5
 800b70a:	dcf2      	bgt.n	800b6f2 <_printf_i+0x21e>
 800b70c:	e7eb      	b.n	800b6e6 <_printf_i+0x212>
 800b70e:	2500      	movs	r5, #0
 800b710:	f104 0619 	add.w	r6, r4, #25
 800b714:	e7f5      	b.n	800b702 <_printf_i+0x22e>
 800b716:	bf00      	nop
 800b718:	08013d69 	.word	0x08013d69
 800b71c:	08013d7a 	.word	0x08013d7a

0800b720 <_sbrk_r>:
 800b720:	b538      	push	{r3, r4, r5, lr}
 800b722:	4d06      	ldr	r5, [pc, #24]	; (800b73c <_sbrk_r+0x1c>)
 800b724:	2300      	movs	r3, #0
 800b726:	4604      	mov	r4, r0
 800b728:	4608      	mov	r0, r1
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	f7fd ff70 	bl	8009610 <_sbrk>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d102      	bne.n	800b73a <_sbrk_r+0x1a>
 800b734:	682b      	ldr	r3, [r5, #0]
 800b736:	b103      	cbz	r3, 800b73a <_sbrk_r+0x1a>
 800b738:	6023      	str	r3, [r4, #0]
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	200000ac 	.word	0x200000ac

0800b740 <__sread>:
 800b740:	b510      	push	{r4, lr}
 800b742:	460c      	mov	r4, r1
 800b744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b748:	f000 f8a0 	bl	800b88c <_read_r>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	bfab      	itete	ge
 800b750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b752:	89a3      	ldrhlt	r3, [r4, #12]
 800b754:	181b      	addge	r3, r3, r0
 800b756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b75a:	bfac      	ite	ge
 800b75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b75e:	81a3      	strhlt	r3, [r4, #12]
 800b760:	bd10      	pop	{r4, pc}

0800b762 <__swrite>:
 800b762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b766:	461f      	mov	r7, r3
 800b768:	898b      	ldrh	r3, [r1, #12]
 800b76a:	05db      	lsls	r3, r3, #23
 800b76c:	4605      	mov	r5, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	4616      	mov	r6, r2
 800b772:	d505      	bpl.n	800b780 <__swrite+0x1e>
 800b774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b778:	2302      	movs	r3, #2
 800b77a:	2200      	movs	r2, #0
 800b77c:	f000 f868 	bl	800b850 <_lseek_r>
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	4632      	mov	r2, r6
 800b78e:	463b      	mov	r3, r7
 800b790:	4628      	mov	r0, r5
 800b792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b796:	f000 b817 	b.w	800b7c8 <_write_r>

0800b79a <__sseek>:
 800b79a:	b510      	push	{r4, lr}
 800b79c:	460c      	mov	r4, r1
 800b79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a2:	f000 f855 	bl	800b850 <_lseek_r>
 800b7a6:	1c43      	adds	r3, r0, #1
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	bf15      	itete	ne
 800b7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b7b6:	81a3      	strheq	r3, [r4, #12]
 800b7b8:	bf18      	it	ne
 800b7ba:	81a3      	strhne	r3, [r4, #12]
 800b7bc:	bd10      	pop	{r4, pc}

0800b7be <__sclose>:
 800b7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c2:	f000 b813 	b.w	800b7ec <_close_r>
	...

0800b7c8 <_write_r>:
 800b7c8:	b538      	push	{r3, r4, r5, lr}
 800b7ca:	4d07      	ldr	r5, [pc, #28]	; (800b7e8 <_write_r+0x20>)
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	4608      	mov	r0, r1
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	602a      	str	r2, [r5, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f7fd fec9 	bl	800956e <_write>
 800b7dc:	1c43      	adds	r3, r0, #1
 800b7de:	d102      	bne.n	800b7e6 <_write_r+0x1e>
 800b7e0:	682b      	ldr	r3, [r5, #0]
 800b7e2:	b103      	cbz	r3, 800b7e6 <_write_r+0x1e>
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	bd38      	pop	{r3, r4, r5, pc}
 800b7e8:	200000ac 	.word	0x200000ac

0800b7ec <_close_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	4d06      	ldr	r5, [pc, #24]	; (800b808 <_close_r+0x1c>)
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	4608      	mov	r0, r1
 800b7f6:	602b      	str	r3, [r5, #0]
 800b7f8:	f7fd fed5 	bl	80095a6 <_close>
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	d102      	bne.n	800b806 <_close_r+0x1a>
 800b800:	682b      	ldr	r3, [r5, #0]
 800b802:	b103      	cbz	r3, 800b806 <_close_r+0x1a>
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	bd38      	pop	{r3, r4, r5, pc}
 800b808:	200000ac 	.word	0x200000ac

0800b80c <_fstat_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4d07      	ldr	r5, [pc, #28]	; (800b82c <_fstat_r+0x20>)
 800b810:	2300      	movs	r3, #0
 800b812:	4604      	mov	r4, r0
 800b814:	4608      	mov	r0, r1
 800b816:	4611      	mov	r1, r2
 800b818:	602b      	str	r3, [r5, #0]
 800b81a:	f7fd fed0 	bl	80095be <_fstat>
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	d102      	bne.n	800b828 <_fstat_r+0x1c>
 800b822:	682b      	ldr	r3, [r5, #0]
 800b824:	b103      	cbz	r3, 800b828 <_fstat_r+0x1c>
 800b826:	6023      	str	r3, [r4, #0]
 800b828:	bd38      	pop	{r3, r4, r5, pc}
 800b82a:	bf00      	nop
 800b82c:	200000ac 	.word	0x200000ac

0800b830 <_isatty_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d06      	ldr	r5, [pc, #24]	; (800b84c <_isatty_r+0x1c>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	f7fd fecf 	bl	80095de <_isatty>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_isatty_r+0x1a>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_isatty_r+0x1a>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	200000ac 	.word	0x200000ac

0800b850 <_lseek_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d07      	ldr	r5, [pc, #28]	; (800b870 <_lseek_r+0x20>)
 800b854:	4604      	mov	r4, r0
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	f7fd fec8 	bl	80095f4 <_lseek>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_lseek_r+0x1e>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_lseek_r+0x1e>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	200000ac 	.word	0x200000ac

0800b874 <__malloc_lock>:
 800b874:	4801      	ldr	r0, [pc, #4]	; (800b87c <__malloc_lock+0x8>)
 800b876:	f7ff bb55 	b.w	800af24 <__retarget_lock_acquire_recursive>
 800b87a:	bf00      	nop
 800b87c:	200000a4 	.word	0x200000a4

0800b880 <__malloc_unlock>:
 800b880:	4801      	ldr	r0, [pc, #4]	; (800b888 <__malloc_unlock+0x8>)
 800b882:	f7ff bb50 	b.w	800af26 <__retarget_lock_release_recursive>
 800b886:	bf00      	nop
 800b888:	200000a4 	.word	0x200000a4

0800b88c <_read_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d07      	ldr	r5, [pc, #28]	; (800b8ac <_read_r+0x20>)
 800b890:	4604      	mov	r4, r0
 800b892:	4608      	mov	r0, r1
 800b894:	4611      	mov	r1, r2
 800b896:	2200      	movs	r2, #0
 800b898:	602a      	str	r2, [r5, #0]
 800b89a:	461a      	mov	r2, r3
 800b89c:	f7fd fe4a 	bl	8009534 <_read>
 800b8a0:	1c43      	adds	r3, r0, #1
 800b8a2:	d102      	bne.n	800b8aa <_read_r+0x1e>
 800b8a4:	682b      	ldr	r3, [r5, #0]
 800b8a6:	b103      	cbz	r3, 800b8aa <_read_r+0x1e>
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	bd38      	pop	{r3, r4, r5, pc}
 800b8ac:	200000ac 	.word	0x200000ac

0800b8b0 <_init>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	bf00      	nop
 800b8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b6:	bc08      	pop	{r3}
 800b8b8:	469e      	mov	lr, r3
 800b8ba:	4770      	bx	lr

0800b8bc <_fini>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	bf00      	nop
 800b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	469e      	mov	lr, r3
 800b8c6:	4770      	bx	lr
